{"hash":"5b203fc4b264b7b4c7989ab7dd8f86f67bb8ea97d4c5a91efe10458d40a708f6","types":[{"exports":["ClickedOutsideDirective","DiaUtilsLibsModule","Dossier","DossierBloc","IAdvancedCustom","IDossierItem","IFormGroupConfig","IFormatInput","ITableState","InputDatePicker","InputRangeDate","Inputs","IsNumericDirective","ModelOption","Scroll","Select","Textarea","Tile","Tiles"],"facadeModuleId":"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/dia-utils-libs.d.ts","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/dia-utils-libs.module.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IFormatInput.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/model-option.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IFormGroupConfig.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IAdvancedCustom.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/Dossier.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/dossier/dossier.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input/input.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/select/select.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/textarea/textarea.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input-date-picker/input-date-picker.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input-range-date/input-range-date.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/scroll/scroll.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/tiles/tiles.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/directives/clicked-outside.directive.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/directives/is-numeric.directive.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/ITableState.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IDossierItem.d.ts","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/dia-utils-libs.d.ts"],"name":"dia-utils-libs.d","type":"chunk","dynamicImports":[],"fileName":"index.d.ts","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","OnInit","OnChanges","SimpleChanges","AfterViewChecked","ElementRef","EventEmitter","Renderer2","AfterViewInit","QueryList","TemplateRef","ViewContainerRef"],"@angular/common":["*"],"@angular/forms":["*","FormGroup","ValidatorFn","AsyncValidatorFn","ControlValueAccessor","AbstractControl","FormControl","ControlContainer"],"@angular/material/form-field":["*","FloatLabelType"],"@angular/material/input":["*"],"@angular/material/icon":["*"],"@angular/material/datepicker":["*"],"@angular/material/tooltip":["*"],"@angular/material/select":["MatSelect"],"@angular/material/core":["DateAdapter"]},"imports":["@angular/core","@angular/common","@angular/forms","@angular/material/form-field","@angular/material/input","@angular/material/icon","@angular/material/datepicker","@angular/material/tooltip","@angular/material/select","@angular/material/core"],"modules":{"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/dia-utils-libs.module.d.ts":{"code":"declare class DiaUtilsLibsModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<DiaUtilsLibsModule, never>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<DiaUtilsLibsModule, never, [typeof i1.CommonModule, typeof i2.FormsModule, typeof i2.ReactiveFormsModule, typeof i3.MatFormFieldModule, typeof i4.MatInputModule, typeof i5.MatIconModule, typeof i6.MatDatepickerModule, typeof i7.MatTooltipModule], never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<DiaUtilsLibsModule>;\n}","originalLength":833,"removedExports":[],"renderedExports":["DiaUtilsLibsModule"],"renderedLength":465},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IFormatInput.d.ts":{"code":"interface IFormatInput {\n    parse: (_: any) => any;\n    transform: (_: any) => any;\n}","originalLength":94,"removedExports":[],"renderedExports":["IFormatInput"],"renderedLength":86},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/model-option.d.ts":{"code":"declare class ModelOption {\n    libelle: string;\n    value: string;\n    data: any;\n    constructor(lib: string, val: string, dat?: any);\n    static setUniqueValue(lib: string): ModelOption;\n}","originalLength":199,"removedExports":[],"renderedExports":["ModelOption"],"renderedLength":191},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IFormGroupConfig.d.ts":{"code":"interface IFormGroupConfig {\n    formName: string;\n    form: FormGroup;\n    updateOn?: string;\n    validators: ValidatorFn[];\n    asyncValidators?: AsyncValidatorFn | AsyncValidatorFn[];\n}","originalLength":271,"removedExports":[],"renderedExports":["IFormGroupConfig"],"renderedLength":188},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IAdvancedCustom.d.ts":{"code":"interface IAdvancedCustom {\n    template: any;\n    context: any;\n}","originalLength":74,"removedExports":[],"renderedExports":["IAdvancedCustom"],"renderedLength":66},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/Dossier.d.ts":{"code":"declare class Dossier {\n    static service?: any;\n    static amountFormatter?: IFormatInput;\n    static prefix?: string;\n    linkParam?: number;\n    type?: string;\n    className?: string;\n    onclick?: (_: any) => {};\n    onchange?: (_: any) => {};\n    title?: string;\n    icon?: string;\n    iconAction?: (...args: any[]) => {};\n    list?: Dossier[];\n    custom?: boolean;\n    model?: any;\n    field?: any;\n    data?: any;\n    value?: string | number;\n    isNumber?: boolean;\n    isDecimal?: boolean | undefined;\n    isDate?: boolean;\n    minDate?: Date;\n    maxDate?: Date;\n    noLine?: boolean;\n    minrows?: number;\n    isRadio?: boolean;\n    possibleValues?: ModelOption[];\n    hide?: boolean;\n    suffix?: string;\n    tooltip?: string;\n    nbColumns?: number;\n    maxLength?: number;\n    minLength?: number;\n    disableVisualHelp?: boolean;\n    disabled?: boolean;\n    required?: boolean | undefined;\n    formGroupConfig?: IFormGroupConfig;\n    customFormat?: IFormatInput;\n    advancedCustoms?: IAdvancedCustom[];\n    selectValues?: any[];\n    placeholder?: string;\n    getErrorMsg?: (_: Dossier) => {};\n    sizeColumn?: number;\n    indexColumn?: number;\n    countDown?: boolean;\n    modifiable?: boolean;\n    isTextarea?: boolean;\n    customClass?: string;\n    fill?: boolean;\n    constructor(title: string, list: Dossier[], value: string | number);\n    static isDefined(val: any): boolean;\n    static getEmptyDossier(): Dossier;\n    static setByModel(title: string, model: any, field: string, custom?: any): {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n    } | {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n        suffix: any;\n    };\n    static set(title: string, value: any, custom?: any, model?: any, field?: string): {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n    } | {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n        suffix: any;\n    };\n    static build(title: string, list: Dossier[], multi?: Dossier[], custom?: any): {\n        value: null;\n        title: string;\n        list: Dossier[] | {\n            value: null;\n            title: null;\n            list: Dossier[];\n        }[];\n    };\n    static formBuild(value: any, config: IFormGroupConfig): void;\n    static bloc(title: string, list: Dossier[]): Dossier;\n}","originalLength":2664,"removedExports":[],"renderedExports":["Dossier"],"renderedLength":2455},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/dossier/dossier.d.ts":{"code":"declare class DossierBloc implements OnInit, OnChanges {\n    amountFormat: IFormatInput | undefined;\n    disabled: boolean;\n    modifiable: boolean;\n    translateSuffix: string;\n    nbColumns: number;\n    items: Dossier[];\n    ratifiable: any;\n    minrows: number;\n    transServ: any;\n    debug: boolean;\n    emptyfn: () => void;\n    constructor();\n    ngOnChanges(changes: SimpleChanges): void;\n    translateTitle(it: string): any;\n    translator(it: Dossier): Dossier;\n    mapTimestampToDate(timestamp: number): string | null;\n    ngOnInit(): void;\n    getIntName(str: string): string;\n    onclick(item: Dossier): void;\n    handleChange(e: any, item: Dossier): void;\n    handleValue(item: Dossier): any;\n    handleSelectValue(item: Dossier): ModelOption | null;\n    handleFormattedValue(item: Dossier): string;\n    handleDateValue(item: Dossier): Date | undefined;\n    fgroup(): FormGroup<{}>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<DossierBloc, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<DossierBloc, \"dia-dossier\", never, { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"modifiable\": { \"alias\": \"modifiable\"; \"required\": false; }; \"translateSuffix\": { \"alias\": \"translateSuffix\"; \"required\": false; }; \"nbColumns\": { \"alias\": \"nbColumns\"; \"required\": false; }; \"items\": { \"alias\": \"items\"; \"required\": false; }; \"ratifiable\": { \"alias\": \"ratifiable\"; \"required\": false; }; \"minrows\": { \"alias\": \"minrows\"; \"required\": false; }; \"transServ\": { \"alias\": \"transServ\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n}","originalLength":1908,"removedExports":[],"renderedExports":["DossierBloc"],"renderedLength":1599},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input/input.d.ts":{"code":"declare class Inputs implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\n    private el;\n    private renderer;\n    private controlContainer;\n    formatInput: ElementRef | undefined;\n    input: ElementRef | undefined;\n    computeWidth: ElementRef | undefined;\n    displayAsLabel: boolean;\n    label: string;\n    required: boolean | undefined;\n    format: string;\n    placeholder: string | undefined;\n    hidden: string | undefined;\n    description: string | undefined;\n    disabled: boolean | undefined;\n    isDatePicker: boolean;\n    readonlyInput: boolean | undefined;\n    readonly: boolean | undefined;\n    type: string | undefined;\n    min: number;\n    max: number;\n    minDate: number;\n    maxDate: number;\n    maxLength: number | undefined;\n    maxLengthFormat: number | undefined;\n    minLength: number | undefined;\n    unit: string;\n    name: string | undefined;\n    cancellable: boolean;\n    searching: boolean;\n    value: string | boolean | undefined;\n    customFormat: IFormatInput | undefined;\n    icon: string | undefined;\n    errorMsg: string | undefined;\n    isError: boolean;\n    valueChange: EventEmitter<any>;\n    cancelValue: EventEmitter<any>;\n    formattedValue: string;\n    defaultControl: boolean;\n    matDatepicker: any;\n    dateChange: EventEmitter<any>;\n    visualHelpDisabled: boolean | undefined;\n    isDateControl: boolean;\n    currentControl: AbstractControl | undefined;\n    formControl: FormControl;\n    iconWasClicked: EventEmitter<any>;\n    wasDblClicked: EventEmitter<any>;\n    iconAction: (() => any) | undefined;\n    tooltipText: string;\n    onChange: (_: any) => void;\n    onTouched: (_: any) => void;\n    constructor(el: ElementRef, renderer: Renderer2, controlContainer: ControlContainer);\n    ngOnInit(): void;\n    f_dateChange(): void;\n    gets(obs: any): any;\n    ngAfterViewChecked(): void;\n    textOverflow(): boolean | undefined;\n    ngOnChanges(changes: SimpleChanges): void;\n    change(newValue: any): void;\n    changeFormat(newValue: any): void;\n    cancel(data: any): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    transform(val: any): string;\n    parse(val: any): string;\n    iconClicked(e: Event): void;\n    dblClicked(e: Event): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Inputs, [null, null, { optional: true; host: true; skipSelf: true; }]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Inputs, \"dia-input\", never, { \"displayAsLabel\": { \"alias\": \"displayAsLabel\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"format\": { \"alias\": \"format\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"hidden\": { \"alias\": \"hidden\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"isDatePicker\": { \"alias\": \"isDatePicker\"; \"required\": false; }; \"readonlyInput\": { \"alias\": \"readonlyInput\"; \"required\": false; }; \"readonly\": { \"alias\": \"readonly\"; \"required\": false; }; \"type\": { \"alias\": \"type\"; \"required\": false; }; \"min\": { \"alias\": \"min\"; \"required\": false; }; \"max\": { \"alias\": \"max\"; \"required\": false; }; \"minDate\": { \"alias\": \"minDate\"; \"required\": false; }; \"maxDate\": { \"alias\": \"maxDate\"; \"required\": false; }; \"maxLength\": { \"alias\": \"maxLength\"; \"required\": false; }; \"minLength\": { \"alias\": \"minLength\"; \"required\": false; }; \"unit\": { \"alias\": \"unit\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"cancellable\": { \"alias\": \"cancellable\"; \"required\": false; }; \"searching\": { \"alias\": \"searching\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"customFormat\": { \"alias\": \"customFormat\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"errorMsg\": { \"alias\": \"errorMsg\"; \"required\": false; }; \"isError\": { \"alias\": \"isError\"; \"required\": false; }; \"defaultControl\": { \"alias\": \"defaultControl\"; \"required\": false; }; \"matDatepicker\": { \"alias\": \"matDatepicker\"; \"required\": false; }; \"visualHelpDisabled\": { \"alias\": \"visualHelpDisabled\"; \"required\": false; }; \"isDateControl\": { \"alias\": \"isDateControl\"; \"required\": false; }; \"formControl\": { \"alias\": \"formControl\"; \"required\": false; }; \"iconAction\": { \"alias\": \"iconAction\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"cancelValue\": \"cancelValue\"; \"dateChange\": \"dateChange\"; \"iconWasClicked\": \"iconWasClicked\"; \"wasDblClicked\": \"wasDblClicked\"; }, never, [\"*\"], true, never>;\n}","originalLength":4960,"removedExports":[],"renderedExports":["Inputs"],"renderedLength":4636},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/select/select.d.ts":{"code":"declare class Select implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit, AfterViewChecked {\n    private controlContainer;\n    private el;\n    value: ModelOption | null;\n    required: boolean;\n    defaultValue: boolean;\n    fixPlaceholder: boolean;\n    values: ModelOption[] | null;\n    forced: ModelOption[] | null;\n    list: ModelOption[];\n    placeholder: string | undefined;\n    disablePlaceHolder: boolean;\n    label: string | undefined;\n    description: string | undefined;\n    multiple: boolean;\n    defaultSort: boolean;\n    selectedValue: string;\n    disabled: boolean;\n    direction: string;\n    preset: any;\n    tooltip: boolean;\n    tooltipValue: string;\n    autoClosedAfter: number;\n    valueChange: EventEmitter<string>;\n    valuesChange: EventEmitter<ModelOption[] | null>;\n    beenForced: EventEmitter<ModelOption[] | null>;\n    formField: any;\n    select: MatSelect | undefined;\n    floatLabel: FloatLabelType;\n    currentControl: AbstractControl | undefined;\n    private isBeingForced;\n    onChange: (_: any) => void;\n    onTouched: (_: any) => void;\n    translate: any;\n    isAppleBrowser: boolean;\n    constructor(controlContainer: ControlContainer, el: ElementRef);\n    ngAfterViewInit(): void;\n    ngOnInit(): void;\n    isAppleBrowsers(): boolean;\n    gets(obs: any): any;\n    ngAfterViewChecked(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    resetMultiple(): void;\n    getListValue(val: any): ModelOption | null;\n    isAlreadySelected(val: any): ModelOption | null;\n    isValInList(val: any, list: ModelOption[] | null): ModelOption | null;\n    getPresetValue(): ModelOption | null;\n    onUpdateValue(item: any): void;\n    getPlaceHolder(): string | undefined;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    itemSelected(e: any, item: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Select, [{ optional: true; host: true; skipSelf: true; }, null]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Select, \"dia-select\", never, { \"value\": { \"alias\": \"value\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"defaultValue\": { \"alias\": \"defaultValue\"; \"required\": false; }; \"fixPlaceholder\": { \"alias\": \"fixPlaceholder\"; \"required\": false; }; \"values\": { \"alias\": \"values\"; \"required\": false; }; \"forced\": { \"alias\": \"forced\"; \"required\": false; }; \"list\": { \"alias\": \"list\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"disablePlaceHolder\": { \"alias\": \"disablePlaceHolder\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"multiple\": { \"alias\": \"multiple\"; \"required\": false; }; \"defaultSort\": { \"alias\": \"defaultSort\"; \"required\": false; }; \"selectedValue\": { \"alias\": \"selectedValue\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"direction\": { \"alias\": \"direction\"; \"required\": false; }; \"preset\": { \"alias\": \"preset\"; \"required\": false; }; \"tooltip\": { \"alias\": \"tooltip\"; \"required\": false; }; \"autoClosedAfter\": { \"alias\": \"autoClosedAfter\"; \"required\": false; }; \"translate\": { \"alias\": \"translate\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"valuesChange\": \"valuesChange\"; \"beenForced\": \"beenForced\"; }, never, never, true, never>;\n}","originalLength":3794,"removedExports":[],"renderedExports":["Select"],"renderedLength":3363},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/textarea/textarea.d.ts":{"code":"declare class Textarea implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\n    private el;\n    private controlContainer;\n    input: ElementRef;\n    label: string;\n    unit: string | undefined;\n    placeholder: string | undefined;\n    description: string | undefined;\n    value: string | undefined;\n    readonly: boolean | undefined;\n    innerHTML: string | undefined;\n    isTextArea: boolean;\n    valueChange: EventEmitter<any>;\n    maxLength: number | undefined;\n    minrows: number | undefined;\n    required: boolean | undefined;\n    name: string | undefined;\n    disabled: boolean | undefined;\n    defaultControl: boolean | undefined;\n    customFormat: any;\n    formControlName: string;\n    formGroup: any;\n    iconAction: (...args: any[]) => any | undefined;\n    icon: string;\n    dblClick: (...args: any[]) => any;\n    countDown: boolean | undefined;\n    currentControl: AbstractControl | undefined;\n    count: number;\n    formControl: FormControl | undefined;\n    onChange: (...args: any[]) => void;\n    onTouched: (...args: any[]) => void;\n    constructor(el: ElementRef, controlContainer: ControlContainer);\n    ngAfterViewChecked(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    change(newValue: any): void;\n    changeTextAreaValue(): void;\n    writeValue(val: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    iconClicked(item?: any): any;\n    dblClicked(item?: any): any;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Textarea, [null, { optional: true; host: true; skipSelf: true; }]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Textarea, \"dia-textarea\", never, { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"unit\": { \"alias\": \"unit\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"readonly\": { \"alias\": \"readonly\"; \"required\": false; }; \"innerHTML\": { \"alias\": \"innerHTML\"; \"required\": false; }; \"isTextArea\": { \"alias\": \"isTextArea\"; \"required\": false; }; \"maxLength\": { \"alias\": \"maxLength\"; \"required\": false; }; \"minrows\": { \"alias\": \"minrows\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"defaultControl\": { \"alias\": \"defaultControl\"; \"required\": false; }; \"customFormat\": { \"alias\": \"customFormat\"; \"required\": false; }; \"formControlName\": { \"alias\": \"formControlName\"; \"required\": false; }; \"formGroup\": { \"alias\": \"formGroup\"; \"required\": false; }; \"iconAction\": { \"alias\": \"iconAction\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"dblClick\": { \"alias\": \"dblClick\"; \"required\": false; }; \"countDown\": { \"alias\": \"countDown\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; }, never, [\"*\", \"*\"], true, never>;\n}","originalLength":3214,"removedExports":[],"renderedExports":["Textarea"],"renderedLength":2956},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input-date-picker/input-date-picker.d.ts":{"code":"declare class InputDatePicker implements ControlValueAccessor, OnChanges, OnInit {\n    private dateAdapter;\n    label: string;\n    customDatePicker: boolean;\n    placeholder: string;\n    minDate: Date | undefined;\n    maxDate: Date | undefined;\n    dateChange: EventEmitter<any>;\n    popupVisible: boolean;\n    formControlDate: FormControl<any>;\n    localDate: Date | undefined;\n    disabledf: boolean;\n    onChanged: (_?: any) => void;\n    onTouched: (_?: any) => void;\n    value: Date | undefined;\n    valueChange: EventEmitter<Date>;\n    required: boolean;\n    constructor(dateAdapter: DateAdapter<any>);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    writeValue(obj: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    set date(date: Date | undefined);\n    get date(): Date | undefined;\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    onChange(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<InputDatePicker, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<InputDatePicker, \"dia-input-date-picker\", never, { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"customDatePicker\": { \"alias\": \"customDatePicker\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"minDate\": { \"alias\": \"minDate\"; \"required\": false; }; \"maxDate\": { \"alias\": \"maxDate\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"date\": { \"alias\": \"date\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"dateChange\": \"dateChange\"; \"valueChange\": \"valueChange\"; }, never, never, true, never>;\n}","originalLength":2007,"removedExports":[],"renderedExports":["InputDatePicker"],"renderedLength":1760},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/input-range-date/input-range-date.d.ts":{"code":"declare class InputRangeDate {\n    static ɵfac: i0.ɵɵFactoryDeclaration<InputRangeDate, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<InputRangeDate, \"lib-input-range-date\", never, {}, {}, never, never, true, never>;\n}","originalLength":268,"removedExports":[],"renderedExports":["InputRangeDate"],"renderedLength":223},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/scroll/scroll.d.ts":{"code":"declare class Scroll implements OnInit {\n    scrolledUpDisabled: boolean;\n    scrolledDownDisabled: boolean;\n    scrolledLeftDisabled: boolean;\n    scrolledRightDisabled: boolean;\n    scrolledUp: EventEmitter<any>;\n    scrolledDown: EventEmitter<any>;\n    scrolledLeft: EventEmitter<any>;\n    scrolledRight: EventEmitter<any>;\n    scrollBuffer: number;\n    scrollBuffered: boolean;\n    vertical: boolean;\n    horizontal: boolean;\n    forced: boolean;\n    constructor();\n    onmouseWheel(event: any): void;\n    onmouseoverup(event: any): void;\n    onmouseoverdown(event: any): void;\n    ngOnInit(): void;\n    scrolled(up: any, wheel?: any): void;\n    scrolledH(up: any, wheel?: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Scroll, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Scroll, \"dia-scroll\", never, { \"scrolledUpDisabled\": { \"alias\": \"scrolledUpDisabled\"; \"required\": false; }; \"scrolledDownDisabled\": { \"alias\": \"scrolledDownDisabled\"; \"required\": false; }; \"scrolledLeftDisabled\": { \"alias\": \"scrolledLeftDisabled\"; \"required\": false; }; \"scrolledRightDisabled\": { \"alias\": \"scrolledRightDisabled\"; \"required\": false; }; \"scrollBuffer\": { \"alias\": \"scrollBuffer\"; \"required\": false; }; \"vertical\": { \"alias\": \"vertical\"; \"required\": false; }; \"horizontal\": { \"alias\": \"horizontal\"; \"required\": false; }; \"forced\": { \"alias\": \"forced\"; \"required\": false; }; }, { \"scrolledUp\": \"scrolledUp\"; \"scrolledDown\": \"scrolledDown\"; \"scrolledLeft\": \"scrolledLeft\"; \"scrolledRight\": \"scrolledRight\"; }, never, never, true, never>;\n}","originalLength":1640,"removedExports":[],"renderedExports":["Scroll"],"renderedLength":1541},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/tiles/tiles.d.ts":{"code":"interface Tile {\n    id?: string;\n    empty?: boolean;\n    desc?: string;\n    acteur?: string;\n    title?: string;\n    data?: any[];\n    css?: any;\n    form?: any;\n    searchHash?: string[];\n}\ndeclare class Tiles implements OnInit, AfterViewInit, OnChanges {\n    tunnelLeft: number | undefined;\n    tunnel: ElementRef;\n    hoster: ElementRef;\n    scroller: ElementRef;\n    container: ElementRef;\n    scenariContainer: ElementRef;\n    tile: QueryList<ElementRef> | undefined;\n    tiles: any | Tile[];\n    selector: boolean;\n    autofill: boolean;\n    emptyTpl: TemplateRef<any>;\n    tileTemplate: TemplateRef<any>;\n    title: string;\n    maxTiles: number | undefined;\n    wheelSpace: number;\n    hasLeft: EventEmitter<any>;\n    selection: EventEmitter<any>;\n    hasClicked: EventEmitter<any>;\n    maxBound: EventEmitter<boolean>;\n    minBound: EventEmitter<boolean>;\n    maxLength: number;\n    autoCompute: boolean;\n    forceActive: boolean;\n    circularEffect: boolean;\n    active: boolean;\n    currentContentWidth: number | null;\n    currentContentHeight: number | null;\n    isMobile: boolean;\n    tileWidth: number;\n    tileHeight: number;\n    maxTile: number | undefined;\n    carouselIndex: number | undefined;\n    scrollAngle: number;\n    translateX: string | undefined;\n    translateY: string | undefined;\n    scroll: number;\n    grabbing: boolean;\n    pourcent: number;\n    minDiametre: number;\n    maxDiametre: number;\n    forcedDiametre: number | undefined;\n    diametre: number;\n    tetas: any[];\n    init: boolean;\n    ready: boolean;\n    isCircularInitated: boolean;\n    selectedEvent: EventEmitter<any>;\n    selectedTile: any;\n    currentEvent: any;\n    isBoundMax: boolean;\n    isBoundMin: boolean;\n    debug: boolean;\n    constructor();\n    ngOnChanges(changes: SimpleChanges): void;\n    next(): void;\n    prev(): void;\n    ngOnInit(): void;\n    computeCircularTileAmount(): void;\n    addEmptyTiles(q: number): void;\n    isIosBrowser(): boolean;\n    isMobileBrowser(): boolean;\n    getDiametre(): any;\n    getFirstTile(): ElementRef<any> | undefined;\n    ngAfterViewInit(): void;\n    resetTunnel(e?: any): void;\n    getMaxTiles(): number;\n    computeAngle(c: any, i: number, tube: any, num: number): number;\n    computeLeft(c: any, i: number, tube: any, num: number): number;\n    computeBottom(c: any, i: number, tube: any, num: number): number;\n    computeSlider(init?: boolean): void;\n    scrolledRight(e: any, tar?: any): void;\n    refreshCircular(): void;\n    scrolledLeft(e: any, tar?: any): void;\n    getSlideDelata(e: any): any;\n    getTar(tar: any, e: any): any;\n    left(e: any): void;\n    clicked(e: any, sc: any): void;\n    mouseDown(e: any): void;\n    panStart(e: any): void;\n    mouseUp(e: MouseEvent | null): void;\n    mouseLeave(e: any): void;\n    mouseMove(e: MouseEvent): void;\n    panMoving(e: {\n        srcEvent: PointerEvent;\n    } | any): void;\n    panEnd(e: {\n        srcEvent: PointerEvent;\n    } | any): void;\n    onmouseWheel(event: any): void;\n    rotateBox(event: any, eParent?: any): void;\n    isSameEventAndTarget(e: any): any;\n    getDelta(e: any, field: string): number;\n    rotate(): void;\n    log(any: any): void;\n    boundMaxReached(): void;\n    boundMinReached(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Tiles, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Tiles, \"dia-tiles\", never, { \"tiles\": { \"alias\": \"tiles\"; \"required\": false; }; \"selector\": { \"alias\": \"selector\"; \"required\": false; }; \"autofill\": { \"alias\": \"autofill\"; \"required\": false; }; \"emptyTpl\": { \"alias\": \"emptyTpl\"; \"required\": false; }; \"tileTemplate\": { \"alias\": \"tileTemplate\"; \"required\": false; }; \"title\": { \"alias\": \"title\"; \"required\": false; }; \"maxTiles\": { \"alias\": \"maxTiles\"; \"required\": false; }; \"wheelSpace\": { \"alias\": \"wheelSpace\"; \"required\": false; }; \"autoCompute\": { \"alias\": \"autoCompute\"; \"required\": false; }; \"forceActive\": { \"alias\": \"forceActive\"; \"required\": false; }; \"circularEffect\": { \"alias\": \"circularEffect\"; \"required\": false; }; \"scroll\": { \"alias\": \"scroll\"; \"required\": false; }; \"pourcent\": { \"alias\": \"pourcent\"; \"required\": false; }; \"minDiametre\": { \"alias\": \"minDiametre\"; \"required\": false; }; \"maxDiametre\": { \"alias\": \"maxDiametre\"; \"required\": false; }; \"forcedDiametre\": { \"alias\": \"forcedDiametre\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, { \"hasLeft\": \"hasLeft\"; \"selection\": \"selection\"; \"hasClicked\": \"hasClicked\"; \"maxBound\": \"maxBound\"; \"minBound\": \"minBound\"; }, never, never, true, never>;\n}","originalLength":4698,"removedExports":[],"renderedExports":["Tile","Tiles"],"renderedLength":4515},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/directives/clicked-outside.directive.d.ts":{"code":"declare class ClickedOutsideDirective implements AfterViewInit {\n    private el;\n    looseCheck: boolean;\n    trackEphemeraElement: boolean;\n    hasleftFor: number;\n    hasLeft: EventEmitter<any>;\n    clickedOutside: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    lastElement: any;\n    componentList: ElementRef[];\n    compList: ElementRef[];\n    compListChange: EventEmitter<ElementRef<any>[]>;\n    mouseIsOver: boolean;\n    mouseleavedAlready: boolean;\n    overSuspended: boolean;\n    debug: boolean;\n    index: number;\n    constructor(el: ElementRef);\n    ngAfterViewInit(): void;\n    onclick(targetElement: any): void;\n    isInDocument(targetElement: any): boolean;\n    contains(el: any): boolean;\n    onmouseover(el: any): void;\n    onmouseleave(el?: any): void;\n    suspendOverDetection(): void;\n    resumeOverDetection(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ClickedOutsideDirective, never>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<ClickedOutsideDirective, \"[appClickedOutside]\", never, { \"looseCheck\": { \"alias\": \"looseCheck\"; \"required\": false; }; \"trackEphemeraElement\": { \"alias\": \"trackEphemeraElement\"; \"required\": false; }; \"hasleftFor\": { \"alias\": \"hasleftFor\"; \"required\": false; }; \"compList\": { \"alias\": \"compList\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, { \"hasLeft\": \"hasLeft\"; \"clickedOutside\": \"clickedOutside\"; \"blur\": \"blur\"; \"compListChange\": \"compListChange\"; }, never, never, true, never>;\n}","originalLength":1590,"removedExports":[],"renderedExports":["ClickedOutsideDirective"],"renderedLength":1472},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/directives/is-numeric.directive.d.ts":{"code":"declare class IsNumericDirective {\n    private el;\n    private renderer;\n    regExIsNum: RegExp;\n    regExIsNumber: RegExp;\n    regExIsAlphabet: RegExp;\n    component: any;\n    nextValue: string;\n    isDecimal: boolean | undefined;\n    disable: boolean | undefined;\n    isControl: boolean;\n    appIsNumeric: string;\n    constructor(el: ViewContainerRef, renderer: Renderer2);\n    onkeyup($e: KeyboardEvent): void;\n    blockPaste(e: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<IsNumericDirective, never>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<IsNumericDirective, \"[appIsNumeric]\", never, { \"isDecimal\": { \"alias\": \"isDecimal\"; \"required\": false; }; \"disable\": { \"alias\": \"disable\"; \"required\": false; }; \"appIsNumeric\": { \"alias\": \"appIsNumeric\"; \"required\": false; }; }, {}, never, never, true, never>;\n}","originalLength":924,"removedExports":[],"renderedExports":["IsNumericDirective"],"renderedLength":818},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/ITableState.d.ts":{"code":"interface ITableState {\n    page: number;\n    size?: number;\n    orderBy?: string;\n    asc?: boolean;\n}","originalLength":111,"removedExports":[],"renderedExports":["ITableState"],"renderedLength":103},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/lib/common/IDossierItem.d.ts":{"code":"interface IDossierItem {\n    id: string | number;\n    name: string;\n    description?: string;\n    icon?: string;\n    selected?: boolean;\n    disabled?: boolean;\n    children?: IDossierItem[];\n}","originalLength":201,"removedExports":[],"renderedExports":["IDossierItem"],"renderedLength":193},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-typings/dia-utils-libs.d.ts":{"code":null,"originalLength":119,"removedExports":[],"renderedExports":[],"renderedLength":0}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { OnInit, OnChanges, SimpleChanges, AfterViewChecked, ElementRef, EventEmitter, Renderer2, AfterViewInit, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormGroup, ValidatorFn, AsyncValidatorFn, ControlValueAccessor, AbstractControl, FormControl, ControlContainer } from '@angular/forms';\nimport * as i3 from '@angular/material/form-field';\nimport { FloatLabelType } from '@angular/material/form-field';\nimport * as i4 from '@angular/material/input';\nimport * as i5 from '@angular/material/icon';\nimport * as i6 from '@angular/material/datepicker';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatSelect } from '@angular/material/select';\nimport { DateAdapter } from '@angular/material/core';\n\ndeclare class DiaUtilsLibsModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<DiaUtilsLibsModule, never>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<DiaUtilsLibsModule, never, [typeof i1.CommonModule, typeof i2.FormsModule, typeof i2.ReactiveFormsModule, typeof i3.MatFormFieldModule, typeof i4.MatInputModule, typeof i5.MatIconModule, typeof i6.MatDatepickerModule, typeof i7.MatTooltipModule], never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<DiaUtilsLibsModule>;\n}\n\ninterface IFormatInput {\n    parse: (_: any) => any;\n    transform: (_: any) => any;\n}\n\ndeclare class ModelOption {\n    libelle: string;\n    value: string;\n    data: any;\n    constructor(lib: string, val: string, dat?: any);\n    static setUniqueValue(lib: string): ModelOption;\n}\n\ninterface IFormGroupConfig {\n    formName: string;\n    form: FormGroup;\n    updateOn?: string;\n    validators: ValidatorFn[];\n    asyncValidators?: AsyncValidatorFn | AsyncValidatorFn[];\n}\n\ninterface IAdvancedCustom {\n    template: any;\n    context: any;\n}\n\ndeclare class Dossier {\n    static service?: any;\n    static amountFormatter?: IFormatInput;\n    static prefix?: string;\n    linkParam?: number;\n    type?: string;\n    className?: string;\n    onclick?: (_: any) => {};\n    onchange?: (_: any) => {};\n    title?: string;\n    icon?: string;\n    iconAction?: (...args: any[]) => {};\n    list?: Dossier[];\n    custom?: boolean;\n    model?: any;\n    field?: any;\n    data?: any;\n    value?: string | number;\n    isNumber?: boolean;\n    isDecimal?: boolean | undefined;\n    isDate?: boolean;\n    minDate?: Date;\n    maxDate?: Date;\n    noLine?: boolean;\n    minrows?: number;\n    isRadio?: boolean;\n    possibleValues?: ModelOption[];\n    hide?: boolean;\n    suffix?: string;\n    tooltip?: string;\n    nbColumns?: number;\n    maxLength?: number;\n    minLength?: number;\n    disableVisualHelp?: boolean;\n    disabled?: boolean;\n    required?: boolean | undefined;\n    formGroupConfig?: IFormGroupConfig;\n    customFormat?: IFormatInput;\n    advancedCustoms?: IAdvancedCustom[];\n    selectValues?: any[];\n    placeholder?: string;\n    getErrorMsg?: (_: Dossier) => {};\n    sizeColumn?: number;\n    indexColumn?: number;\n    countDown?: boolean;\n    modifiable?: boolean;\n    isTextarea?: boolean;\n    customClass?: string;\n    fill?: boolean;\n    constructor(title: string, list: Dossier[], value: string | number);\n    static isDefined(val: any): boolean;\n    static getEmptyDossier(): Dossier;\n    static setByModel(title: string, model: any, field: string, custom?: any): {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n    } | {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n        suffix: any;\n    };\n    static set(title: string, value: any, custom?: any, model?: any, field?: string): {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n    } | {\n        title: string;\n        value: any;\n        model: any;\n        field: string | undefined;\n        suffix: any;\n    };\n    static build(title: string, list: Dossier[], multi?: Dossier[], custom?: any): {\n        value: null;\n        title: string;\n        list: Dossier[] | {\n            value: null;\n            title: null;\n            list: Dossier[];\n        }[];\n    };\n    static formBuild(value: any, config: IFormGroupConfig): void;\n    static bloc(title: string, list: Dossier[]): Dossier;\n}\n\ndeclare class DossierBloc implements OnInit, OnChanges {\n    amountFormat: IFormatInput | undefined;\n    disabled: boolean;\n    modifiable: boolean;\n    translateSuffix: string;\n    nbColumns: number;\n    items: Dossier[];\n    ratifiable: any;\n    minrows: number;\n    transServ: any;\n    debug: boolean;\n    emptyfn: () => void;\n    constructor();\n    ngOnChanges(changes: SimpleChanges): void;\n    translateTitle(it: string): any;\n    translator(it: Dossier): Dossier;\n    mapTimestampToDate(timestamp: number): string | null;\n    ngOnInit(): void;\n    getIntName(str: string): string;\n    onclick(item: Dossier): void;\n    handleChange(e: any, item: Dossier): void;\n    handleValue(item: Dossier): any;\n    handleSelectValue(item: Dossier): ModelOption | null;\n    handleFormattedValue(item: Dossier): string;\n    handleDateValue(item: Dossier): Date | undefined;\n    fgroup(): FormGroup<{}>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<DossierBloc, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<DossierBloc, \"dia-dossier\", never, { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"modifiable\": { \"alias\": \"modifiable\"; \"required\": false; }; \"translateSuffix\": { \"alias\": \"translateSuffix\"; \"required\": false; }; \"nbColumns\": { \"alias\": \"nbColumns\"; \"required\": false; }; \"items\": { \"alias\": \"items\"; \"required\": false; }; \"ratifiable\": { \"alias\": \"ratifiable\"; \"required\": false; }; \"minrows\": { \"alias\": \"minrows\"; \"required\": false; }; \"transServ\": { \"alias\": \"transServ\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n}\n\ndeclare class Inputs implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\n    private el;\n    private renderer;\n    private controlContainer;\n    formatInput: ElementRef | undefined;\n    input: ElementRef | undefined;\n    computeWidth: ElementRef | undefined;\n    displayAsLabel: boolean;\n    label: string;\n    required: boolean | undefined;\n    format: string;\n    placeholder: string | undefined;\n    hidden: string | undefined;\n    description: string | undefined;\n    disabled: boolean | undefined;\n    isDatePicker: boolean;\n    readonlyInput: boolean | undefined;\n    readonly: boolean | undefined;\n    type: string | undefined;\n    min: number;\n    max: number;\n    minDate: number;\n    maxDate: number;\n    maxLength: number | undefined;\n    maxLengthFormat: number | undefined;\n    minLength: number | undefined;\n    unit: string;\n    name: string | undefined;\n    cancellable: boolean;\n    searching: boolean;\n    value: string | boolean | undefined;\n    customFormat: IFormatInput | undefined;\n    icon: string | undefined;\n    errorMsg: string | undefined;\n    isError: boolean;\n    valueChange: EventEmitter<any>;\n    cancelValue: EventEmitter<any>;\n    formattedValue: string;\n    defaultControl: boolean;\n    matDatepicker: any;\n    dateChange: EventEmitter<any>;\n    visualHelpDisabled: boolean | undefined;\n    isDateControl: boolean;\n    currentControl: AbstractControl | undefined;\n    formControl: FormControl;\n    iconWasClicked: EventEmitter<any>;\n    wasDblClicked: EventEmitter<any>;\n    iconAction: (() => any) | undefined;\n    tooltipText: string;\n    onChange: (_: any) => void;\n    onTouched: (_: any) => void;\n    constructor(el: ElementRef, renderer: Renderer2, controlContainer: ControlContainer);\n    ngOnInit(): void;\n    f_dateChange(): void;\n    gets(obs: any): any;\n    ngAfterViewChecked(): void;\n    textOverflow(): boolean | undefined;\n    ngOnChanges(changes: SimpleChanges): void;\n    change(newValue: any): void;\n    changeFormat(newValue: any): void;\n    cancel(data: any): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    transform(val: any): string;\n    parse(val: any): string;\n    iconClicked(e: Event): void;\n    dblClicked(e: Event): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Inputs, [null, null, { optional: true; host: true; skipSelf: true; }]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Inputs, \"dia-input\", never, { \"displayAsLabel\": { \"alias\": \"displayAsLabel\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"format\": { \"alias\": \"format\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"hidden\": { \"alias\": \"hidden\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"isDatePicker\": { \"alias\": \"isDatePicker\"; \"required\": false; }; \"readonlyInput\": { \"alias\": \"readonlyInput\"; \"required\": false; }; \"readonly\": { \"alias\": \"readonly\"; \"required\": false; }; \"type\": { \"alias\": \"type\"; \"required\": false; }; \"min\": { \"alias\": \"min\"; \"required\": false; }; \"max\": { \"alias\": \"max\"; \"required\": false; }; \"minDate\": { \"alias\": \"minDate\"; \"required\": false; }; \"maxDate\": { \"alias\": \"maxDate\"; \"required\": false; }; \"maxLength\": { \"alias\": \"maxLength\"; \"required\": false; }; \"minLength\": { \"alias\": \"minLength\"; \"required\": false; }; \"unit\": { \"alias\": \"unit\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"cancellable\": { \"alias\": \"cancellable\"; \"required\": false; }; \"searching\": { \"alias\": \"searching\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"customFormat\": { \"alias\": \"customFormat\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"errorMsg\": { \"alias\": \"errorMsg\"; \"required\": false; }; \"isError\": { \"alias\": \"isError\"; \"required\": false; }; \"defaultControl\": { \"alias\": \"defaultControl\"; \"required\": false; }; \"matDatepicker\": { \"alias\": \"matDatepicker\"; \"required\": false; }; \"visualHelpDisabled\": { \"alias\": \"visualHelpDisabled\"; \"required\": false; }; \"isDateControl\": { \"alias\": \"isDateControl\"; \"required\": false; }; \"formControl\": { \"alias\": \"formControl\"; \"required\": false; }; \"iconAction\": { \"alias\": \"iconAction\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"cancelValue\": \"cancelValue\"; \"dateChange\": \"dateChange\"; \"iconWasClicked\": \"iconWasClicked\"; \"wasDblClicked\": \"wasDblClicked\"; }, never, [\"*\"], true, never>;\n}\n\ndeclare class Select implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit, AfterViewChecked {\n    private controlContainer;\n    private el;\n    value: ModelOption | null;\n    required: boolean;\n    defaultValue: boolean;\n    fixPlaceholder: boolean;\n    values: ModelOption[] | null;\n    forced: ModelOption[] | null;\n    list: ModelOption[];\n    placeholder: string | undefined;\n    disablePlaceHolder: boolean;\n    label: string | undefined;\n    description: string | undefined;\n    multiple: boolean;\n    defaultSort: boolean;\n    selectedValue: string;\n    disabled: boolean;\n    direction: string;\n    preset: any;\n    tooltip: boolean;\n    tooltipValue: string;\n    autoClosedAfter: number;\n    valueChange: EventEmitter<string>;\n    valuesChange: EventEmitter<ModelOption[] | null>;\n    beenForced: EventEmitter<ModelOption[] | null>;\n    formField: any;\n    select: MatSelect | undefined;\n    floatLabel: FloatLabelType;\n    currentControl: AbstractControl | undefined;\n    private isBeingForced;\n    onChange: (_: any) => void;\n    onTouched: (_: any) => void;\n    translate: any;\n    isAppleBrowser: boolean;\n    constructor(controlContainer: ControlContainer, el: ElementRef);\n    ngAfterViewInit(): void;\n    ngOnInit(): void;\n    isAppleBrowsers(): boolean;\n    gets(obs: any): any;\n    ngAfterViewChecked(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    resetMultiple(): void;\n    getListValue(val: any): ModelOption | null;\n    isAlreadySelected(val: any): ModelOption | null;\n    isValInList(val: any, list: ModelOption[] | null): ModelOption | null;\n    getPresetValue(): ModelOption | null;\n    onUpdateValue(item: any): void;\n    getPlaceHolder(): string | undefined;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    itemSelected(e: any, item: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Select, [{ optional: true; host: true; skipSelf: true; }, null]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Select, \"dia-select\", never, { \"value\": { \"alias\": \"value\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"defaultValue\": { \"alias\": \"defaultValue\"; \"required\": false; }; \"fixPlaceholder\": { \"alias\": \"fixPlaceholder\"; \"required\": false; }; \"values\": { \"alias\": \"values\"; \"required\": false; }; \"forced\": { \"alias\": \"forced\"; \"required\": false; }; \"list\": { \"alias\": \"list\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"disablePlaceHolder\": { \"alias\": \"disablePlaceHolder\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"multiple\": { \"alias\": \"multiple\"; \"required\": false; }; \"defaultSort\": { \"alias\": \"defaultSort\"; \"required\": false; }; \"selectedValue\": { \"alias\": \"selectedValue\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"direction\": { \"alias\": \"direction\"; \"required\": false; }; \"preset\": { \"alias\": \"preset\"; \"required\": false; }; \"tooltip\": { \"alias\": \"tooltip\"; \"required\": false; }; \"autoClosedAfter\": { \"alias\": \"autoClosedAfter\"; \"required\": false; }; \"translate\": { \"alias\": \"translate\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"valuesChange\": \"valuesChange\"; \"beenForced\": \"beenForced\"; }, never, never, true, never>;\n}\n\ndeclare class Textarea implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\n    private el;\n    private controlContainer;\n    input: ElementRef;\n    label: string;\n    unit: string | undefined;\n    placeholder: string | undefined;\n    description: string | undefined;\n    value: string | undefined;\n    readonly: boolean | undefined;\n    innerHTML: string | undefined;\n    isTextArea: boolean;\n    valueChange: EventEmitter<any>;\n    maxLength: number | undefined;\n    minrows: number | undefined;\n    required: boolean | undefined;\n    name: string | undefined;\n    disabled: boolean | undefined;\n    defaultControl: boolean | undefined;\n    customFormat: any;\n    formControlName: string;\n    formGroup: any;\n    iconAction: (...args: any[]) => any | undefined;\n    icon: string;\n    dblClick: (...args: any[]) => any;\n    countDown: boolean | undefined;\n    currentControl: AbstractControl | undefined;\n    count: number;\n    formControl: FormControl | undefined;\n    onChange: (...args: any[]) => void;\n    onTouched: (...args: any[]) => void;\n    constructor(el: ElementRef, controlContainer: ControlContainer);\n    ngAfterViewChecked(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    change(newValue: any): void;\n    changeTextAreaValue(): void;\n    writeValue(val: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    iconClicked(item?: any): any;\n    dblClicked(item?: any): any;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Textarea, [null, { optional: true; host: true; skipSelf: true; }]>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Textarea, \"dia-textarea\", never, { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"unit\": { \"alias\": \"unit\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"description\": { \"alias\": \"description\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"readonly\": { \"alias\": \"readonly\"; \"required\": false; }; \"innerHTML\": { \"alias\": \"innerHTML\"; \"required\": false; }; \"isTextArea\": { \"alias\": \"isTextArea\"; \"required\": false; }; \"maxLength\": { \"alias\": \"maxLength\"; \"required\": false; }; \"minrows\": { \"alias\": \"minrows\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"defaultControl\": { \"alias\": \"defaultControl\"; \"required\": false; }; \"customFormat\": { \"alias\": \"customFormat\"; \"required\": false; }; \"formControlName\": { \"alias\": \"formControlName\"; \"required\": false; }; \"formGroup\": { \"alias\": \"formGroup\"; \"required\": false; }; \"iconAction\": { \"alias\": \"iconAction\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"dblClick\": { \"alias\": \"dblClick\"; \"required\": false; }; \"countDown\": { \"alias\": \"countDown\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; }, never, [\"*\", \"*\"], true, never>;\n}\n\ndeclare class InputDatePicker implements ControlValueAccessor, OnChanges, OnInit {\n    private dateAdapter;\n    label: string;\n    customDatePicker: boolean;\n    placeholder: string;\n    minDate: Date | undefined;\n    maxDate: Date | undefined;\n    dateChange: EventEmitter<any>;\n    popupVisible: boolean;\n    formControlDate: FormControl<any>;\n    localDate: Date | undefined;\n    disabledf: boolean;\n    onChanged: (_?: any) => void;\n    onTouched: (_?: any) => void;\n    value: Date | undefined;\n    valueChange: EventEmitter<Date>;\n    required: boolean;\n    constructor(dateAdapter: DateAdapter<any>);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    writeValue(obj: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    set date(date: Date | undefined);\n    get date(): Date | undefined;\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    onChange(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<InputDatePicker, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<InputDatePicker, \"dia-input-date-picker\", never, { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"customDatePicker\": { \"alias\": \"customDatePicker\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"minDate\": { \"alias\": \"minDate\"; \"required\": false; }; \"maxDate\": { \"alias\": \"maxDate\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"date\": { \"alias\": \"date\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"dateChange\": \"dateChange\"; \"valueChange\": \"valueChange\"; }, never, never, true, never>;\n}\n\ndeclare class InputRangeDate {\n    static ɵfac: i0.ɵɵFactoryDeclaration<InputRangeDate, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<InputRangeDate, \"lib-input-range-date\", never, {}, {}, never, never, true, never>;\n}\n\ndeclare class Scroll implements OnInit {\n    scrolledUpDisabled: boolean;\n    scrolledDownDisabled: boolean;\n    scrolledLeftDisabled: boolean;\n    scrolledRightDisabled: boolean;\n    scrolledUp: EventEmitter<any>;\n    scrolledDown: EventEmitter<any>;\n    scrolledLeft: EventEmitter<any>;\n    scrolledRight: EventEmitter<any>;\n    scrollBuffer: number;\n    scrollBuffered: boolean;\n    vertical: boolean;\n    horizontal: boolean;\n    forced: boolean;\n    constructor();\n    onmouseWheel(event: any): void;\n    onmouseoverup(event: any): void;\n    onmouseoverdown(event: any): void;\n    ngOnInit(): void;\n    scrolled(up: any, wheel?: any): void;\n    scrolledH(up: any, wheel?: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Scroll, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Scroll, \"dia-scroll\", never, { \"scrolledUpDisabled\": { \"alias\": \"scrolledUpDisabled\"; \"required\": false; }; \"scrolledDownDisabled\": { \"alias\": \"scrolledDownDisabled\"; \"required\": false; }; \"scrolledLeftDisabled\": { \"alias\": \"scrolledLeftDisabled\"; \"required\": false; }; \"scrolledRightDisabled\": { \"alias\": \"scrolledRightDisabled\"; \"required\": false; }; \"scrollBuffer\": { \"alias\": \"scrollBuffer\"; \"required\": false; }; \"vertical\": { \"alias\": \"vertical\"; \"required\": false; }; \"horizontal\": { \"alias\": \"horizontal\"; \"required\": false; }; \"forced\": { \"alias\": \"forced\"; \"required\": false; }; }, { \"scrolledUp\": \"scrolledUp\"; \"scrolledDown\": \"scrolledDown\"; \"scrolledLeft\": \"scrolledLeft\"; \"scrolledRight\": \"scrolledRight\"; }, never, never, true, never>;\n}\n\ninterface Tile {\n    id?: string;\n    empty?: boolean;\n    desc?: string;\n    acteur?: string;\n    title?: string;\n    data?: any[];\n    css?: any;\n    form?: any;\n    searchHash?: string[];\n}\ndeclare class Tiles implements OnInit, AfterViewInit, OnChanges {\n    tunnelLeft: number | undefined;\n    tunnel: ElementRef;\n    hoster: ElementRef;\n    scroller: ElementRef;\n    container: ElementRef;\n    scenariContainer: ElementRef;\n    tile: QueryList<ElementRef> | undefined;\n    tiles: any | Tile[];\n    selector: boolean;\n    autofill: boolean;\n    emptyTpl: TemplateRef<any>;\n    tileTemplate: TemplateRef<any>;\n    title: string;\n    maxTiles: number | undefined;\n    wheelSpace: number;\n    hasLeft: EventEmitter<any>;\n    selection: EventEmitter<any>;\n    hasClicked: EventEmitter<any>;\n    maxBound: EventEmitter<boolean>;\n    minBound: EventEmitter<boolean>;\n    maxLength: number;\n    autoCompute: boolean;\n    forceActive: boolean;\n    circularEffect: boolean;\n    active: boolean;\n    currentContentWidth: number | null;\n    currentContentHeight: number | null;\n    isMobile: boolean;\n    tileWidth: number;\n    tileHeight: number;\n    maxTile: number | undefined;\n    carouselIndex: number | undefined;\n    scrollAngle: number;\n    translateX: string | undefined;\n    translateY: string | undefined;\n    scroll: number;\n    grabbing: boolean;\n    pourcent: number;\n    minDiametre: number;\n    maxDiametre: number;\n    forcedDiametre: number | undefined;\n    diametre: number;\n    tetas: any[];\n    init: boolean;\n    ready: boolean;\n    isCircularInitated: boolean;\n    selectedEvent: EventEmitter<any>;\n    selectedTile: any;\n    currentEvent: any;\n    isBoundMax: boolean;\n    isBoundMin: boolean;\n    debug: boolean;\n    constructor();\n    ngOnChanges(changes: SimpleChanges): void;\n    next(): void;\n    prev(): void;\n    ngOnInit(): void;\n    computeCircularTileAmount(): void;\n    addEmptyTiles(q: number): void;\n    isIosBrowser(): boolean;\n    isMobileBrowser(): boolean;\n    getDiametre(): any;\n    getFirstTile(): ElementRef<any> | undefined;\n    ngAfterViewInit(): void;\n    resetTunnel(e?: any): void;\n    getMaxTiles(): number;\n    computeAngle(c: any, i: number, tube: any, num: number): number;\n    computeLeft(c: any, i: number, tube: any, num: number): number;\n    computeBottom(c: any, i: number, tube: any, num: number): number;\n    computeSlider(init?: boolean): void;\n    scrolledRight(e: any, tar?: any): void;\n    refreshCircular(): void;\n    scrolledLeft(e: any, tar?: any): void;\n    getSlideDelata(e: any): any;\n    getTar(tar: any, e: any): any;\n    left(e: any): void;\n    clicked(e: any, sc: any): void;\n    mouseDown(e: any): void;\n    panStart(e: any): void;\n    mouseUp(e: MouseEvent | null): void;\n    mouseLeave(e: any): void;\n    mouseMove(e: MouseEvent): void;\n    panMoving(e: {\n        srcEvent: PointerEvent;\n    } | any): void;\n    panEnd(e: {\n        srcEvent: PointerEvent;\n    } | any): void;\n    onmouseWheel(event: any): void;\n    rotateBox(event: any, eParent?: any): void;\n    isSameEventAndTarget(e: any): any;\n    getDelta(e: any, field: string): number;\n    rotate(): void;\n    log(any: any): void;\n    boundMaxReached(): void;\n    boundMinReached(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<Tiles, never>;\n    static ɵcmp: i0.ɵɵComponentDeclaration<Tiles, \"dia-tiles\", never, { \"tiles\": { \"alias\": \"tiles\"; \"required\": false; }; \"selector\": { \"alias\": \"selector\"; \"required\": false; }; \"autofill\": { \"alias\": \"autofill\"; \"required\": false; }; \"emptyTpl\": { \"alias\": \"emptyTpl\"; \"required\": false; }; \"tileTemplate\": { \"alias\": \"tileTemplate\"; \"required\": false; }; \"title\": { \"alias\": \"title\"; \"required\": false; }; \"maxTiles\": { \"alias\": \"maxTiles\"; \"required\": false; }; \"wheelSpace\": { \"alias\": \"wheelSpace\"; \"required\": false; }; \"autoCompute\": { \"alias\": \"autoCompute\"; \"required\": false; }; \"forceActive\": { \"alias\": \"forceActive\"; \"required\": false; }; \"circularEffect\": { \"alias\": \"circularEffect\"; \"required\": false; }; \"scroll\": { \"alias\": \"scroll\"; \"required\": false; }; \"pourcent\": { \"alias\": \"pourcent\"; \"required\": false; }; \"minDiametre\": { \"alias\": \"minDiametre\"; \"required\": false; }; \"maxDiametre\": { \"alias\": \"maxDiametre\"; \"required\": false; }; \"forcedDiametre\": { \"alias\": \"forcedDiametre\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, { \"hasLeft\": \"hasLeft\"; \"selection\": \"selection\"; \"hasClicked\": \"hasClicked\"; \"maxBound\": \"maxBound\"; \"minBound\": \"minBound\"; }, never, never, true, never>;\n}\n\ndeclare class ClickedOutsideDirective implements AfterViewInit {\n    private el;\n    looseCheck: boolean;\n    trackEphemeraElement: boolean;\n    hasleftFor: number;\n    hasLeft: EventEmitter<any>;\n    clickedOutside: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    lastElement: any;\n    componentList: ElementRef[];\n    compList: ElementRef[];\n    compListChange: EventEmitter<ElementRef<any>[]>;\n    mouseIsOver: boolean;\n    mouseleavedAlready: boolean;\n    overSuspended: boolean;\n    debug: boolean;\n    index: number;\n    constructor(el: ElementRef);\n    ngAfterViewInit(): void;\n    onclick(targetElement: any): void;\n    isInDocument(targetElement: any): boolean;\n    contains(el: any): boolean;\n    onmouseover(el: any): void;\n    onmouseleave(el?: any): void;\n    suspendOverDetection(): void;\n    resumeOverDetection(): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<ClickedOutsideDirective, never>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<ClickedOutsideDirective, \"[appClickedOutside]\", never, { \"looseCheck\": { \"alias\": \"looseCheck\"; \"required\": false; }; \"trackEphemeraElement\": { \"alias\": \"trackEphemeraElement\"; \"required\": false; }; \"hasleftFor\": { \"alias\": \"hasleftFor\"; \"required\": false; }; \"compList\": { \"alias\": \"compList\"; \"required\": false; }; \"debug\": { \"alias\": \"debug\"; \"required\": false; }; }, { \"hasLeft\": \"hasLeft\"; \"clickedOutside\": \"clickedOutside\"; \"blur\": \"blur\"; \"compListChange\": \"compListChange\"; }, never, never, true, never>;\n}\n\ndeclare class IsNumericDirective {\n    private el;\n    private renderer;\n    regExIsNum: RegExp;\n    regExIsNumber: RegExp;\n    regExIsAlphabet: RegExp;\n    component: any;\n    nextValue: string;\n    isDecimal: boolean | undefined;\n    disable: boolean | undefined;\n    isControl: boolean;\n    appIsNumeric: string;\n    constructor(el: ViewContainerRef, renderer: Renderer2);\n    onkeyup($e: KeyboardEvent): void;\n    blockPaste(e: any): void;\n    static ɵfac: i0.ɵɵFactoryDeclaration<IsNumericDirective, never>;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<IsNumericDirective, \"[appIsNumeric]\", never, { \"isDecimal\": { \"alias\": \"isDecimal\"; \"required\": false; }; \"disable\": { \"alias\": \"disable\"; \"required\": false; }; \"appIsNumeric\": { \"alias\": \"appIsNumeric\"; \"required\": false; }; }, {}, never, never, true, never>;\n}\n\ninterface ITableState {\n    page: number;\n    size?: number;\n    orderBy?: string;\n    asc?: boolean;\n}\n\ninterface IDossierItem {\n    id: string | number;\n    name: string;\n    description?: string;\n    icon?: string;\n    selected?: boolean;\n    disabled?: boolean;\n    children?: IDossierItem[];\n}\n\nexport { ClickedOutsideDirective, DiaUtilsLibsModule, Dossier, DossierBloc, InputDatePicker, InputRangeDate, Inputs, IsNumericDirective, ModelOption, Scroll, Select, Textarea, Tiles };\nexport type { IAdvancedCustom, IDossierItem, IFormGroupConfig, IFormatInput, ITableState, Tile };\n","map":null,"preliminaryFileName":"index.d.ts","sourcemapFileName":null}],"fesm2022":[{"exports":["ClickedOutsideDirective","DiaUtilsLibsModule","Dossier","DossierBloc","InputDatePicker","InputRangeDate","Inputs","IsNumericDirective","ModelOption","Scroll","Select","Textarea","Tiles"],"facadeModuleId":"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/dia-utils-libs.js","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/dia-utils-libs.module.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/Dossier.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/model-option.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input/input.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input-date-picker/input-date-picker.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/directives/is-numeric.directive.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/directives/clicked-outside.directive.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/select/select.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/textarea/textarea.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/dossier/dossier.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input-range-date/input-range-date.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/scroll/scroll.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/tiles/tiles.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IFormatInput.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/ITableState.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IAdvancedCustom.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IDossierItem.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IFormGroupConfig.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/public-api.js","/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/dia-utils-libs.js"],"name":"dia-utils-libs","type":"chunk","dynamicImports":[],"fileName":"dia-utils-libs.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","NgModule","EventEmitter","forwardRef","Input","Output","ViewChild","Optional","Host","SkipSelf","Component","ViewEncapsulation","HostListener","Directive","ChangeDetectionStrategy","ElementRef","ViewChildren"],"@angular/common":["CommonModule","*"],"@angular/forms":["FormsModule","ReactiveFormsModule","Validators","FormControl","*","NG_VALUE_ACCESSOR","FormGroup"],"@angular/material/form-field":["MatFormFieldModule","*"],"@angular/material/input":["MatInputModule","*"],"@angular/material/icon":["MatIconModule","*"],"@angular/material/datepicker":["MatDatepickerModule","*"],"@angular/material/tooltip":["MatTooltipModule","*"],"@angular/material/core":["*","MAT_DATE_FORMATS","MatOptionModule"],"@angular/material/select":["MatSelectModule","*"],"@angular/cdk/text-field":["*"]},"imports":["@angular/core","@angular/common","@angular/forms","@angular/material/form-field","@angular/material/input","@angular/material/icon","@angular/material/datepicker","@angular/material/tooltip","@angular/material/core","@angular/material/select","@angular/cdk/text-field"],"modules":{"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/dia-utils-libs.module.js":{"code":"class DiaUtilsLibsModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, imports: [CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatIconModule,\n            MatDatepickerModule,\n            MatTooltipModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, imports: [CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatIconModule,\n            MatDatepickerModule,\n            MatTooltipModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatIconModule,\n                        MatDatepickerModule,\n                        MatTooltipModule\n                    ],\n                    exports: []\n                }]\n        }] });","originalLength":2145,"removedExports":[],"renderedExports":["DiaUtilsLibsModule"],"renderedLength":1583},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/Dossier.js":{"code":"class Dossier {\n    static service;\n    static amountFormatter;\n    static prefix = '';\n    linkParam;\n    type;\n    className;\n    onclick;\n    onchange;\n    title;\n    icon;\n    iconAction;\n    list;\n    custom;\n    model;\n    field;\n    data;\n    value;\n    isNumber;\n    isDecimal;\n    isDate;\n    minDate;\n    maxDate;\n    noLine;\n    minrows;\n    isRadio;\n    possibleValues;\n    hide;\n    suffix;\n    tooltip;\n    nbColumns;\n    maxLength;\n    minLength;\n    disableVisualHelp;\n    disabled;\n    required;\n    formGroupConfig;\n    customFormat;\n    advancedCustoms;\n    selectValues;\n    placeholder;\n    getErrorMsg;\n    // fix JIRA 1060\n    sizeColumn;\n    indexColumn;\n    countDown;\n    modifiable;\n    isTextarea;\n    customClass;\n    fill;\n    constructor(title, list, value) {\n        this.title = title;\n        this.list = list;\n        this.value = value;\n    }\n    static isDefined(val) {\n        return val !== null && val !== undefined;\n    }\n    static getEmptyDossier() {\n        return new Dossier('####', [], null);\n    }\n    static setByModel(title, model, field, custom) {\n        return Dossier.set(title, model[field], custom, model, field);\n    }\n    static set(title, value, custom, model, field) {\n        if (custom && custom.formGroupConfig) {\n            if (custom.formGroupConfig.validators && custom.formGroupConfig.validators.filter((_) => _ === Validators.required)) {\n                custom.required = true;\n            }\n            this.formBuild(value, custom.formGroupConfig);\n        }\n        if (value && typeof value !== 'string') {\n            value = value['libelle'] ? value['libelle'] : value;\n            if ((value).montant) {\n                value = (value).montant;\n                if ((value).devise) {\n                    custom =\n                        custom && typeof custom !== 'string'\n                            ? () => (custom.suffix = (value).devise)\n                            : custom;\n                }\n            }\n            value =\n                value && custom && custom.isDate && typeof value !== 'number'\n                    ? value.getTime()\n                    : value;\n            value =\n                value && typeof value === 'number' && (!custom || !custom.isDate)\n                    ? this.amountFormatter?.transform(value)\n                    : value;\n            // si aucun match trouvé on afiche une valeur vide\n            value =\n                value && typeof value !== 'string' && typeof value !== 'number'\n                    ? ''\n                    : value;\n        }\n        if (custom && typeof custom !== 'string') {\n            const toReturn = {\n                title: title, value: value, model: model,\n                field: field\n            };\n            Object.keys(custom).map((field, index) => {\n                toReturn[field] = custom[field];\n            });\n            return toReturn;\n        }\n        else if (custom) {\n            return {\n                title: title,\n                value: value,\n                model: model,\n                field: field,\n                suffix: this.service.instant(custom)\n                    ? this.service.instant(this.prefix + custom)\n                    : custom\n            };\n        }\n        else {\n            return {\n                title: title,\n                value: value,\n                model: model,\n                field: field\n            };\n        }\n    }\n    static build(title, list, multi, custom) {\n        const toReturn = {\n            value: null,\n            title: title,\n            list: multi\n                ? multi\n                : [\n                    {\n                        value: null,\n                        title: null,\n                        list: list\n                    }\n                ]\n        };\n        if (custom) {\n            Object.keys(custom).map((field, index) => {\n                toReturn[field] = custom[field];\n            });\n        }\n        return toReturn;\n    }\n    static formBuild(value, config) {\n        config.form.addControl(config.formName, new FormControl(value, config.validators, config.asyncValidators));\n    }\n    static bloc(title, list) {\n        return new Dossier(title, list, null);\n    }\n}","originalLength":4382,"removedExports":[],"renderedExports":["Dossier"],"renderedLength":4248},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/model-option.js":{"code":"class ModelOption {\n    libelle;\n    value;\n    data;\n    constructor(lib, val, dat) {\n        this.libelle = lib;\n        this.value = val;\n        this.data = dat;\n    }\n    static setUniqueValue(lib) {\n        return new ModelOption(lib, lib, null);\n    }\n}","originalLength":308,"removedExports":[],"renderedExports":["ModelOption"],"renderedLength":260},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input/input.js":{"code":"class Inputs {\n    el;\n    renderer;\n    controlContainer;\n    formatInput;\n    input;\n    computeWidth;\n    displayAsLabel = false;\n    label = '';\n    required = false;\n    format = '';\n    placeholder = '';\n    hidden = '';\n    description = '';\n    disabled = false;\n    isDatePicker = false;\n    readonlyInput = false;\n    readonly = false;\n    type = '';\n    min = 0;\n    max = 0;\n    minDate = 0;\n    maxDate = 0;\n    maxLength;\n    maxLengthFormat;\n    minLength;\n    unit = '';\n    name = '';\n    cancellable = false;\n    searching = false;\n    value = '';\n    customFormat;\n    icon;\n    errorMsg;\n    isError = false;\n    valueChange = new EventEmitter();\n    cancelValue = new EventEmitter();\n    formattedValue = '';\n    defaultControl = false;\n    matDatepicker;\n    dateChange = new EventEmitter();\n    visualHelpDisabled = false;\n    isDateControl = false;\n    currentControl;\n    formControl = new FormControl();\n    iconWasClicked = new EventEmitter();\n    wasDblClicked = new EventEmitter();\n    iconAction;\n    tooltipText = '';\n    onChange = (_) => { };\n    onTouched = (_) => { };\n    constructor(el, renderer, controlContainer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.controlContainer = controlContainer;\n    }\n    ngOnInit() {\n        if (this.formatInput && this.formatInput.nativeElement.readonly !== this.readonlyInput) {\n            this.formatInput.nativeElement.readonly = this.readonlyInput;\n        }\n        if (this.input && this.input.nativeElement.readonly !== this.readonlyInput) {\n            this.input.nativeElement.readonly = this.readonlyInput;\n        }\n        if (this.defaultControl) {\n            this.formControl = new FormControl(this.value);\n            if (this.input) {\n                this.input.nativeElement.formControl = this.formControl;\n            }\n            if (this.formatInput) {\n                this.formatInput.nativeElement.formControl = this.formControl;\n            }\n        }\n        if (this.controlContainer && (this.format || this.customFormat)) {\n            const form = this.controlContainer.control;\n            const lbl = this.el.nativeElement.getAttribute('formControlName');\n            if (form) {\n                const control = form.controls[lbl];\n            }\n        }\n    }\n    f_dateChange() {\n        this.dateChange.emit();\n    }\n    gets(obs) {\n        if (obs) {\n            return obs;\n        }\n        else {\n            return {};\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.value && (this.format || this.customFormat)) {\n            if (!((this.formattedValue + '').endsWith('.'))) {\n                this.formattedValue = this.transform(this.value);\n            }\n        }\n        if (this.controlContainer && this.el) {\n            let fname = this.el.nativeElement.getAttribute('formControlName');\n            fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\n            fname = fname ? fname : (this.input ? this.input.nativeElement.name : undefined);\n            const fgroupDirective = this.gets(this.controlContainer);\n            if (fgroupDirective && fgroupDirective.form) {\n                this.currentControl = fgroupDirective.form.controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.visualHelpDisabled && this.textOverflow()) {\n            this.tooltipText = this.value + '';\n        }\n        else {\n            this.tooltipText = '';\n        }\n    }\n    textOverflow() {\n        const currentWitdh = this.formatInput\n            ? this.formatInput.nativeElement.clientWidth\n            : this.input?.nativeElement.clientWidth;\n        return this.computeWidth && this.computeWidth.nativeElement.clientWidth > (currentWitdh || 0) + 5;\n    }\n    ngOnChanges(changes) {\n        if (this.label === 'Montant') {\n            //console.log(changes);\n        }\n        if ((this.format || this.customFormat) &&\n            changes['value'] &&\n            changes['value'].currentValue !== this.parse(this.formattedValue)) {\n            this.formattedValue = this.transform(changes['value'].currentValue);\n            if (this.formatInput) {\n                this.formatInput.nativeElement.value = this.formattedValue;\n            }\n        }\n    }\n    change(newValue) {\n        this.writeValue(newValue);\n        this.valueChange.emit(newValue);\n        this.onChange(this.value);\n        if ((this.format || this.customFormat) && this.formatInput) {\n            this.formatInput.nativeElement.value = this.formattedValue;\n        }\n    }\n    changeFormat(newValue) {\n        this.formattedValue = this.transform(newValue);\n        const offset = this.formattedValue.split(' ').length - 1;\n        if (offset && offset > 0 && this.maxLength) {\n            this.maxLengthFormat = this.maxLength + offset;\n        }\n        const unformattedValue = this.parse(this.formattedValue);\n        this.change(unformattedValue);\n    }\n    cancel(data) {\n        this.formattedValue = '';\n        this.value = '';\n        this.cancelValue.emit(data);\n    }\n    writeValue(value) {\n        this.value = value;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    transform(val) {\n        let valStr = '';\n        let arr;\n        if (this.format) {\n            switch (this.format) {\n                case 'siren':\n                    valStr = val + '';\n                    valStr = this.parse(valStr) + '';\n                    arr = valStr.split('');\n                    valStr = '';\n                    arr.map((c) => {\n                        valStr += c;\n                        if (valStr.replace(/ /g, '').length % 3 === 0 &&\n                            arr.length > valStr.replace(/ /g, '').length) {\n                            valStr += ' ';\n                        }\n                    });\n                    break;\n                case 'amount':\n                    let decPart = '';\n                    if (this.min && val < this.min) {\n                        val = this.min + '';\n                    }\n                    if (this.max && val > this.max) {\n                        val = this.max + '';\n                    }\n                    valStr = val + '';\n                    valStr = this.parse(valStr);\n                    if (valStr === '') {\n                        return '';\n                    }\n                    if (valStr.indexOf('.')) {\n                        decPart = valStr.split('.')[1];\n                        valStr = valStr.split('.')[0];\n                    }\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    arr = valStr.split('');\n                    valStr = '';\n                    arr.reverse().map((c) => {\n                        valStr += c;\n                        if (valStr.replace(/ /g, '').length % 3 === 0 &&\n                            arr.length > valStr.replace(/ /g, '').length) {\n                            valStr += ' ';\n                        }\n                    });\n                    valStr = valStr.split('').reverse().join('');\n                    if (decPart && decPart !== '') {\n                        valStr += '.' + decPart;\n                    }\n                    break;\n            }\n        }\n        else {\n            valStr = this.customFormat ? this.customFormat.transform(val) : val;\n        }\n        return valStr;\n    }\n    parse(val) {\n        let valStr = '';\n        if (this.format) {\n            switch (this.format) {\n                case 'siren':\n                    valStr = val + '';\n                    valStr = valStr.replace(/ /g, '');\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    break;\n                case 'amount':\n                    valStr = val + '';\n                    if (valStr.substring(valStr.length - 1, 1) === '.') {\n                        valStr = valStr.replace('.', '');\n                    }\n                    valStr = valStr.replace(/ /g, '');\n                    if (valStr === '') {\n                        return '';\n                    }\n                    let valNum = Number(valStr);\n                    if (this.min && valNum < this.min) {\n                        valNum = this.min;\n                    }\n                    if (this.max && valNum > this.max) {\n                        valNum = this.max;\n                    }\n                    valStr = valNum + '';\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    break;\n            }\n        }\n        else {\n            valStr = this.customFormat ? this.customFormat.parse(val) : val;\n        }\n        return valStr;\n    }\n    iconClicked(e) {\n        this.iconWasClicked.emit(true);\n        if (this.iconAction) {\n            this.iconAction();\n        }\n    }\n    dblClicked(e) {\n        this.wasDblClicked.emit(true);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Inputs, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.ControlContainer, host: true, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Inputs, isStandalone: true, selector: \"dia-input\", inputs: { displayAsLabel: \"displayAsLabel\", label: \"label\", required: \"required\", format: \"format\", placeholder: \"placeholder\", hidden: \"hidden\", description: \"description\", disabled: \"disabled\", isDatePicker: \"isDatePicker\", readonlyInput: \"readonlyInput\", readonly: \"readonly\", type: \"type\", min: \"min\", max: \"max\", minDate: \"minDate\", maxDate: \"maxDate\", maxLength: \"maxLength\", minLength: \"minLength\", unit: \"unit\", name: \"name\", cancellable: \"cancellable\", searching: \"searching\", value: \"value\", customFormat: \"customFormat\", icon: \"icon\", errorMsg: \"errorMsg\", isError: \"isError\", defaultControl: \"defaultControl\", matDatepicker: \"matDatepicker\", visualHelpDisabled: \"visualHelpDisabled\", isDateControl: \"isDateControl\", formControl: \"formControl\", iconAction: \"iconAction\" }, outputs: { valueChange: \"valueChange\", cancelValue: \"cancelValue\", dateChange: \"dateChange\", iconWasClicked: \"iconWasClicked\", wasDblClicked: \"wasDblClicked\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Inputs)\n            }\n        ], viewQueries: [{ propertyName: \"formatInput\", first: true, predicate: [\"formatInput\"], descendants: true }, { propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"computeWidth\", first: true, predicate: [\"computeWidth\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<!--div *ngIf=\\\"label\\\" [innerHTML]=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\"></div-->\\n<div class=\\\"zone-description\\\" [ngClass]=\\\"{inputAsLabel:displayAsLabel}\\\" [matTooltip]=\\\"tooltipText\\\">\\n  <mat-form-field appearance=\\\"outline\\\" [ngClass]=\\\"{hidden: hidden,  datePickerInput:isDateControl}\\\" >\\n    <mat-label>{{ placeholder ? placeholder : label ? label : '                  ' }}</mat-label>\\n\\n    <input\\n      matInput\\n      #formatInput\\n      name=\\\"formatInput\\\"\\n      *ngIf=\\\"format || customFormat\\\"\\n      [attr.hidden]=\\\"hidden\\\"\\n      [ngModel]=\\\"formattedValue\\\"\\n      (keyup)=\\\"changeFormat($event.target)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n    <input\\n      matInput\\n      *ngIf=\\\"!defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n    <input\\n      matInput\\n      *ngIf=\\\"defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [required]=\\\"required||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n  <input\\n    matInput\\n    *ngIf=\\\"isDateControl\\\"\\n    #input\\n    [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n    [attr.name]=\\\"name ? name : 'input'\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"change($event)\\\"\\n    (blur)=\\\"onTouched($event)\\\"\\n    [attr.disabled]=\\\"disabled ? '' : null\\\"\\n    [attr.type]=\\\"type\\\"\\n    [min]=\\\"minDate\\\"\\n    [max]=\\\"maxDate\\\"\\n    [required]=\\\"required||false\\\"\\n    [readonly]=\\\"readonly||false\\\"\\n    autocomplete=\\\"off\\\"\\n    (dateChange)=\\\"f_dateChange()\\\"\\n  />\\n    <mat-icon class=\\\"clickable\\\" *ngIf=\\\"cancellable && value\\\" (click)=\\\"cancel($event)\\\" matSuffix\\n      >highlight_off</mat-icon>\\n    <mat-icon *ngIf=\\\"searching && !value\\\" matSuffix>search</mat-icon>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n      unit\\n    }}</span>\\n    <div\\n      *ngIf=\\\"description\\\"\\n      class=\\\"description\\\"\\n      [innerHTML]=\\\"description\\\"\\n    ></div>\\n    <ng-content></ng-content>\\n  </mat-form-field>\\n</div>\\n<div id=\\\"hidden\\\" #computeWidth>\\n    {{value}}\\n  </div>\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: [\"matTextSuffix\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Inputs, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-input', standalone: true, imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Inputs)\n                        }\n                    ], template: \"<!--div *ngIf=\\\"label\\\" [innerHTML]=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\"></div-->\\n<div class=\\\"zone-description\\\" [ngClass]=\\\"{inputAsLabel:displayAsLabel}\\\" [matTooltip]=\\\"tooltipText\\\">\\n  <mat-form-field appearance=\\\"outline\\\" [ngClass]=\\\"{hidden: hidden,  datePickerInput:isDateControl}\\\" >\\n    <mat-label>{{ placeholder ? placeholder : label ? label : '                  ' }}</mat-label>\\n\\n    <input\\n      matInput\\n      #formatInput\\n      name=\\\"formatInput\\\"\\n      *ngIf=\\\"format || customFormat\\\"\\n      [attr.hidden]=\\\"hidden\\\"\\n      [ngModel]=\\\"formattedValue\\\"\\n      (keyup)=\\\"changeFormat($event.target)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n    <input\\n      matInput\\n      *ngIf=\\\"!defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n    <input\\n      matInput\\n      *ngIf=\\\"defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [required]=\\\"required||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n  <input\\n    matInput\\n    *ngIf=\\\"isDateControl\\\"\\n    #input\\n    [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n    [attr.name]=\\\"name ? name : 'input'\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"change($event)\\\"\\n    (blur)=\\\"onTouched($event)\\\"\\n    [attr.disabled]=\\\"disabled ? '' : null\\\"\\n    [attr.type]=\\\"type\\\"\\n    [min]=\\\"minDate\\\"\\n    [max]=\\\"maxDate\\\"\\n    [required]=\\\"required||false\\\"\\n    [readonly]=\\\"readonly||false\\\"\\n    autocomplete=\\\"off\\\"\\n    (dateChange)=\\\"f_dateChange()\\\"\\n  />\\n    <mat-icon class=\\\"clickable\\\" *ngIf=\\\"cancellable && value\\\" (click)=\\\"cancel($event)\\\" matSuffix\\n      >highlight_off</mat-icon>\\n    <mat-icon *ngIf=\\\"searching && !value\\\" matSuffix>search</mat-icon>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n      unit\\n    }}</span>\\n    <div\\n      *ngIf=\\\"description\\\"\\n      class=\\\"description\\\"\\n      [innerHTML]=\\\"description\\\"\\n    ></div>\\n    <ng-content></ng-content>\\n  </mat-form-field>\\n</div>\\n<div id=\\\"hidden\\\" #computeWidth>\\n    {{value}}\\n  </div>\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { formatInput: [{\n                type: ViewChild,\n                args: ['formatInput', { static: false }]\n            }], input: [{\n                type: ViewChild,\n                args: ['input', { static: false }]\n            }], computeWidth: [{\n                type: ViewChild,\n                args: ['computeWidth', { static: false }]\n            }], displayAsLabel: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], hidden: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], isDatePicker: [{\n                type: Input\n            }], readonlyInput: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], minLength: [{\n                type: Input\n            }], unit: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], cancellable: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], customFormat: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], errorMsg: [{\n                type: Input\n            }], isError: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], cancelValue: [{\n                type: Output\n            }], defaultControl: [{\n                type: Input\n            }], matDatepicker: [{\n                type: Input\n            }], dateChange: [{\n                type: Output\n            }], visualHelpDisabled: [{\n                type: Input\n            }], isDateControl: [{\n                type: Input\n            }], formControl: [{\n                type: Input\n            }], iconWasClicked: [{\n                type: Output\n            }], wasDblClicked: [{\n                type: Output\n            }], iconAction: [{\n                type: Input\n            }] } });","originalLength":24685,"removedExports":[],"renderedExports":["Inputs"],"renderedLength":23896},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input-date-picker/input-date-picker.js":{"code":"class InputDatePicker {\n    dateAdapter;\n    label = '';\n    customDatePicker = false;\n    placeholder = 'Date';\n    minDate;\n    maxDate;\n    dateChange = new EventEmitter();\n    popupVisible = false;\n    formControlDate = new FormControl();\n    // Warning localDate via l'input date est la vraie valeur prise en compte pour la date\n    localDate;\n    disabledf = false;\n    onChanged = (_) => { };\n    onTouched = (_) => { };\n    //value n'est pas la valeur utilisé par le composant\n    value;\n    valueChange = new EventEmitter();\n    required = false;\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n        dateAdapter.setLocale('fr');\n    }\n    ngOnInit() {\n        if (this.required) {\n            this.formControlDate.setValidators(Validators.required);\n        }\n    }\n    ngOnChanges(changes) {\n        // Fix JIRA 848\n        if (changes['value'] && changes['value'].currentValue === undefined) {\n            this.formControlDate.reset();\n        }\n        if (changes['value'] && changes['value'].currentValue) {\n            this.formControlDate.reset();\n        }\n    }\n    writeValue(obj) {\n        this.value = obj;\n        this.date = this.value; // ? this.value.getTime() : this.value;\n    }\n    registerOnChange(fn) {\n        this.onChanged = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    set date(date) {\n        if (date !== null && date !== undefined) {\n            this.localDate = new Date(date);\n        }\n        else {\n            delete this.localDate;\n        }\n        this.formControlDate = new FormControl(this.localDate);\n    }\n    get date() {\n        return this.localDate;\n    }\n    set disabled(disabled) {\n        this.disabledf = disabled;\n        if (this.disabledf) {\n            this.formControlDate.disable();\n        }\n        else {\n            this.formControlDate.enable();\n        }\n    }\n    get disabled() {\n        return this.disabledf;\n    }\n    // détection de changement et renvoi automatique de la nouvelle valeur.\n    onChange() {\n        if (this.formControlDate.value === null) {\n            delete this.localDate;\n        }\n        else {\n            this.localDate = new Date(this.formControlDate.value);\n        }\n        this.writeValue(this.localDate);\n        this.dateChange.emit(this.localDate);\n        this.onChanged(this.value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputDatePicker, deps: [{ token: i1$1.DateAdapter }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: InputDatePicker, isStandalone: true, selector: \"dia-input-date-picker\", inputs: { label: \"label\", customDatePicker: \"customDatePicker\", placeholder: \"placeholder\", minDate: \"minDate\", maxDate: \"maxDate\", value: \"value\", required: \"required\", date: \"date\", disabled: \"disabled\" }, outputs: { dateChange: \"dateChange\", valueChange: \"valueChange\" }, providers: [\n            /*{\n              provide: DateAdapter,\n              useClass: MomentDateAdapter,\n              deps: [MAT_DATE_LOCALE]\n            },*/\n            { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FORMATS },\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => InputDatePicker),\n            }\n        ], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\" (click)=\\\"onTouched()\\\">\\n    <!-- mat-form-field appearance=\\\"outline\\\" (click)=\\\"picker.open()\\\"-->\\n    <div (click)=\\\"picker.open()\\\">\\n      <!-- <mat-label\\n        *ngIf=\\\"label\\\"\\n        [innerHTML]=\\\"label\\\"\\n        [ngClass]=\\\"['formlabel']\\\"\\n      ></mat-label> -->\\n      <dia-input\\n        [isDateControl]=\\\"true\\\"\\n        [required]=\\\"required\\\"\\n        [matDatepicker]=\\\"picker\\\"\\n        [minDate]=\\\"minDate?.getTime()||0\\\"\\n        [maxDate]=\\\"maxDate?.getTime()||0\\\"\\n        [placeholder]=\\\"placeholder\\\"\\n        [formControl]=\\\"formControlDate\\\"\\n        (dateChange)=\\\"onChange()\\\"\\n        [icon]=\\\"'calendar_today'\\\"\\n        [visualHelpDisabled]=\\\"true\\\"\\n      >\\n      </dia-input>\\n     <!--  <mat-icon matSuffix>calendar_today</mat-icon> -->\\n      <mat-datepicker\\n        #picker\\n        (closed)=\\\"popupVisible = false\\\"\\n        (opened)=\\\"popupVisible = true\\\"\\n      ></mat-datepicker>\\n    <!--/mat-form-field-->\\n    </div>\\n  </div>\\n  \", styles: [\"mat-datepicker-content{margin-top:16px}:host{display:flex;align-items:center}input:focus{-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}:not([error=false])[error] .button{border-color:red}.button{background-color:#eee;border:solid 1px #e6e6e6;height:56px;line-height:56px;padding:0 1px 0 8px;color:rgba(#939598,.8);font-size:16px;box-sizing:border-box;cursor:pointer}.button.active{color:#162d46}.button.on-focus{box-shadow:0 5px 10px #0d476533;border:solid 1px gold}.button .flex-1{flex:1}.button>input{border:none;width:11.22rem;padding:0;color:#000}.button>input:focus{box-shadow:none}.button>i{margin-left:8px}.mat-calendar-body-selected{background-color:gold}\\n\"], dependencies: [{ kind: \"component\", type: Inputs, selector: \"dia-input\", inputs: [\"displayAsLabel\", \"label\", \"required\", \"format\", \"placeholder\", \"hidden\", \"description\", \"disabled\", \"isDatePicker\", \"readonlyInput\", \"readonly\", \"type\", \"min\", \"max\", \"minDate\", \"maxDate\", \"maxLength\", \"minLength\", \"unit\", \"name\", \"cancellable\", \"searching\", \"value\", \"customFormat\", \"icon\", \"errorMsg\", \"isError\", \"defaultControl\", \"matDatepicker\", \"visualHelpDisabled\", \"isDateControl\", \"formControl\", \"iconAction\"], outputs: [\"valueChange\", \"cancelValue\", \"dateChange\", \"iconWasClicked\", \"wasDblClicked\"] }, { kind: \"ngmodule\", type: MatDatepickerModule }, { kind: \"component\", type: i2$1.MatDatepicker, selector: \"mat-datepicker\", exportAs: [\"matDatepicker\"] }, { kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"ngmodule\", type: MatIconModule }, { kind: \"ngmodule\", type: CommonModule }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputDatePicker, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-input-date-picker', imports: [Inputs, MatDatepickerModule, MatFormFieldModule, MatInputModule, MatIconModule, CommonModule], providers: [\n                        /*{\n                          provide: DateAdapter,\n                          useClass: MomentDateAdapter,\n                          deps: [MAT_DATE_LOCALE]\n                        },*/\n                        { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FORMATS },\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => InputDatePicker),\n                        }\n                    ], encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"container\\\" (click)=\\\"onTouched()\\\">\\n    <!-- mat-form-field appearance=\\\"outline\\\" (click)=\\\"picker.open()\\\"-->\\n    <div (click)=\\\"picker.open()\\\">\\n      <!-- <mat-label\\n        *ngIf=\\\"label\\\"\\n        [innerHTML]=\\\"label\\\"\\n        [ngClass]=\\\"['formlabel']\\\"\\n      ></mat-label> -->\\n      <dia-input\\n        [isDateControl]=\\\"true\\\"\\n        [required]=\\\"required\\\"\\n        [matDatepicker]=\\\"picker\\\"\\n        [minDate]=\\\"minDate?.getTime()||0\\\"\\n        [maxDate]=\\\"maxDate?.getTime()||0\\\"\\n        [placeholder]=\\\"placeholder\\\"\\n        [formControl]=\\\"formControlDate\\\"\\n        (dateChange)=\\\"onChange()\\\"\\n        [icon]=\\\"'calendar_today'\\\"\\n        [visualHelpDisabled]=\\\"true\\\"\\n      >\\n      </dia-input>\\n     <!--  <mat-icon matSuffix>calendar_today</mat-icon> -->\\n      <mat-datepicker\\n        #picker\\n        (closed)=\\\"popupVisible = false\\\"\\n        (opened)=\\\"popupVisible = true\\\"\\n      ></mat-datepicker>\\n    <!--/mat-form-field-->\\n    </div>\\n  </div>\\n  \", styles: [\"mat-datepicker-content{margin-top:16px}:host{display:flex;align-items:center}input:focus{-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}:not([error=false])[error] .button{border-color:red}.button{background-color:#eee;border:solid 1px #e6e6e6;height:56px;line-height:56px;padding:0 1px 0 8px;color:rgba(#939598,.8);font-size:16px;box-sizing:border-box;cursor:pointer}.button.active{color:#162d46}.button.on-focus{box-shadow:0 5px 10px #0d476533;border:solid 1px gold}.button .flex-1{flex:1}.button>input{border:none;width:11.22rem;padding:0;color:#000}.button>input:focus{box-shadow:none}.button>i{margin-left:8px}.mat-calendar-body-selected{background-color:gold}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1$1.DateAdapter }], propDecorators: { label: [{\n                type: Input\n            }], customDatePicker: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], required: [{\n                type: Input\n            }], date: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });","originalLength":10304,"removedExports":[],"renderedExports":["InputDatePicker"],"renderedLength":9545},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/directives/is-numeric.directive.js":{"code":"class IsNumericDirective {\n    el;\n    renderer;\n    regExIsNum = new RegExp('^[0-9]d{0,2}$');\n    regExIsNumber = new RegExp('^[0-9]*$');\n    regExIsAlphabet = new RegExp('[A-Za-z]');\n    component;\n    nextValue = '';\n    isDecimal = false;\n    disable = false;\n    isControl = false;\n    appIsNumeric = '';\n    constructor(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n    }\n    onkeyup($e) {\n        if (!this.disable) {\n            if (!this.regExIsNum.test($e.key) && !this.isControl) {\n                //console.log($e.key);\n                if (($e.key.length === 1 ||\n                    $e.key === 'Multiply' ||\n                    $e.key === 'Subtract' ||\n                    $e.key === 'Add' ||\n                    $e.key === 'Divide') &&\n                    !($e.key === '.' && this.isDecimal)) {\n                    $e.preventDefault();\n                }\n            }\n            if ($e.key !== 'Control' && this.isControl) {\n                this.isControl = false;\n            }\n            if ($e.key === 'Control') {\n                this.isControl = true;\n                // this.nextValue = document.execCommand('Paste');\n            }\n        }\n    }\n    blockPaste(e) {\n        const val = e.clipboardData.getData('Text').split(' ').join('');\n        if (!this.disable && e.clipboardData && !this.regExIsNumber.test(val)) {\n            e.preventDefault();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: IsNumericDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.1.7\", type: IsNumericDirective, isStandalone: true, selector: \"[appIsNumeric]\", inputs: { isDecimal: \"isDecimal\", disable: \"disable\", appIsNumeric: \"appIsNumeric\" }, host: { listeners: { \"keydown\": \"onkeyup($event)\", \"paste\": \"blockPaste($event)\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: IsNumericDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[appIsNumeric]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }], propDecorators: { isDecimal: [{\n                type: Input\n            }], disable: [{\n                type: Input\n            }], appIsNumeric: [{\n                type: Input\n            }], onkeyup: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], blockPaste: [{\n                type: HostListener,\n                args: ['paste', ['$event']]\n            }] } });","originalLength":2905,"removedExports":[],"renderedExports":["IsNumericDirective"],"renderedLength":2748},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/directives/clicked-outside.directive.js":{"code":"class ClickedOutsideDirective {\n    el;\n    looseCheck = false;\n    trackEphemeraElement = false;\n    hasleftFor = 0;\n    hasLeft = new EventEmitter();\n    clickedOutside = new EventEmitter();\n    blur = new EventEmitter();\n    lastElement;\n    componentList = [];\n    compList = [];\n    compListChange = new EventEmitter();\n    mouseIsOver = false;\n    mouseleavedAlready = false;\n    overSuspended = false;\n    debug = false;\n    index = 0;\n    constructor(el) {\n        this.el = el;\n    }\n    ngAfterViewInit() {\n        this.componentList.push(this.el);\n    }\n    onclick(targetElement) {\n        if (!this.contains(targetElement) && (this.isInDocument(targetElement) || this.looseCheck)) {\n            this.clickedOutside.emit({ target: targetElement, src: this.el.nativeElement });\n            if ((this.lastElement && this.contains(this.lastElement)) || (this.trackEphemeraElement && this.lastElement && this.lastElement.usedTobePartOf)) {\n                this.blur.emit({ target: targetElement, src: this.el.nativeElement, last: this.lastElement });\n            }\n        }\n        this.lastElement = targetElement;\n    }\n    isInDocument(targetElement) {\n        return targetElement === document.body ? false : document.body.contains(targetElement);\n    }\n    contains(el) {\n        let contains = false;\n        this.componentList.forEach(it => {\n            if (it.nativeElement.contains(el))\n                contains = true;\n        });\n        this.compList.forEach(it => {\n            if (it.nativeElement.contains(el))\n                contains = true;\n        });\n        if (this.trackEphemeraElement && contains) {\n            el.usedTobePartOf = true;\n        }\n        if (this.debug) {\n            console.log(el.className + ': fait' + (contains ? '' : 'pas') + 'parti');\n        }\n        return contains;\n    }\n    onmouseover(el) {\n        this.mouseIsOver = true;\n    }\n    onmouseleave(el) {\n        if (this.hasleftFor) {\n            if (this.mouseleavedAlready && !this.mouseIsOver && !this.overSuspended) {\n                this.hasLeft.emit(el);\n            }\n            else if (!this.mouseleavedAlready) {\n                setTimeout(() => {\n                    this.onmouseleave();\n                }, this.hasleftFor);\n                this.mouseleavedAlready = true;\n                this.mouseIsOver = false;\n                return;\n            }\n        }\n        this.mouseleavedAlready = false;\n        this.mouseIsOver = false;\n    }\n    suspendOverDetection() {\n        this.mouseIsOver = true;\n        this.overSuspended = true;\n    }\n    resumeOverDetection() {\n        this.overSuspended = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: ClickedOutsideDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.1.7\", type: ClickedOutsideDirective, isStandalone: true, selector: \"[appClickedOutside]\", inputs: { looseCheck: \"looseCheck\", trackEphemeraElement: \"trackEphemeraElement\", hasleftFor: \"hasleftFor\", compList: \"compList\", debug: \"debug\" }, outputs: { hasLeft: \"hasLeft\", clickedOutside: \"clickedOutside\", blur: \"blur\", compListChange: \"compListChange\" }, host: { listeners: { \"document:click\": \"onclick($event.target)\", \"mousemove\": \"onmouseover($event.target)\", \"mouseleave\": \"onmouseleave($event.target)\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: ClickedOutsideDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[appClickedOutside]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { looseCheck: [{\n                type: Input\n            }], trackEphemeraElement: [{\n                type: Input\n            }], hasleftFor: [{\n                type: Input\n            }], hasLeft: [{\n                type: Output\n            }], clickedOutside: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }], compList: [{\n                type: Input\n            }], compListChange: [{\n                type: Output\n            }], debug: [{\n                type: Input\n            }], onclick: [{\n                type: HostListener,\n                args: ['document:click', ['$event.target']]\n            }], onmouseover: [{\n                type: HostListener,\n                args: ['mousemove', ['$event.target']]\n            }], onmouseleave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }] } });","originalLength":4883,"removedExports":[],"renderedExports":["ClickedOutsideDirective"],"renderedLength":4699},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/select/select.js":{"code":"class Select {\n    controlContainer;\n    el;\n    value = null;\n    required = false;\n    defaultValue = true;\n    fixPlaceholder = false;\n    values = [];\n    forced = [];\n    list = [];\n    placeholder = '';\n    disablePlaceHolder = true;\n    label = '';\n    description = '';\n    multiple = false;\n    defaultSort = true;\n    selectedValue = '';\n    disabled = false;\n    direction = '';\n    preset = null;\n    tooltip = false;\n    tooltipValue = '';\n    autoClosedAfter = 0;\n    valueChange = new EventEmitter();\n    valuesChange = new EventEmitter();\n    beenForced = new EventEmitter();\n    formField;\n    select;\n    floatLabel = 'auto';\n    currentControl = undefined;\n    isBeingForced = false;\n    onChange = (_) => { };\n    onTouched = (_) => { };\n    translate = null;\n    isAppleBrowser = false;\n    constructor(controlContainer, el) {\n        this.controlContainer = controlContainer;\n        this.el = el;\n    }\n    ngAfterViewInit() {\n        this.isAppleBrowser = this.isAppleBrowsers();\n    }\n    ngOnInit() { }\n    isAppleBrowsers() {\n        if (typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    gets(obs) {\n        if (obs) {\n            return obs;\n        }\n        else {\n            return {};\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.controlContainer && this.el) {\n            const fname = this.el.nativeElement.getAttribute('formControlName');\n            const fgroupDirective = this.gets(this.controlContainer);\n            if (fgroupDirective && fgroupDirective.form) {\n                this.currentControl = fgroupDirective.form.controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['fixPlaceholder'] && changes['fixPlaceholder'].currentValue) {\n            this.floatLabel = this.fixPlaceholder ? 'always' : 'auto';\n        }\n        if (changes['list'] && changes['list'].currentValue) {\n            if (this.list) {\n                if (this.list.length > 0) {\n                    this.list.map(value => {\n                        if (value.libelle) {\n                            value.libelle = this.translate ? this.translate.instant(value.libelle) : value.libelle;\n                        }\n                    });\n                    if (this.defaultSort) {\n                        this.list = this.list.sort((a, b) => a.libelle < b.libelle ? -1 : a.libelle > b.libelle ? 1 : 0);\n                    }\n                }\n            }\n            if (this.list) {\n                if (this.list.length > 0 &&\n                    this.preset &&\n                    (!this.value || !this.getListValue(this.value))) {\n                    this.onUpdateValue(this.getPresetValue());\n                    this.onTouched(true);\n                }\n            }\n        }\n        if (changes['value'] && this.getListValue(changes['value'].currentValue)) {\n            this.value = this.getListValue(changes['value'].currentValue);\n        }\n        if (changes['forced']) {\n            this.isBeingForced = true;\n            this.resetMultiple();\n            if (this.forced) {\n                this.values = this.forced.map(it => this.getListValue(it)).filter((it) => !!it);\n            }\n            else {\n                this.values = [];\n            }\n            this.valuesChange.emit(this.values);\n            this.beenForced.emit(this.values);\n            this.onUpdateValue(this.values);\n            this.isBeingForced = false;\n        }\n        if (changes['forced'] && !changes['forced'].currentValue) {\n            // Optionally reset selection\n        }\n    }\n    resetMultiple() {\n        if (this.select && this.select.options) {\n            this.select.options.forEach(it => {\n                it.deselect();\n            });\n        }\n    }\n    getListValue(val) {\n        return this.isValInList(val, this.list);\n    }\n    isAlreadySelected(val) {\n        return this.isValInList(val, this.values);\n    }\n    isValInList(val, list) {\n        if (!val || !list) {\n            return null;\n        }\n        const res = list.find(it => (!val.value && !it.value && val === it) || (val.value && it.value && val.value === it.value) || (val.value && it.value && val.libelle === it.libelle));\n        return res ? res : null;\n    }\n    getPresetValue() {\n        if (!this.list)\n            return null;\n        const res = this.list.find(it => this.preset === it.value || this.preset === it.libelle);\n        return res ? res : this.list[0];\n    }\n    onUpdateValue(item) {\n        this.value = item;\n        if (this.tooltip && this.value && this.value.libelle) {\n            this.tooltipValue = this.value.libelle;\n        }\n        this.onChange(item);\n        this.valueChange.emit(item);\n    }\n    getPlaceHolder() {\n        if (this.disablePlaceHolder &&\n            this.value !== null &&\n            this.value !== undefined &&\n            !this.multiple) {\n            return '';\n        }\n        else {\n            return this.placeholder;\n        }\n    }\n    writeValue(value) {\n        if (!value) {\n            this.resetMultiple();\n        }\n        if (this.multiple && value) {\n            this.values = this.values ? this.values : [];\n            if (!this.isAlreadySelected(value)) {\n                this.values.push(value);\n            }\n            this.valuesChange.emit(this.values);\n            this.onUpdateValue(this.values);\n        }\n        if (this.value && !this.multiple) {\n            this.value = value;\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    itemSelected(e, item) {\n        if (e.source.selected) {\n            this.writeValue(item);\n        }\n        else {\n            if (this.values) {\n                this.values = this.values.filter(it => it.libelle !== item.libelle);\n            }\n            this.valuesChange.emit(this.values);\n            this.onUpdateValue(item);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Select, deps: [{ token: i1.ControlContainer, host: true, optional: true, skipSelf: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Select, isStandalone: true, selector: \"dia-select\", inputs: { value: \"value\", required: \"required\", defaultValue: \"defaultValue\", fixPlaceholder: \"fixPlaceholder\", values: \"values\", forced: \"forced\", list: \"list\", placeholder: \"placeholder\", disablePlaceHolder: \"disablePlaceHolder\", label: \"label\", description: \"description\", multiple: \"multiple\", defaultSort: \"defaultSort\", selectedValue: \"selectedValue\", disabled: \"disabled\", direction: \"direction\", preset: \"preset\", tooltip: \"tooltip\", autoClosedAfter: \"autoClosedAfter\", translate: \"translate\" }, outputs: { valueChange: \"valueChange\", valuesChange: \"valuesChange\", beenForced: \"beenForced\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Select)\n            }\n        ], viewQueries: [{ propertyName: \"formField\", first: true, predicate: [\"formField\"], descendants: true, static: true }, { propertyName: \"select\", first: true, predicate: [\"select\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"zone-select\\\" appClickedOutside [hasleftFor]=\\\"autoClosedAfter\\\" (hasLeft)=\\\"select?.close()\\\" [matTooltip]=\\\"tooltipValue\\\">\\n  <div class=\\\"zone-description\\\">\\n    <mat-form-field #formField appearance=\\\"outline\\\" [floatLabel]=\\\"floatLabel\\\">\\n      <mat-label *ngIf=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\">{{label}}</mat-label>\\n      <mat-label class=\\\"my-class-name\\\" *ngIf=\\\"fixPlaceholder\\\">{{getPlaceHolder()}}</mat-label>\\n      <mat-select *ngIf=\\\"multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [multiple]=\\\"multiple\\\" [value]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" (onSelectionChange)=\\\"itemSelected($event, topping)\\\">{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n      <mat-select *ngIf=\\\"!multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [(value)]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngIf=\\\"defaultValue\\\" class=\\\"defaultValue\\\"></mat-option>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" >{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"mat-form-field{width:100%}.mat-mdc-option.mdc-list-item{background-color:#fff}.mat-mdc-option.mdc-list-item:hover{background-color:gray}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:gray}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"ngmodule\", type: MatSelectModule }, { kind: \"component\", type: i4.MatSelect, selector: \"mat-select\", inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\", \"canSelectNullableOptions\"], outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i4.MatOption, selector: \"mat-option\", inputs: [\"value\", \"id\", \"disabled\"], outputs: [\"onSelectionChange\"], exportAs: [\"matOption\"] }, { kind: \"ngmodule\", type: MatOptionModule }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }, { kind: \"directive\", type: ClickedOutsideDirective, selector: \"[appClickedOutside]\", inputs: [\"looseCheck\", \"trackEphemeraElement\", \"hasleftFor\", \"compList\", \"debug\"], outputs: [\"hasLeft\", \"clickedOutside\", \"blur\", \"compListChange\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Select, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-select', standalone: true, imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatSelectModule,\n                        MatOptionModule,\n                        MatTooltipModule,\n                        ClickedOutsideDirective\n                    ], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Select)\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.Emulated, template: \"<div class=\\\"zone-select\\\" appClickedOutside [hasleftFor]=\\\"autoClosedAfter\\\" (hasLeft)=\\\"select?.close()\\\" [matTooltip]=\\\"tooltipValue\\\">\\n  <div class=\\\"zone-description\\\">\\n    <mat-form-field #formField appearance=\\\"outline\\\" [floatLabel]=\\\"floatLabel\\\">\\n      <mat-label *ngIf=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\">{{label}}</mat-label>\\n      <mat-label class=\\\"my-class-name\\\" *ngIf=\\\"fixPlaceholder\\\">{{getPlaceHolder()}}</mat-label>\\n      <mat-select *ngIf=\\\"multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [multiple]=\\\"multiple\\\" [value]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" (onSelectionChange)=\\\"itemSelected($event, topping)\\\">{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n      <mat-select *ngIf=\\\"!multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [(value)]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngIf=\\\"defaultValue\\\" class=\\\"defaultValue\\\"></mat-option>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" >{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"mat-form-field{width:100%}.mat-mdc-option.mdc-list-item{background-color:#fff}.mat-mdc-option.mdc-list-item:hover{background-color:gray}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:gray}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ElementRef }], propDecorators: { value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], defaultValue: [{\n                type: Input\n            }], fixPlaceholder: [{\n                type: Input\n            }], values: [{\n                type: Input\n            }], forced: [{\n                type: Input\n            }], list: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disablePlaceHolder: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], defaultSort: [{\n                type: Input\n            }], selectedValue: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], preset: [{\n                type: Input\n            }], tooltip: [{\n                type: Input\n            }], autoClosedAfter: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], valuesChange: [{\n                type: Output\n            }], beenForced: [{\n                type: Output\n            }], formField: [{\n                type: ViewChild,\n                args: ['formField', { static: true }]\n            }], select: [{\n                type: ViewChild,\n                args: ['select', { static: false }]\n            }], translate: [{\n                type: Input\n            }] } });","originalLength":17381,"removedExports":[],"renderedExports":["Select"],"renderedLength":16449},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/textarea/textarea.js":{"code":"class Textarea {\n    el;\n    controlContainer;\n    input;\n    label = '';\n    unit;\n    placeholder;\n    description;\n    value;\n    readonly;\n    innerHTML;\n    isTextArea = true;\n    valueChange = new EventEmitter();\n    maxLength;\n    minrows;\n    required;\n    name;\n    disabled;\n    defaultControl;\n    customFormat;\n    formControlName = '';\n    formGroup;\n    iconAction;\n    icon = '';\n    dblClick;\n    countDown;\n    currentControl;\n    count = 0;\n    formControl = new FormControl();\n    onChange = (...args) => { };\n    onTouched = (...args) => { };\n    constructor(el, controlContainer) {\n        this.el = el;\n        this.controlContainer = controlContainer;\n    }\n    ngAfterViewChecked() {\n        if (this.controlContainer && this.el) {\n            let fname = this.el.nativeElement.getAttribute('formControlName');\n            fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\n            fname = fname ? fname : this.input.nativeElement.name;\n            const fgroupDirective = this.controlContainer;\n            if (fgroupDirective && fgroupDirective['form']) {\n                this.currentControl = fgroupDirective['form'].controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ngOnInit() {\n        if (this.defaultControl) {\n            this.formControl = new FormControl(this.value);\n            if (this.input) {\n                this.input.nativeElement.formControl = this.formControl;\n            }\n        }\n        if (this.controlContainer) {\n            const form = this.controlContainer.control;\n            const lbl = this.el.nativeElement.getAttribute('formControlName');\n            if (form) {\n                const control = form.controls[lbl ? lbl : this.formControlName];\n            }\n            /*control.valueChanges.subscribe(_=>{\n              //this.value = _;\n            });*/\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.count = this.value?.length || 0;\n        }\n    }\n    change(newValue) {\n        this.writeValue(newValue);\n        // this.value = newValue;\n        this.valueChange.emit(newValue);\n    }\n    changeTextAreaValue() {\n        this.valueChange.emit(this.value);\n    }\n    writeValue(val) {\n        this.value = val;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /* setDisabledState?(isDisabled: boolean): void {\n       throw new Error(\"Method not implemented.\");\n     }*/\n    iconClicked(item) {\n        return this.iconAction ? this.iconAction(item) : null;\n    }\n    dblClicked(item) {\n        return this.dblClick ? this.dblClick(item) : null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Textarea, deps: [{ token: i0.ElementRef }, { token: i1.ControlContainer, host: true, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Textarea, isStandalone: true, selector: \"dia-textarea\", inputs: { label: \"label\", unit: \"unit\", placeholder: \"placeholder\", description: \"description\", value: \"value\", readonly: \"readonly\", innerHTML: \"innerHTML\", isTextArea: \"isTextArea\", maxLength: \"maxLength\", minrows: \"minrows\", required: \"required\", name: \"name\", disabled: \"disabled\", defaultControl: \"defaultControl\", customFormat: \"customFormat\", formControlName: \"formControlName\", formGroup: \"formGroup\", iconAction: \"iconAction\", icon: \"icon\", dblClick: \"dblClick\", countDown: \"countDown\" }, outputs: { valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"textarea\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"zone-description\\\">\\n    <!--div contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n\\t\\t<ng-content></ng-content>\\n  </div-->\\n    <div *ngIf=\\\"!isTextArea && readonly\\\" contenteditable=\\\"false\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"!isTextArea && !readonly\\\" contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"isTextArea && formGroup\\\" [formGroup]=\\\"formGroup\\\">\\n        <mat-form-field *ngIf=\\\"isTextArea\\\" appearance=\\\"outline\\\">\\n            <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n            <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n                [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\"\\n                [attr.maxLength]=\\\"maxLength\\\" [formControlName]=\\\"formControlName\\\" contenteditable=\\\"contenteditable\\\"\\n                matInput [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\"\\n                (blur)=\\\"onTouched($event)\\\" cdkTextareaAutosize></textarea>\\n        </mat-form-field>\\n    </div>\\n    <mat-form-field *ngIf=\\\"isTextArea && !formGroup\\\" appearance=\\\"outline\\\">\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n            [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\" [attr.maxLength]=\\\"maxLength\\\"\\n            (blur)=\\\"onTouched($event)\\\" contenteditable=\\\"contenteditable\\\" matInput [ngModel]=\\\"value\\\"\\n            (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\" cdkTextareaAutosize></textarea>\\n        <div class=\\\"countdown\\\" *ngIf=\\\"countDown\\\">{{count + '/' + maxLength}}</div>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n        unit\\n        }}</span>\\n</div>\", styles: [\":host{display:flex;align-items:center}:host textarea[contenteditable]{height:100px;width:224px;overflow:hidden;caret-color:gray}:host div[contenteditable]{padding:13px;width:224px;min-height:56px}:host [contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#939598}:host[label][label-on-left] label{margin-top:8px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: [\"matTextSuffix\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"directive\", type: i4$1.CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: [\"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\", \"cdkTextareaAutosize\", \"placeholder\"], exportAs: [\"cdkTextareaAutosize\"] }, { kind: \"ngmodule\", type: MatIconModule }, { kind: \"component\", type: i5$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Textarea, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-textarea', imports: [MatFormFieldModule, MatInputModule, MatIconModule, CommonModule, FormsModule, ReactiveFormsModule], template: \"<div class=\\\"zone-description\\\">\\n    <!--div contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n\\t\\t<ng-content></ng-content>\\n  </div-->\\n    <div *ngIf=\\\"!isTextArea && readonly\\\" contenteditable=\\\"false\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"!isTextArea && !readonly\\\" contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"isTextArea && formGroup\\\" [formGroup]=\\\"formGroup\\\">\\n        <mat-form-field *ngIf=\\\"isTextArea\\\" appearance=\\\"outline\\\">\\n            <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n            <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n                [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\"\\n                [attr.maxLength]=\\\"maxLength\\\" [formControlName]=\\\"formControlName\\\" contenteditable=\\\"contenteditable\\\"\\n                matInput [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\"\\n                (blur)=\\\"onTouched($event)\\\" cdkTextareaAutosize></textarea>\\n        </mat-form-field>\\n    </div>\\n    <mat-form-field *ngIf=\\\"isTextArea && !formGroup\\\" appearance=\\\"outline\\\">\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n            [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\" [attr.maxLength]=\\\"maxLength\\\"\\n            (blur)=\\\"onTouched($event)\\\" contenteditable=\\\"contenteditable\\\" matInput [ngModel]=\\\"value\\\"\\n            (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\" cdkTextareaAutosize></textarea>\\n        <div class=\\\"countdown\\\" *ngIf=\\\"countDown\\\">{{count + '/' + maxLength}}</div>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n        unit\\n        }}</span>\\n</div>\", styles: [\":host{display:flex;align-items:center}:host textarea[contenteditable]{height:100px;width:224px;overflow:hidden;caret-color:gray}:host div[contenteditable]{padding:13px;width:224px;min-height:56px}:host [contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#939598}:host[label][label-on-left] label{margin-top:8px}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { input: [{\n                type: ViewChild,\n                args: ['textarea', { static: false }]\n            }], label: [{\n                type: Input\n            }], unit: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], innerHTML: [{\n                type: Input\n            }], isTextArea: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], maxLength: [{\n                type: Input\n            }], minrows: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], defaultControl: [{\n                type: Input\n            }], customFormat: [{\n                type: Input\n            }], formControlName: [{\n                type: Input\n            }], formGroup: [{\n                type: Input\n            }], iconAction: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], dblClick: [{\n                type: Input\n            }], countDown: [{\n                type: Input\n            }] } });","originalLength":15773,"removedExports":[],"renderedExports":["Textarea"],"renderedLength":15009},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/dossier/dossier.js":{"code":"class DossierBloc {\n    amountFormat;\n    disabled = false;\n    modifiable = false;\n    translateSuffix = '';\n    nbColumns = 2;\n    items = [];\n    ratifiable;\n    minrows = 2;\n    transServ;\n    debug = false;\n    emptyfn = () => { };\n    constructor() {\n        //this.transServ = new Translate();\n    }\n    ngOnChanges(changes) {\n        if (changes['items'] && changes['items'].currentValue) {\n            if (this.items) {\n                //this.transServ.get(this.translateSuffix + 'SIREN').subscribe((t:any) => {\n                this.items.forEach(it => {\n                    //it = this.translator(it);\n                    let sum_sizeColumn = 0;\n                    if (this.nbColumns && this.nbColumns > 0 && it.list) {\n                        it.list = it.list.filter(entity => entity.hide !== true);\n                        // fix JIRA 1060\n                        it.list.map(res => {\n                            if (res.sizeColumn && res.sizeColumn > 1) {\n                                sum_sizeColumn = sum_sizeColumn + res.sizeColumn - 1;\n                            }\n                        });\n                        while ((it.list.length + sum_sizeColumn) % this.nbColumns !== 0) {\n                            it.list.push(Dossier.getEmptyDossier());\n                        }\n                        // fix JIRA 1060\n                        let index_column = 0;\n                        it.list.map(res => {\n                            if (res.sizeColumn && res.sizeColumn > 1) {\n                                index_column = index_column + 1 + res.sizeColumn - 1;\n                            }\n                            else {\n                                index_column = index_column + 1;\n                            }\n                            res.indexColumn = index_column;\n                        });\n                    }\n                    if (it.list) {\n                        it.list.forEach(item => (item = this.translator(item)));\n                    }\n                });\n                //});\n            }\n        }\n    }\n    translateTitle(it) {\n        if (it &&\n            Dossier.isDefined(this.getIntName(it)) &&\n            this.translateSuffix && this.transServ &&\n            this.transServ.instant(this.getIntName(it)) &&\n            this.getIntName(it) !==\n                this.transServ.instant(this.getIntName(it))) {\n            return this.transServ.instant(this.getIntName(it));\n        }\n        return it;\n    }\n    translator(it) {\n        if (it.title &&\n            Dossier.isDefined(this.getIntName(it.title)) &&\n            this.translateSuffix && this.transServ &&\n            this.transServ.instant(this.getIntName(it.title)) &&\n            this.getIntName(it.title) !==\n                this.transServ.instant(this.getIntName(it.title))) {\n            it.title = this.transServ.instant(this.getIntName(it.title));\n        }\n        return it;\n    }\n    mapTimestampToDate(timestamp) {\n        if (timestamp) {\n            const dateObject = new Date(+timestamp);\n            return ((dateObject.getDate() < 10\n                ? '0' + dateObject.getDate()\n                : dateObject.getDate()) +\n                '/' +\n                (dateObject.getMonth() + 1 < 10\n                    ? '0' + (dateObject.getMonth() + 1)\n                    : dateObject.getMonth() + 1) +\n                '/' +\n                (dateObject.getFullYear() + '').slice(-2));\n        }\n        return null;\n    }\n    ngOnInit() { }\n    getIntName(str) {\n        return (this.translateSuffix +\n            str\n                .split(' ')\n                .filter(s => s.length > 2)\n                .join()\n                //    .normalize('NFD')\n                .replace(/[\\u0300-\\u036f]/g, '')\n                .replace(/[^a-zA-Z0-9]+/g, '')\n                .toUpperCase());\n    }\n    onclick(item) {\n        if (item.onclick) {\n            item.onclick(item);\n        }\n    }\n    handleChange(e, item) {\n        if (item.model && item.field) {\n            item.model[item.field] = e;\n        }\n        if (item.onchange) {\n            item.onchange(e);\n        }\n    }\n    handleValue(item) {\n        if (item) {\n            if (item.model && item.field && item.model[item.field]) {\n                return item.model[item.field];\n            }\n            else {\n                return item.value;\n            }\n        }\n    }\n    handleSelectValue(item) {\n        if (!item || !item.value)\n            return null;\n        // If item.value is already a ModelOption, return it\n        if (typeof item.value === 'object' && item.value !== null && 'libelle' in item.value && 'value' in item.value) {\n            return item.value;\n        }\n        // Convert string/number to ModelOption\n        const valueStr = String(item.value);\n        return new ModelOption(valueStr, valueStr);\n    }\n    handleFormattedValue(item) {\n        if (!item || !item.value)\n            return '';\n        if (item.suffix) {\n            return this.amountFormat?.transform(item.value).concat(' ' + item.suffix);\n        }\n        else if (item.isNumber) {\n            return this.amountFormat?.transform(item.value);\n        }\n        else if (item.isDate) {\n            return this.mapTimestampToDate(+item.value) || '';\n        }\n        else {\n            return String(item.value);\n        }\n    }\n    handleDateValue(item) {\n        if (!item || !item.value)\n            return undefined;\n        if (typeof item.value === 'number') {\n            return new Date(item.value);\n        }\n        else if (typeof item.value === 'string') {\n            const parsed = new Date(item.value);\n            return isNaN(parsed.getTime()) ? undefined : parsed;\n        }\n        return undefined;\n    }\n    fgroup() {\n        return new FormGroup({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DossierBloc, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.1.7\", type: DossierBloc, isStandalone: true, selector: \"dia-dossier\", inputs: { disabled: \"disabled\", modifiable: \"modifiable\", translateSuffix: \"translateSuffix\", nbColumns: \"nbColumns\", items: \"items\", ratifiable: \"ratifiable\", minrows: \"minrows\", transServ: \"transServ\", debug: \"debug\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => DossierBloc)\n            }\n        ], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"dossierBloc container\\\">\\n    <!--div-- class=\\\"forMobileScroll\\\"></!--div-->\\n    <div class=\\\"content-detail\\\" *ngFor=\\\"let bloc of items; let last = last; \\\">\\n        <div class=\\\"innerContent\\\">\\n            <div class=\\\"templateTable\\\" *ngIf=\\\"bloc.custom && !bloc.hide\\\">\\n                <p class=\\\"title\\\">{{bloc.title}}</p>\\n                <div *ngIf=\\\"!bloc.custom else custom\\\"></div>\\n            </div>\\n            <div class=\\\"templateField \\\" *ngIf=\\\"!bloc.custom\\\">\\n                <p class=\\\"title\\\">{{bloc.title}} </p>\\n                <div class=\\\"fieldContainer {{bloc?.className}}\\\">\\n                    <ng-container *ngFor=\\\"let item of bloc.list; let i = index\\\">\\n                            @if (debug) {\\n                                {{item|json }}\\n\\n                            }\\n                        <!-- JIRA 924 - JIRA 1060 -->\\n                        <div class=\\\"content col{{ item.sizeColumn }} {{item.className}}\\\"\\n                            [ngClass]=\\\"{isRatifView: ratifiable}\\\" [matTooltip]=\\\"item.tooltip\\\"\\n                            [matTooltipPosition]=\\\"'left'\\\">\\n                            <mat-form-field (click)=\\\"onclick(item)\\\" *ngIf=\\\"!item.hide && !modifiable\\\"\\n                                class=\\\"example-full-width\\\"\\n                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick}\\\">\\n                                <!--mat-label *ngIf=\\\"item.tooltip\\\" >{{item.title}}</mat-label-->\\n                                <textarea *ngIf=\\\"item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"handleFormattedValue(item)\\\"\\n                                    cdkTextareaAutosize></textarea>\\n                                <textarea *ngIf=\\\"!item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"'--'\\\" cdkTextareaAutosize></textarea>\\n                            </mat-form-field>\\n                            <div *ngIf=\\\"!item.hide\\\">\\n                                <div class=\\\"modifiable\\\"\\n                                    *ngIf=\\\"modifiable && !item.isDate && !item.custom && !item.isRadio && !item.selectValues && !item.advancedCustoms\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-input *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item.icon\\\"  appIsNumeric\\n                                    [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                        [iconAction]=\\\"item.iconAction\\\" \\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [visualHelpDisabled]=\\\"item.disableVisualHelp\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                        [minLength]=\\\"item.minLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                        [type]=\\\"item.type\\\"></dia-input>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-input [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                                [icon]=\\\"item.icon\\\" [iconAction]=\\\"item.iconAction\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [visualHelpDisabled]=\\\"item.disableVisualHelp\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [minLength]=\\\"item.minLength\\\" [placeholder]=\\\"item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                                [type]=\\\"item.type\\\"></dia-input>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"(modifiable || item.modifiable) && item.isTextarea\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-textarea *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item?.icon||''\\\"\\n                                        [countDown]=\\\"item.countDown\\\" appIsNumeric [disabled]=\\\"!item.isNumber\\\"\\n                                        [iconAction]=\\\"item.iconAction|| emptyfn\\\" (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [maxLength]=\\\"item.maxLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                        class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-textarea [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disabled]=\\\"!item.isNumber\\\" [countDown]=\\\"item.countDown\\\"\\n                                                [icon]=\\\"item.icon||''\\\" [iconAction]=\\\"item.iconAction|| emptyfn\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                                class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.isDate\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-input-date-picker *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title||''\\\" [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\" [minDate]=\\\"item.minDate\\\"\\n                                        [maxDate]=\\\"item.maxDate\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-input-date-picker [label]=\\\"item.title||''\\\" [required]=\\\"item.required||false\\\"\\n                                                [minDate]=\\\"item.minDate\\\" [maxDate]=\\\"item.maxDate\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.selectValues\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-select *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [list]=\\\"item.selectValues\\\" [value]=\\\"handleSelectValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-select [label]=\\\"item.title\\\" [required]=\\\"item.required||false\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\" [list]=\\\"item.selectValues\\\"\\n                                                [value]=\\\"handleSelectValue(item)\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable radio Margin1em\\\" *ngIf=\\\"modifiable && item.isRadio && item.formGroupConfig?.form\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <form [formGroup]=\\\"item.formGroupConfig?.form||fgroup()\\\" class=\\\"radioBlock\\\">\\n                                        <div class=\\\"radioLbl\\\">\\n                                            <mat-label>{{item.title}}</mat-label><mat-label *ngIf=\\\"item.required\\\">*\\n                                            </mat-label>:\\n                                        </div>\\n                                        <div\\n                                            class=\\\"radioChoices {{item.disabled?'radioBoxDisabled':'radioBoxEnabled'}}\\\">\\n                                            <div class=\\\"choice\\\" *ngFor=\\\"let v of item.possibleValues; let i = index\\\">\\n                                                <input type=\\\"radio\\\"\\n                                                    class=\\\" inputRadio {{item.disabled?'radioDisabled':'radioLbl'}}\\\"\\n                                                    [value]=\\\"v.value\\\" [name]=\\\"item?.formGroupConfig?.formName || ''\\\"\\n                                                    formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                    value=\\\"v.libelle\\\" [disabled]=\\\"item.disabled||false\\\" />\\n                                                <mat-label\\n                                                    class=\\\"ecD-form-label-radio {{item.disabled?'radioDisabled':'radioLbl'}}\\\">{{v.libelle}}</mat-label>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.custom\\\" (click)=\\\"onclick(item)\\\">\\n                                    <div *ngIf=\\\"!item.custom else custom\\\"></div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"item.advancedCustoms\\\" (click)=\\\"onclick(item)\\\">\\n                                    <ng-container #advancedCustom *ngFor=\\\"let custom of item.advancedCustoms\\\">\\n                                        <div class=\\\"containerAdvanced\\\"><!-- (click)=\\\"advancedClicked(custom)\\\" -->\\n                                            <ng-container\\n                                                *ngTemplateOutlet=\\\"custom.template; context: {$implicit: custom.context}\\\"></ng-container>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <!-- JIRA 1060 -->\\n                        <div class=\\\"returnLine\\\" *ngIf=\\\"nbColumns && item.indexColumn && item.indexColumn % nbColumns === 0\\\"></div>\\n                    </ng-container>\\n                </div>\\n                <p *ngIf=\\\"!last && !bloc?.noLine\\\" class=\\\"content-detail-line\\\"></p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #custom> <ng-content></ng-content> </ng-template>\", styles: [\".mat-form-field{width:auto}.radioBlock{display:flex;flex-direction:column}.radioLbl{font-size:12px;margin:10px 1em;color:gray}.radioLbl mat-label{font-size:12px}.radioChoices{display:flex}.radioChoices .choice{display:flex;align-items:center;margin-right:1em}.radioMateriel{position:relative;top:-13px}.radioMargin1em{margin:1em}.radioDisabled,.radioBoxDisabled{cursor:not-allowed}@media only screen and (max-width: 800px){.container{position:relative}.container .forMobileScroll{position:absolute;width:100%;height:100%;z-index:1}.container .linkField{z-index:2}}.container{position:relative;display:flex;justify-content:space-around;flex-direction:column;flex-wrap:wrap;border-radius:25px;padding:1rem}.container .content-detail .title{font-weight:700}.container .content-detail .content-detail-line{width:100%;margin:auto;height:1px}.returnLine{width:100%}.fieldContainer{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap;flex:auto}.fieldContainer .content{touch-action:auto!important;-webkit-user-select:auto!important;user-select:auto!important;-webkit-user-drag:auto!important;flex:1 0 auto}.fieldContainer .col4{flex-grow:4}.fieldContainer .col4 mat-form-field{width:720px}.fieldContainer .col3{flex-grow:3}.fieldContainer .col3 mat-form-field{width:540px}.fieldContainer .col2{flex-grow:2}.fieldContainer .col2 mat-form-field{width:360px}@media only screen and (max-width: 1200px){.fieldContainer .isRatifView.col4 mat-form-field{width:540px}}@media only screen and (max-width: 1000px){.fieldContainer .col4 mat-form-field{width:540px}.fieldContainer .isRatifView.col4 mat-form-field{width:360px}}@media only screen and (max-width: 800px){:is(.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:360px}:is(.fieldContainer .isRatifView.col3,.fieldContainer .ratifSize.col4) mat-form-field{width:auto}}@media only screen and (max-width: 600px){:is(.fieldContainer .col2,.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:auto}}textarea{overflow:hidden!important}.emptyField{visibility:hidden}.linkField,.linkField textarea{cursor:pointer;text-decoration:underline}:is() .table-container{background-color:transparent}:is() .table-container .table-content .mat-table tr.mat-header-row th.mat-header-cell .mat-sort-header-container .mat-sort-header-arrow{display:none;position:absolute}@media print{.container{border:solid 1px gray}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatError, selector: \"mat-error, [matError]\", inputs: [\"id\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"directive\", type: i4$1.CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: [\"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\", \"cdkTextareaAutosize\", \"placeholder\"], exportAs: [\"cdkTextareaAutosize\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }, { kind: \"component\", type: Inputs, selector: \"dia-input\", inputs: [\"displayAsLabel\", \"label\", \"required\", \"format\", \"placeholder\", \"hidden\", \"description\", \"disabled\", \"isDatePicker\", \"readonlyInput\", \"readonly\", \"type\", \"min\", \"max\", \"minDate\", \"maxDate\", \"maxLength\", \"minLength\", \"unit\", \"name\", \"cancellable\", \"searching\", \"value\", \"customFormat\", \"icon\", \"errorMsg\", \"isError\", \"defaultControl\", \"matDatepicker\", \"visualHelpDisabled\", \"isDateControl\", \"formControl\", \"iconAction\"], outputs: [\"valueChange\", \"cancelValue\", \"dateChange\", \"iconWasClicked\", \"wasDblClicked\"] }, { kind: \"component\", type: Select, selector: \"dia-select\", inputs: [\"value\", \"required\", \"defaultValue\", \"fixPlaceholder\", \"values\", \"forced\", \"list\", \"placeholder\", \"disablePlaceHolder\", \"label\", \"description\", \"multiple\", \"defaultSort\", \"selectedValue\", \"disabled\", \"direction\", \"preset\", \"tooltip\", \"autoClosedAfter\", \"translate\"], outputs: [\"valueChange\", \"valuesChange\", \"beenForced\"] }, { kind: \"directive\", type: IsNumericDirective, selector: \"[appIsNumeric]\", inputs: [\"isDecimal\", \"disable\", \"appIsNumeric\"] }, { kind: \"component\", type: Textarea, selector: \"dia-textarea\", inputs: [\"label\", \"unit\", \"placeholder\", \"description\", \"value\", \"readonly\", \"innerHTML\", \"isTextArea\", \"maxLength\", \"minrows\", \"required\", \"name\", \"disabled\", \"defaultControl\", \"customFormat\", \"formControlName\", \"formGroup\", \"iconAction\", \"icon\", \"dblClick\", \"countDown\"], outputs: [\"valueChange\"] }, { kind: \"component\", type: InputDatePicker, selector: \"dia-input-date-picker\", inputs: [\"label\", \"customDatePicker\", \"placeholder\", \"minDate\", \"maxDate\", \"value\", \"required\", \"date\", \"disabled\"], outputs: [\"dateChange\", \"valueChange\"] }, { kind: \"pipe\", type: i5.JsonPipe, name: \"json\" }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DossierBloc, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-dossier', standalone: true, imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule, Inputs, Select, IsNumericDirective, Textarea, InputDatePicker], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => DossierBloc)\n                        }\n                    ], template: \"<div class=\\\"dossierBloc container\\\">\\n    <!--div-- class=\\\"forMobileScroll\\\"></!--div-->\\n    <div class=\\\"content-detail\\\" *ngFor=\\\"let bloc of items; let last = last; \\\">\\n        <div class=\\\"innerContent\\\">\\n            <div class=\\\"templateTable\\\" *ngIf=\\\"bloc.custom && !bloc.hide\\\">\\n                <p class=\\\"title\\\">{{bloc.title}}</p>\\n                <div *ngIf=\\\"!bloc.custom else custom\\\"></div>\\n            </div>\\n            <div class=\\\"templateField \\\" *ngIf=\\\"!bloc.custom\\\">\\n                <p class=\\\"title\\\">{{bloc.title}} </p>\\n                <div class=\\\"fieldContainer {{bloc?.className}}\\\">\\n                    <ng-container *ngFor=\\\"let item of bloc.list; let i = index\\\">\\n                            @if (debug) {\\n                                {{item|json }}\\n\\n                            }\\n                        <!-- JIRA 924 - JIRA 1060 -->\\n                        <div class=\\\"content col{{ item.sizeColumn }} {{item.className}}\\\"\\n                            [ngClass]=\\\"{isRatifView: ratifiable}\\\" [matTooltip]=\\\"item.tooltip\\\"\\n                            [matTooltipPosition]=\\\"'left'\\\">\\n                            <mat-form-field (click)=\\\"onclick(item)\\\" *ngIf=\\\"!item.hide && !modifiable\\\"\\n                                class=\\\"example-full-width\\\"\\n                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick}\\\">\\n                                <!--mat-label *ngIf=\\\"item.tooltip\\\" >{{item.title}}</mat-label-->\\n                                <textarea *ngIf=\\\"item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"handleFormattedValue(item)\\\"\\n                                    cdkTextareaAutosize></textarea>\\n                                <textarea *ngIf=\\\"!item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"'--'\\\" cdkTextareaAutosize></textarea>\\n                            </mat-form-field>\\n                            <div *ngIf=\\\"!item.hide\\\">\\n                                <div class=\\\"modifiable\\\"\\n                                    *ngIf=\\\"modifiable && !item.isDate && !item.custom && !item.isRadio && !item.selectValues && !item.advancedCustoms\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-input *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item.icon\\\"  appIsNumeric\\n                                    [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                        [iconAction]=\\\"item.iconAction\\\" \\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [visualHelpDisabled]=\\\"item.disableVisualHelp\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                        [minLength]=\\\"item.minLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                        [type]=\\\"item.type\\\"></dia-input>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-input [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                                [icon]=\\\"item.icon\\\" [iconAction]=\\\"item.iconAction\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [visualHelpDisabled]=\\\"item.disableVisualHelp\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [minLength]=\\\"item.minLength\\\" [placeholder]=\\\"item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                                [type]=\\\"item.type\\\"></dia-input>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"(modifiable || item.modifiable) && item.isTextarea\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-textarea *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item?.icon||''\\\"\\n                                        [countDown]=\\\"item.countDown\\\" appIsNumeric [disabled]=\\\"!item.isNumber\\\"\\n                                        [iconAction]=\\\"item.iconAction|| emptyfn\\\" (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [maxLength]=\\\"item.maxLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                        class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-textarea [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disabled]=\\\"!item.isNumber\\\" [countDown]=\\\"item.countDown\\\"\\n                                                [icon]=\\\"item.icon||''\\\" [iconAction]=\\\"item.iconAction|| emptyfn\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                                class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.isDate\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-input-date-picker *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title||''\\\" [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\" [minDate]=\\\"item.minDate\\\"\\n                                        [maxDate]=\\\"item.maxDate\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-input-date-picker [label]=\\\"item.title||''\\\" [required]=\\\"item.required||false\\\"\\n                                                [minDate]=\\\"item.minDate\\\" [maxDate]=\\\"item.maxDate\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.selectValues\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-select *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [list]=\\\"item.selectValues\\\" [value]=\\\"handleSelectValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-select [label]=\\\"item.title\\\" [required]=\\\"item.required||false\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\" [list]=\\\"item.selectValues\\\"\\n                                                [value]=\\\"handleSelectValue(item)\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable radio Margin1em\\\" *ngIf=\\\"modifiable && item.isRadio && item.formGroupConfig?.form\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <form [formGroup]=\\\"item.formGroupConfig?.form||fgroup()\\\" class=\\\"radioBlock\\\">\\n                                        <div class=\\\"radioLbl\\\">\\n                                            <mat-label>{{item.title}}</mat-label><mat-label *ngIf=\\\"item.required\\\">*\\n                                            </mat-label>:\\n                                        </div>\\n                                        <div\\n                                            class=\\\"radioChoices {{item.disabled?'radioBoxDisabled':'radioBoxEnabled'}}\\\">\\n                                            <div class=\\\"choice\\\" *ngFor=\\\"let v of item.possibleValues; let i = index\\\">\\n                                                <input type=\\\"radio\\\"\\n                                                    class=\\\" inputRadio {{item.disabled?'radioDisabled':'radioLbl'}}\\\"\\n                                                    [value]=\\\"v.value\\\" [name]=\\\"item?.formGroupConfig?.formName || ''\\\"\\n                                                    formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                    value=\\\"v.libelle\\\" [disabled]=\\\"item.disabled||false\\\" />\\n                                                <mat-label\\n                                                    class=\\\"ecD-form-label-radio {{item.disabled?'radioDisabled':'radioLbl'}}\\\">{{v.libelle}}</mat-label>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.custom\\\" (click)=\\\"onclick(item)\\\">\\n                                    <div *ngIf=\\\"!item.custom else custom\\\"></div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"item.advancedCustoms\\\" (click)=\\\"onclick(item)\\\">\\n                                    <ng-container #advancedCustom *ngFor=\\\"let custom of item.advancedCustoms\\\">\\n                                        <div class=\\\"containerAdvanced\\\"><!-- (click)=\\\"advancedClicked(custom)\\\" -->\\n                                            <ng-container\\n                                                *ngTemplateOutlet=\\\"custom.template; context: {$implicit: custom.context}\\\"></ng-container>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <!-- JIRA 1060 -->\\n                        <div class=\\\"returnLine\\\" *ngIf=\\\"nbColumns && item.indexColumn && item.indexColumn % nbColumns === 0\\\"></div>\\n                    </ng-container>\\n                </div>\\n                <p *ngIf=\\\"!last && !bloc?.noLine\\\" class=\\\"content-detail-line\\\"></p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #custom> <ng-content></ng-content> </ng-template>\", styles: [\".mat-form-field{width:auto}.radioBlock{display:flex;flex-direction:column}.radioLbl{font-size:12px;margin:10px 1em;color:gray}.radioLbl mat-label{font-size:12px}.radioChoices{display:flex}.radioChoices .choice{display:flex;align-items:center;margin-right:1em}.radioMateriel{position:relative;top:-13px}.radioMargin1em{margin:1em}.radioDisabled,.radioBoxDisabled{cursor:not-allowed}@media only screen and (max-width: 800px){.container{position:relative}.container .forMobileScroll{position:absolute;width:100%;height:100%;z-index:1}.container .linkField{z-index:2}}.container{position:relative;display:flex;justify-content:space-around;flex-direction:column;flex-wrap:wrap;border-radius:25px;padding:1rem}.container .content-detail .title{font-weight:700}.container .content-detail .content-detail-line{width:100%;margin:auto;height:1px}.returnLine{width:100%}.fieldContainer{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap;flex:auto}.fieldContainer .content{touch-action:auto!important;-webkit-user-select:auto!important;user-select:auto!important;-webkit-user-drag:auto!important;flex:1 0 auto}.fieldContainer .col4{flex-grow:4}.fieldContainer .col4 mat-form-field{width:720px}.fieldContainer .col3{flex-grow:3}.fieldContainer .col3 mat-form-field{width:540px}.fieldContainer .col2{flex-grow:2}.fieldContainer .col2 mat-form-field{width:360px}@media only screen and (max-width: 1200px){.fieldContainer .isRatifView.col4 mat-form-field{width:540px}}@media only screen and (max-width: 1000px){.fieldContainer .col4 mat-form-field{width:540px}.fieldContainer .isRatifView.col4 mat-form-field{width:360px}}@media only screen and (max-width: 800px){:is(.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:360px}:is(.fieldContainer .isRatifView.col3,.fieldContainer .ratifSize.col4) mat-form-field{width:auto}}@media only screen and (max-width: 600px){:is(.fieldContainer .col2,.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:auto}}textarea{overflow:hidden!important}.emptyField{visibility:hidden}.linkField,.linkField textarea{cursor:pointer;text-decoration:underline}:is() .table-container{background-color:transparent}:is() .table-container .table-content .mat-table tr.mat-header-row th.mat-header-cell .mat-sort-header-container .mat-sort-header-arrow{display:none;position:absolute}@media print{.container{border:solid 1px gray}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input\n            }], modifiable: [{\n                type: Input\n            }], translateSuffix: [{\n                type: Input\n            }], nbColumns: [{\n                type: Input\n            }], items: [{\n                type: Input\n            }], ratifiable: [{\n                type: Input\n            }], minrows: [{\n                type: Input\n            }], transServ: [{\n                type: Input\n            }], debug: [{\n                type: Input\n            }] } });","originalLength":51501,"removedExports":[],"renderedExports":["DossierBloc"],"renderedLength":50380},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/input-range-date/input-range-date.js":{"code":"class InputRangeDate {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputRangeDate, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: InputRangeDate, isStandalone: true, selector: \"lib-input-range-date\", ngImport: i0, template: \"<p>input-range-date works!</p>\\n\", styles: [\"\"] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputRangeDate, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-input-range-date', imports: [], template: \"<p>input-range-date works!</p>\\n\" }]\n        }] });","originalLength":846,"removedExports":[],"renderedExports":["InputRangeDate"],"renderedLength":714},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/scroll/scroll.js":{"code":"class Scroll {\n    scrolledUpDisabled = false;\n    scrolledDownDisabled = false;\n    scrolledLeftDisabled = false;\n    scrolledRightDisabled = false;\n    scrolledUp = new EventEmitter();\n    scrolledDown = new EventEmitter();\n    scrolledLeft = new EventEmitter();\n    scrolledRight = new EventEmitter();\n    scrollBuffer = 500;\n    scrollBuffered = false;\n    vertical = true;\n    horizontal = true;\n    forced = false;\n    constructor() { }\n    onmouseWheel(event) {\n        if ((event.wheelDelta > 0 && !this.scrolledDownDisabled) || (event.wheelDelta < 0 && !this.scrolledUpDisabled)) {\n            if (!this.scrollBuffered) {\n                this.scrollBuffered = true;\n                if (this.vertical) {\n                    this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n                }\n                if (this.horizontal) {\n                    this.scrolledH(event.wheelDelta > 0, event.wheelDelta);\n                }\n                setTimeout(() => this.scrollBuffered = false, this.scrollBuffer);\n            }\n        }\n    }\n    onmouseoverup(event) {\n        if (this.scrolledUpDisabled) {\n            this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n        }\n    }\n    onmouseoverdown(event) {\n        if (this.scrolledDownDisabled) {\n            this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n        }\n    }\n    ngOnInit() {\n    }\n    scrolled(up, wheel) {\n        if (up) {\n            this.scrolledUp.emit(Math.abs(wheel));\n        }\n        else {\n            this.scrolledDown.emit(Math.abs(wheel));\n        }\n    }\n    scrolledH(up, wheel) {\n        if (up) {\n            this.scrolledLeft.emit(Math.abs(wheel));\n        }\n        else {\n            this.scrolledRight.emit(Math.abs(wheel));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Scroll, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Scroll, isStandalone: true, selector: \"dia-scroll\", inputs: { scrolledUpDisabled: \"scrolledUpDisabled\", scrolledDownDisabled: \"scrolledDownDisabled\", scrolledLeftDisabled: \"scrolledLeftDisabled\", scrolledRightDisabled: \"scrolledRightDisabled\", scrollBuffer: \"scrollBuffer\", vertical: \"vertical\", horizontal: \"horizontal\", forced: \"forced\" }, outputs: { scrolledUp: \"scrolledUp\", scrolledDown: \"scrolledDown\", scrolledLeft: \"scrolledLeft\", scrolledRight: \"scrolledRight\" }, host: { listeners: { \"mousewheel\": \"onmouseWheel($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Scroll)\n            }\n        ], ngImport: i0, template: \"<div class=\\\"container up\\\" *ngIf=\\\"vertical && !scrolledUpDisabled\\\" [ngClass]=\\\"{containerForced: forced, upForced: forced}\\\" (click)=\\\"scrolled(true)\\\" >\\n  <mat-icon >keyboard_arrow_up</mat-icon>\\n</div>\\n\\n<div class=\\\"container down\\\" *ngIf=\\\"vertical && !scrolledDownDisabled\\\" [ngClass]=\\\"{containerForced: forced, downForced: forced}\\\" (click)=\\\"scrolled(false)\\\">\\n  <mat-icon >keyboard_arrow_down</mat-icon>\\n</div>\\n\\n<div class=\\\"container left\\\" *ngIf=\\\"horizontal && !scrolledLeftDisabled\\\" [ngClass]=\\\"{containerForced: forced, leftForced: forced}\\\" (click)=\\\"scrolledH(true)\\\" >\\n    <mat-icon >keyboard_arrow_left</mat-icon>\\n  </div>\\n\\n  <div class=\\\"container right\\\" *ngIf=\\\"horizontal  && !scrolledRightDisabled\\\" [ngClass]=\\\"{containerForced: forced, rightForced: forced}\\\" (click)=\\\"scrolledH(false)\\\">\\n    <mat-icon >keyboard_arrow_right</mat-icon>\\n  </div>\\n\", styles: [\".container{cursor:pointer;position:absolute;left:0;width:100%;height:10%;display:flex;justify-content:center;opacity:0;transition-duration:.5s}.container mat-icon{transform:scale(2);position:relative;transition-duration:.5s}.up{align-items:flex-start;top:0}.up mat-icon{top:100px}.down{align-items:flex-end;bottom:0}.down mat-icon{bottom:100px}.container:hover{opacity:.8}.down:hover mat-icon{transform:scale(2);position:relative;bottom:20px}.up:hover mat-icon{transform:scale(2);position:relative;top:20px}.left{width:10%;height:100%;align-items:center;justify-content:flex-start;left:0;top:0}.left mat-icon{left:100px}.right{width:10%;height:100%;align-items:center;justify-content:flex-end;right:0;top:0;left:unset}.right mat-icon{right:100px}.right:hover mat-icon{transform:scale(2);position:relative;right:20px}.left:hover mat-icon{transform:scale(2);position:relative;left:20px}.containerForced{opacity:.8}.rightForced mat-icon{transform:scale(2);position:relative;right:20px}.leftForced mat-icon{transform:scale(2);position:relative;left:20px}.downForced mat-icon{transform:scale(2);position:relative;bottom:20px}.upForced mat-icon{transform:scale(2);position:relative;top:20px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatIconModule }, { kind: \"component\", type: i5$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Scroll, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-scroll', standalone: true, imports: [MatIconModule, CommonModule], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Scroll)\n                        }\n                    ], template: \"<div class=\\\"container up\\\" *ngIf=\\\"vertical && !scrolledUpDisabled\\\" [ngClass]=\\\"{containerForced: forced, upForced: forced}\\\" (click)=\\\"scrolled(true)\\\" >\\n  <mat-icon >keyboard_arrow_up</mat-icon>\\n</div>\\n\\n<div class=\\\"container down\\\" *ngIf=\\\"vertical && !scrolledDownDisabled\\\" [ngClass]=\\\"{containerForced: forced, downForced: forced}\\\" (click)=\\\"scrolled(false)\\\">\\n  <mat-icon >keyboard_arrow_down</mat-icon>\\n</div>\\n\\n<div class=\\\"container left\\\" *ngIf=\\\"horizontal && !scrolledLeftDisabled\\\" [ngClass]=\\\"{containerForced: forced, leftForced: forced}\\\" (click)=\\\"scrolledH(true)\\\" >\\n    <mat-icon >keyboard_arrow_left</mat-icon>\\n  </div>\\n\\n  <div class=\\\"container right\\\" *ngIf=\\\"horizontal  && !scrolledRightDisabled\\\" [ngClass]=\\\"{containerForced: forced, rightForced: forced}\\\" (click)=\\\"scrolledH(false)\\\">\\n    <mat-icon >keyboard_arrow_right</mat-icon>\\n  </div>\\n\", styles: [\".container{cursor:pointer;position:absolute;left:0;width:100%;height:10%;display:flex;justify-content:center;opacity:0;transition-duration:.5s}.container mat-icon{transform:scale(2);position:relative;transition-duration:.5s}.up{align-items:flex-start;top:0}.up mat-icon{top:100px}.down{align-items:flex-end;bottom:0}.down mat-icon{bottom:100px}.container:hover{opacity:.8}.down:hover mat-icon{transform:scale(2);position:relative;bottom:20px}.up:hover mat-icon{transform:scale(2);position:relative;top:20px}.left{width:10%;height:100%;align-items:center;justify-content:flex-start;left:0;top:0}.left mat-icon{left:100px}.right{width:10%;height:100%;align-items:center;justify-content:flex-end;right:0;top:0;left:unset}.right mat-icon{right:100px}.right:hover mat-icon{transform:scale(2);position:relative;right:20px}.left:hover mat-icon{transform:scale(2);position:relative;left:20px}.containerForced{opacity:.8}.rightForced mat-icon{transform:scale(2);position:relative;right:20px}.leftForced mat-icon{transform:scale(2);position:relative;left:20px}.downForced mat-icon{transform:scale(2);position:relative;bottom:20px}.upForced mat-icon{transform:scale(2);position:relative;top:20px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { scrolledUpDisabled: [{\n                type: Input\n            }], scrolledDownDisabled: [{\n                type: Input\n            }], scrolledLeftDisabled: [{\n                type: Input\n            }], scrolledRightDisabled: [{\n                type: Input\n            }], scrolledUp: [{\n                type: Output\n            }], scrolledDown: [{\n                type: Output\n            }], scrolledLeft: [{\n                type: Output\n            }], scrolledRight: [{\n                type: Output\n            }], scrollBuffer: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], forced: [{\n                type: Input\n            }], onmouseWheel: [{\n                type: HostListener,\n                args: ['mousewheel', ['$event']]\n            }] } });","originalLength":9241,"removedExports":[],"renderedExports":["Scroll"],"renderedLength":8825},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/tiles/tiles.js":{"code":"class Tiles {\n    tunnelLeft = undefined;\n    tunnel = new ElementRef(null);\n    hoster = new ElementRef(null);\n    scroller = new ElementRef(null);\n    container = new ElementRef(null);\n    scenariContainer = new ElementRef(null);\n    tile = undefined;\n    tiles = [];\n    selector = false;\n    autofill = false;\n    emptyTpl;\n    tileTemplate;\n    title = '';\n    maxTiles = undefined;\n    wheelSpace = 120;\n    hasLeft = new EventEmitter();\n    selection = new EventEmitter();\n    hasClicked = new EventEmitter();\n    maxBound = new EventEmitter();\n    minBound = new EventEmitter();\n    maxLength = 0;\n    autoCompute = true;\n    forceActive = true;\n    circularEffect = false;\n    active = false;\n    currentContentWidth = null;\n    currentContentHeight = null;\n    isMobile = false;\n    tileWidth = 0;\n    tileHeight = 0;\n    maxTile = undefined;\n    carouselIndex = undefined;\n    scrollAngle = 0;\n    translateX = undefined;\n    translateY = undefined;\n    scroll = 90;\n    grabbing = false;\n    pourcent = 0.8;\n    minDiametre = 0;\n    maxDiametre = 0;\n    forcedDiametre = undefined;\n    diametre = 0;\n    tetas = [];\n    init = false;\n    ready = false;\n    isCircularInitated = false;\n    selectedEvent = new EventEmitter();\n    selectedTile = undefined;\n    currentEvent = undefined;\n    isBoundMax = false;\n    isBoundMin = false;\n    debug = true;\n    constructor() { }\n    ngOnChanges(changes) {\n        if (changes['tiles'] && changes['tiles'].currentValue) {\n            if (this.circularEffect && this.tiles?.filter((tile) => tile.empty).length == 0) {\n                this.computeSlider();\n            }\n            if (this.hoster && this.tiles && this.tileWidth) {\n                this.hoster.nativeElement.style.width = Math.max(this.tiles.length * this.tileWidth / Math.PI * 1.3, 0) + 'px';\n            }\n        }\n        if ((changes['forcedDiametre'] && changes['forcedDiametre'].currentValue && !changes['forcedDiametre'].isFirstChange())\n            || (changes['minDiametre'] && changes['minDiametre'].currentValue && !changes['minDiametre'].isFirstChange())\n            || (changes['maxDiametre'] && changes['maxDiametre'].currentValue && !changes['maxDiametre'].isFirstChange())) {\n            this.computeSlider();\n        }\n    }\n    next() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        this.scroll += this.scrollAngle;\n        this.rotate();\n    }\n    prev() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        this.scroll -= this.scrollAngle;\n        this.rotate();\n    }\n    ngOnInit() {\n        this.isMobile = this.isMobileBrowser();\n        if (this.isMobile) {\n            this.active = true;\n        }\n        if (this.tile) {\n            this.tile.changes.subscribe(_ => {\n                this.tileWidth = _.nativeElement.clientWidth;\n            });\n        }\n    }\n    computeCircularTileAmount() {\n        let boxW = this.tileWidth * 1.3;\n        let boxH = this.tileHeight;\n        let r = this.getDiametre() / 2;\n        let perimetre = 2 * Math.PI * r;\n        let amountTile = this.tiles.length;\n        this.addEmptyTiles(Math.round(perimetre / boxW) - amountTile);\n    }\n    addEmptyTiles(q) {\n        for (let i = this.tiles.length - 1; i < 31; i++) {\n            this.tiles.push({ empty: true });\n        }\n        const diam = this.tiles.length * this.tileWidth / Math.PI * 1.3;\n        this.hoster.nativeElement.style.width = Math.round(diam) + 'px';\n    }\n    isIosBrowser() {\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    isMobileBrowser() {\n        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getDiametre() {\n        return this.forcedDiametre ? this.forcedDiametre : this.minDiametre > this.hoster.nativeElement.clientWidth ? this.minDiametre : this.maxDiametre < this.hoster.nativeElement.clientWidth ? this.maxDiametre : this.hoster.nativeElement.clientWidth;\n    }\n    getFirstTile() {\n        if (!this.tile || !this.tile.first) {\n            return;\n        }\n        this.tileWidth = this.tile.first.nativeElement.clientWidth;\n        this.tileHeight = this.tile.first.nativeElement.clientHeight;\n        return this.tile.first;\n    }\n    ngAfterViewInit() {\n        this.getDiametre();\n        if (this.tile) {\n            this.tile.changes.subscribe(_ => {\n                this.getFirstTile();\n            });\n            if (this.tile.first) {\n                this.getFirstTile();\n            }\n        }\n        this.computeSlider();\n        if (!this.init) {\n            this.rotateBox({ movementX: 0 });\n            setTimeout(() => { this.computeSlider(true); this.mouseUp(null); }, 300);\n            this.init = true;\n        }\n    }\n    resetTunnel(e) {\n        this.tunnelLeft = 0;\n        this.tunnel.nativeElement.style.left = this.tunnelLeft + 'px';\n        this.computeSlider();\n    }\n    getMaxTiles() {\n        this.getFirstTile();\n        let widthTile;\n        if (this.tile && this.tile.first) {\n            widthTile = this.tile.first.nativeElement.clientWidth;\n            this.log('largeur tiles: ' + widthTile);\n        }\n        if (this.maxTiles) {\n            return Math.floor(this.maxTiles);\n        }\n        if (widthTile) {\n            return Math.floor(this.container.nativeElement.clientWidth / widthTile);\n        }\n        if (this.tileWidth) {\n            return Math.floor(this.container.nativeElement.clientWidth / this.tileWidth);\n        }\n        return this.tiles.length;\n    }\n    computeAngle(c, i, tube, num) {\n        return (360 / num * i);\n    }\n    computeLeft(c, i, tube, num) {\n        let teta = this.computeAngle(c, i, tube, num);\n        return (this.getDiametre() - this.getDiametre() * Math.cos(teta * Math.PI / 180)) / 2;\n    }\n    computeBottom(c, i, tube, num) {\n        let teta = this.computeAngle(c, i, tube, num);\n        return (this.getDiametre() - this.getDiametre() * Math.sin(teta * Math.PI / 180)) / 2;\n    }\n    computeSlider(init) {\n        if (this.init) {\n            setTimeout(() => this.ready = true, 300);\n        }\n        if (this.tunnel && this.tiles) {\n            const overflow = this.tunnel.nativeElement.clientWidth - this.container.nativeElement.clientWidth;\n            if (this.circularEffect) {\n                this.tunnel.nativeElement.style.height = this.getDiametre() + 'px';\n                this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            }\n            this.maxLength = overflow > 0 ? overflow / 2 : 0;\n            let boxW = Math.round(this.tunnel.nativeElement.clientWidth / this.tiles.length);\n            this.log('boxing: ' + boxW);\n            this.currentContentWidth = boxW;\n            let boxH = this.tunnel.nativeElement.clientHeight;\n            if (this.scroller && this.scroller.nativeElement && this.scroller.nativeElement.children.length > 0) {\n                this.scroller.nativeElement.children[0].style.height = boxH + 'px';\n                this.scroller.nativeElement.children[0].style.width = boxW / 3 + 'px';\n                this.scroller.nativeElement.children[1].style.height = boxH + 'px';\n                this.scroller.nativeElement.children[1].style.width = boxW / 3 + 'px';\n                this.scroller.nativeElement.children[0].style.top = '-' + (boxH + 32) / 2 + 'px';\n                this.scroller.nativeElement.children[1].style.top = '-' + (boxH + 32) / 2 + 'px';\n            }\n            if (this.circularEffect) {\n                this.getDiametre();\n                this.translateY = 1.7 * this.getDiametre() + 'px';\n                this.translateX = (this.getDiametre() * 1.2 + boxW) + 'px';\n            }\n            if (this.forceActive && this.tunnel.nativeElement.clientWidth > this.getDiametre()) {\n                this.active = true;\n            }\n            else {\n                this.active = false;\n            }\n            if (this.autofill && !this.circularEffect) {\n                if (this.tiles.filter((_) => _.empty).length > 0 && this.tiles.length > this.getMaxTiles()) {\n                    this.tiles = this.tiles.filter((_) => !_.empty);\n                }\n                let empties = [];\n                if (this.tiles.length < this.getMaxTiles() - 1) {\n                    while (this.tiles.length + empties.length < this.getMaxTiles()) {\n                        empties.push({ empty: true });\n                    }\n                    let tmp = [];\n                    if (empties.length % 2 !== 0) {\n                        empties.pop();\n                    }\n                    tmp = this.tiles.map((_) => empties.splice(Math.floor(empties.length / 2), 0, _));\n                    this.tiles = empties;\n                }\n            }\n            if (this.circularEffect) {\n                this.refreshCircular();\n            }\n        }\n    }\n    scrolledRight(e, tar) {\n        if (this.active) {\n            tar = this.getTar(tar, e);\n            if (!this.tunnelLeft) {\n                this.tunnelLeft = 0;\n            }\n            if (this.tunnelLeft < this.maxLength - Math.abs(this.getSlideDelata(e))) {\n                this.tunnelLeft += Math.abs(this.getSlideDelata(e));\n                tar.style.left = this.tunnelLeft + 'px';\n            }\n        }\n        this.refreshCircular();\n    }\n    refreshCircular() {\n        if (this.circularEffect) {\n            this.getFirstTile();\n            this.container.nativeElement.style.height = Math.round(this.tileHeight * 1.5) + 'px';\n            let c = this.tunnel.nativeElement.children;\n            this.scrollAngle = (360 / (c.length));\n            let j = 0;\n            let r = this.getDiametre() / 2;\n            this.log('diametre:' + this.getDiametre());\n            this.scenariContainer.nativeElement.style.position = \"relative\";\n            this.scenariContainer.nativeElement.style.top = r + 'px';\n            this.tetas = [];\n            for (let i = 0; i < c.length; i++) {\n                if (c[i].className.indexOf('scroll') == -1) {\n                    const teta = this.computeAngle(c[i], i, this.tunnel, c.length);\n                    c[i].style.transform = '  rotate(-' + (teta + 90) + 'deg)';\n                    this.tetas.push(teta + 90);\n                    c[i].style.left = ((this.computeLeft(c[i], i, this.tunnel, c.length)) - r - this.tileWidth / 2) + 'px';\n                    c[i].style.bottom = ((this.computeBottom(c[i], i, this.tunnel, c.length)) - this.tileHeight / 2) + 'px';\n                }\n            }\n            this.computeCircularTileAmount();\n            if (!this.isCircularInitated) {\n                this.isCircularInitated = true;\n            }\n        }\n    }\n    scrolledLeft(e, tar) {\n        if (this.active) {\n            tar = this.getTar(tar, e);\n            if (!this.tunnelLeft) {\n                this.tunnelLeft = 0;\n            }\n            if (this.tunnelLeft > -this.maxLength + Math.abs(this.getSlideDelata(e))) {\n                this.tunnelLeft -= Math.abs(this.getSlideDelata(e));\n                tar.style.left = this.tunnelLeft + 'px';\n            }\n        }\n        this.refreshCircular();\n    }\n    getSlideDelata(e) {\n        return e && e.deltaX ? e.deltaX : e ? e : this.autoCompute ? this.currentContentWidth : this.wheelSpace;\n    }\n    getTar(tar, e) {\n        return this.tunnel.nativeElement;\n    }\n    left(e) {\n        this.hasLeft.emit(e);\n    }\n    clicked(e, sc) {\n        this.log('clicked');\n        if (sc.empty) {\n            this.log('clicked aborted: empty tile');\n            return;\n        }\n        if (this.circularEffect) {\n            this.scroll = this.tetas[e];\n            this.selectedTile = this.tiles[e];\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            this.selection.emit(this.selectedTile);\n            this.log(e);\n        }\n        this.hasClicked.emit(e);\n    }\n    mouseDown(e) {\n        this.grabbing = true;\n    }\n    panStart(e) {\n        this.grabbing = true;\n    }\n    mouseUp(e) {\n        this.grabbing = false;\n        if (this.circularEffect) {\n            const activeTiles = this.tiles.filter((_) => !_.empty).length;\n            const maxangle = (activeTiles - 1) * this.scrollAngle;\n            const minangle = 90;\n            if (activeTiles === 1) {\n                this.scroll = 90;\n                this.selectedTile = this.tiles[0];\n                this.selection.emit(this.selectedTile);\n            }\n            else if (this.tiles.length != activeTiles) {\n                const tmp = Math.round((this.scroll) / this.scrollAngle);\n                this.scroll = tmp * this.scrollAngle;\n                this.scroll = this.scroll > maxangle + minangle ? maxangle + minangle : this.scroll < minangle ? minangle : this.scroll;\n                if (this.scroll >= maxangle) {\n                    this.boundMaxReached();\n                }\n                if (this.scroll <= minangle) {\n                    this.boundMinReached();\n                }\n                let v = this.scroll;\n                let last = null;\n                for (let i = 0; i < this.tetas.length; i++) {\n                    const cur = Math.abs(this.tetas[i] - v);\n                    if (last === null || cur <= last) {\n                        last = cur;\n                        this.selectedTile = this.tiles[i];\n                        this.selection.emit(this.selectedTile);\n                    }\n                }\n            }\n            else {\n                this.log(maxangle + \" > \" + this.scroll + \" > \" + minangle);\n                const multipleTour = Math.round((this.scroll - 90) / 360);\n                let last = null;\n                let v = multipleTour === 0 ? this.scroll : Math.round(this.scroll / multipleTour);\n                for (let i = 0; i < this.tetas.length; i++) {\n                    const cur = Math.abs(this.tetas[i] - v);\n                    if (last === null || cur <= last) {\n                        last = cur;\n                        this.scroll = this.tetas[i];\n                        this.selectedTile = this.tiles[i];\n                        this.selection.emit(this.selectedTile);\n                    }\n                }\n            }\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            if (this.selector) {\n                this.selectedEvent.emit(this.selectedTile);\n            }\n        }\n    }\n    mouseLeave(e) {\n        if (this.grabbing) {\n            this.grabbing = false;\n            this.mouseUp(e);\n        }\n    }\n    mouseMove(e) {\n        if (this.grabbing && !this.isIosBrowser()) {\n            this.rotateBox(e);\n            e.stopPropagation();\n        }\n    }\n    panMoving(e) {\n        if (this.grabbing) {\n            const ev = e;\n            if (!e.srcEvent.movementX) {\n                this.scroll += this.scrollAngle * ev.overallVelocityX * 0.1;\n                this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            }\n            else {\n                this.rotateBox(e.srcEvent, e);\n            }\n        }\n    }\n    panEnd(e) {\n        this.grabbing = false;\n        this.mouseUp(e.srcEvent);\n    }\n    onmouseWheel(event) {\n        if (this.circularEffect) {\n            this.rotateBox(event);\n        }\n        else {\n            event.preventDefault();\n            event.wheelDelta > 0 ? this.scrolledLeft(Math.abs(event.wheelDelta), event.currentTarget) : this.scrolledRight(Math.abs(event.wheelDelta), event.currentTarget);\n        }\n    }\n    rotateBox(event, eParent) {\n        this.log(event);\n        if (event.movementX && this.circularEffect) {\n            this.scroll += this.scrollAngle * event.movementX * 0.01;\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n        }\n    }\n    isSameEventAndTarget(e) {\n        return e && this.currentEvent && this.currentEvent.type === e.type;\n    }\n    getDelta(e, field) {\n        return e && this.currentEvent ? e[field] - this.currentEvent[field] : 0;\n    }\n    rotate() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        if (this.scroll > maxangle) {\n            this.scroll = maxangle;\n            this.boundMaxReached();\n        }\n        else if (this.scroll < minangle) {\n            this.scroll = minangle;\n            this.boundMinReached();\n        }\n        else {\n            this.isBoundMax = false;\n            this.isBoundMin = false;\n        }\n        this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n    }\n    log(any) {\n        if (this.debug) {\n            console.log(any);\n        }\n    }\n    boundMaxReached() {\n        this.isBoundMax = true;\n        this.maxBound.emit(true);\n    }\n    boundMinReached() {\n        this.isBoundMin = true;\n        this.minBound.emit(true);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Tiles, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Tiles, isStandalone: true, selector: \"dia-tiles\", inputs: { tiles: \"tiles\", selector: \"selector\", autofill: \"autofill\", emptyTpl: \"emptyTpl\", tileTemplate: \"tileTemplate\", title: \"title\", maxTiles: \"maxTiles\", wheelSpace: \"wheelSpace\", autoCompute: \"autoCompute\", forceActive: \"forceActive\", circularEffect: \"circularEffect\", scroll: \"scroll\", pourcent: \"pourcent\", minDiametre: \"minDiametre\", maxDiametre: \"maxDiametre\", forcedDiametre: \"forcedDiametre\", debug: \"debug\" }, outputs: { hasLeft: \"hasLeft\", selection: \"selection\", hasClicked: \"hasClicked\", maxBound: \"maxBound\", minBound: \"minBound\" }, host: { listeners: { \"document:resize\": \"resetTunnel($event)\" } }, viewQueries: [{ propertyName: \"tunnel\", first: true, predicate: [\"scenariMask\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"hoster\", first: true, predicate: [\"hoster\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"scenariContainer\", first: true, predicate: [\"scenariContainer\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"tile\", predicate: [\"tile\"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\"\\n  [ngClass]=\\\"{circular:circularEffect, grabbing:grabbing, grab:!grabbing, hideComponent:circularEffect && !isCircularInitated}\\\"\\n  #container (window:resize)=\\\"resetTunnel()\\\">\\n  <div id=\\\"choices\\\" class=\\\"choices\\\" (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n    (panstart)=\\\"panStart($event)\\\" (pan)=\\\"panMoving($event)\\\" (panend)=\\\"panEnd($event)\\\" (mousemove)=\\\"mouseMove($event)\\\"\\n    (mousedown)=\\\"mouseDown($event)\\\" (mouseup)=\\\"mouseUp($event)\\\" (mouseleave)=\\\"mouseLeave($event)\\\">\\n    <div class=\\\"choicesMask\\\">\\n      <div class=\\\"TileSelection\\\">{{title}}</div>\\n      <div class=\\\"scenariContainer\\\" #scenariContainer>\\n        <div class=\\\"visibleMask\\\">\\n          <div class=\\\"scenariMask\\\" #scenariMask (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n            (swipeleft)=\\\"circularEffect? null:scrolledLeft($event)\\\"\\n            (swiperight)=\\\"circularEffect? null:scrolledRight($event)\\\">\\n            <ng-container *ngFor=\\\"let scenario of tiles; let i = index;\\\">\\n              <div *ngIf=\\\"!scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, animate:isCircularInitated, selected: scenario === selectedTile}\\\"\\n                #tile (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: scenario, itemIndex:i, carouselIndex:i, selected: scenario === selectedTile}\\\"></ng-container>\\n              </div>\\n              <div *ngIf=\\\"scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, emptyTile:scenario.empty}\\\" #tile\\n                (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"emptyTpl; context: {$implicit: scenario, selected: scenario === selectedTile, context: {$implicit: scenario, itemIndex:i, carouselIndex:i}}\\\"></ng-container>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"scrollerBox\\\" [ngClass]=\\\"{hideScroll:!active}\\\" #hoster (mousewheel)=\\\"onmouseWheel($event)\\\">\\n    <!--div class=\\\"box hide\\\" >\\n          <ng-container  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: tiles[0]}\\\"></ng-container>\\n      </div-->\\n    <dia-scroll class=\\\"scroller\\\" #scroller (scrolledLeft)=\\\"scrolledLeft($event)\\\" [scrollBuffer]=\\\"5\\\"\\n      (scrolledRight)=\\\"scrolledRight($event)\\\" [forced]=\\\"isMobile\\\" [vertical]=false></dia-scroll>\\n  </div>\\n</div>\", styles: [\":host{padding:0;margin:0}:host .container{display:flex;justify-content:center;align-items:center}:host .container.circular{width:100%}:host .container.circular.hideComponent{opacity:0}:host .container.circular.grab{cursor:grab}:host .container.circular.grabbing{cursor:grabbing}:host .container.circular.grabbing .scenariContainer{transition-duration:0ms;transition-delay:0ms}:host .cBox{position:absolute}:host animate{transition-duration:.5s;transition-delay:.5s}:host .box{position:relative;transition-duration:.5s;transition-delay:.5s}:host .box:hover{transform:scale(1.2);margin:2rem;position:relative;transition-duration:.5s;transition-delay:.5s}:host .scenariContainer{display:flex;position:relative;margin-bottom:2rem;transition-duration:.6s;transition-delay:.5s;justify-content:center;align-items:center}:host .scenariMask{transition-duration:.6s;display:flex;position:relative;justify-content:center;align-items:center}:host .scenarioBG{position:absolute;top:0%;left:0%;height:70%;width:100%}:host .scenarioBG img{width:100%;transition-duration:.6s;transition-delay:.5s;opacity:.4;-webkit-filter:grayscale(1);filter:grayscale(1)}:host .scenarioBG.color img{-webkit-filter:unset;filter:unset}:host .scenarioBG:hover img{transform:scale(1.2);opacity:.75}:host #choices.hoveringScenario{background-image:linear-gradient(45deg,#35353545,#15151545);top:70vh;height:70vh}:host .content{position:absolute;width:100%;height:100%;top:0}:host .title{position:relative;top:20%;width:80%;margin:auto;font-size:5rem;font-weight:700;transition-duration:.6s;transition-delay:.5s}:host .desc{position:relative;opacity:0;width:80%;top:70%;margin:auto;text-align:justify;transition-duration:.3s;transition-delay:.5s}:host .desc .text{width:60%}:host .actorImg{position:absolute;top:2rem;left:3rem;transition-duration:.6s;transition-delay:.5s}:host .actorImg img{transition-duration:.6s;transition-delay:.5s;border-radius:3rem;width:3rem;height:3rem;opacity:0}:host .actions{transition-duration:.6s;transition-delay:.5s;display:flex;position:absolute;right:-11.5rem;top:24%;flex-direction:column;opacity:0}:host .actions mat-icon{transition-duration:.6s;transition-delay:.5s;margin:1.5em 2em;transform:scale(2)}:host .actions mat-icon:hover{transform:scale(3)}:host .actions .act{cursor:pointer;padding:0 1em;margin:1rem 0;width:11.5rem;border:2px solid white}:host .actions .playBox{transition-duration:.6s;transition-delay:.3s;position:relative}:host .actions .favBox{transition-duration:.6s;transition-delay:.6s;position:relative;right:-200px}:host .actions .shareBox{transition-duration:.6s;transition-delay:.9s;position:relative;right:-200px}:host .TileSelection{width:100vw;display:flex;font-size:0rem;height:0px}:host .contentHovered .title{position:relative;top:35%}:host .contentHovered .actions{right:-11.5rem;opacity:1}:host .contentHovered .actions .act{background-color:#00000035;border-radius:1rem}:host .contentHovered .actions .act:hover{background-color:#00000075;border-radius:1rem;right:150px;transition-delay:0ms}:host .contentHovered .actions .playBox{right:100px}:host .contentHovered .actions .shareBox{right:100px}:host .contentHovered .actions .favBox{right:100px}:host .contentHovered .desc{opacity:1;top:40%;overflow:auto;-webkit-overflow-scrolling:touch}:host mat-icon{cursor:pointer;transition-duration:.6s;transition-delay:.5s}:host .scroller{z-index:600}:host .choices{display:flex;flex-direction:column;justify-content:flex-end;overflow:hidden;width:100%;transition-duration:.6s}:host .visibleMask{-webkit-overflow-scrolling:touch}@media only screen and (max-height: 800px),(max-width: 800px){:host .title{font-size:0rem}:host .contentHovered .title{font-size:2rem}:host #choices.hoveringScenario{top:90vh}}:host app-scroll ::ng-deep .container{z-index:600;width:3vw}:host app-scroll ::ng-deep .left{background-image:linear-gradient(90deg,black,transparent)}:host app-scroll ::ng-deep .right{background-image:linear-gradient(90deg,transparent,black)}:host app-scroll ::ng-deep .up{background-image:linear-gradient(180deg,black,transparent)}:host app-scroll ::ng-deep .bottom{background-image:linear-gradient(0deg,transparent,black)}:host .scrollerBox{transition-duration:.5s;position:absolute;left:0;width:100%;z-index:600;opacity:1}:host .hideScroll{z-index:-1;opacity:0}:host .hide{position:relative;left:-400px;opacity:0}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: Scroll, selector: \"dia-scroll\", inputs: [\"scrolledUpDisabled\", \"scrolledDownDisabled\", \"scrolledLeftDisabled\", \"scrolledRightDisabled\", \"scrollBuffer\", \"vertical\", \"horizontal\", \"forced\"], outputs: [\"scrolledUp\", \"scrolledDown\", \"scrolledLeft\", \"scrolledRight\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Tiles, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-tiles', standalone: true, imports: [CommonModule, Scroll], template: \"<div class=\\\"container\\\"\\n  [ngClass]=\\\"{circular:circularEffect, grabbing:grabbing, grab:!grabbing, hideComponent:circularEffect && !isCircularInitated}\\\"\\n  #container (window:resize)=\\\"resetTunnel()\\\">\\n  <div id=\\\"choices\\\" class=\\\"choices\\\" (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n    (panstart)=\\\"panStart($event)\\\" (pan)=\\\"panMoving($event)\\\" (panend)=\\\"panEnd($event)\\\" (mousemove)=\\\"mouseMove($event)\\\"\\n    (mousedown)=\\\"mouseDown($event)\\\" (mouseup)=\\\"mouseUp($event)\\\" (mouseleave)=\\\"mouseLeave($event)\\\">\\n    <div class=\\\"choicesMask\\\">\\n      <div class=\\\"TileSelection\\\">{{title}}</div>\\n      <div class=\\\"scenariContainer\\\" #scenariContainer>\\n        <div class=\\\"visibleMask\\\">\\n          <div class=\\\"scenariMask\\\" #scenariMask (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n            (swipeleft)=\\\"circularEffect? null:scrolledLeft($event)\\\"\\n            (swiperight)=\\\"circularEffect? null:scrolledRight($event)\\\">\\n            <ng-container *ngFor=\\\"let scenario of tiles; let i = index;\\\">\\n              <div *ngIf=\\\"!scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, animate:isCircularInitated, selected: scenario === selectedTile}\\\"\\n                #tile (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: scenario, itemIndex:i, carouselIndex:i, selected: scenario === selectedTile}\\\"></ng-container>\\n              </div>\\n              <div *ngIf=\\\"scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, emptyTile:scenario.empty}\\\" #tile\\n                (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"emptyTpl; context: {$implicit: scenario, selected: scenario === selectedTile, context: {$implicit: scenario, itemIndex:i, carouselIndex:i}}\\\"></ng-container>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"scrollerBox\\\" [ngClass]=\\\"{hideScroll:!active}\\\" #hoster (mousewheel)=\\\"onmouseWheel($event)\\\">\\n    <!--div class=\\\"box hide\\\" >\\n          <ng-container  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: tiles[0]}\\\"></ng-container>\\n      </div-->\\n    <dia-scroll class=\\\"scroller\\\" #scroller (scrolledLeft)=\\\"scrolledLeft($event)\\\" [scrollBuffer]=\\\"5\\\"\\n      (scrolledRight)=\\\"scrolledRight($event)\\\" [forced]=\\\"isMobile\\\" [vertical]=false></dia-scroll>\\n  </div>\\n</div>\", styles: [\":host{padding:0;margin:0}:host .container{display:flex;justify-content:center;align-items:center}:host .container.circular{width:100%}:host .container.circular.hideComponent{opacity:0}:host .container.circular.grab{cursor:grab}:host .container.circular.grabbing{cursor:grabbing}:host .container.circular.grabbing .scenariContainer{transition-duration:0ms;transition-delay:0ms}:host .cBox{position:absolute}:host animate{transition-duration:.5s;transition-delay:.5s}:host .box{position:relative;transition-duration:.5s;transition-delay:.5s}:host .box:hover{transform:scale(1.2);margin:2rem;position:relative;transition-duration:.5s;transition-delay:.5s}:host .scenariContainer{display:flex;position:relative;margin-bottom:2rem;transition-duration:.6s;transition-delay:.5s;justify-content:center;align-items:center}:host .scenariMask{transition-duration:.6s;display:flex;position:relative;justify-content:center;align-items:center}:host .scenarioBG{position:absolute;top:0%;left:0%;height:70%;width:100%}:host .scenarioBG img{width:100%;transition-duration:.6s;transition-delay:.5s;opacity:.4;-webkit-filter:grayscale(1);filter:grayscale(1)}:host .scenarioBG.color img{-webkit-filter:unset;filter:unset}:host .scenarioBG:hover img{transform:scale(1.2);opacity:.75}:host #choices.hoveringScenario{background-image:linear-gradient(45deg,#35353545,#15151545);top:70vh;height:70vh}:host .content{position:absolute;width:100%;height:100%;top:0}:host .title{position:relative;top:20%;width:80%;margin:auto;font-size:5rem;font-weight:700;transition-duration:.6s;transition-delay:.5s}:host .desc{position:relative;opacity:0;width:80%;top:70%;margin:auto;text-align:justify;transition-duration:.3s;transition-delay:.5s}:host .desc .text{width:60%}:host .actorImg{position:absolute;top:2rem;left:3rem;transition-duration:.6s;transition-delay:.5s}:host .actorImg img{transition-duration:.6s;transition-delay:.5s;border-radius:3rem;width:3rem;height:3rem;opacity:0}:host .actions{transition-duration:.6s;transition-delay:.5s;display:flex;position:absolute;right:-11.5rem;top:24%;flex-direction:column;opacity:0}:host .actions mat-icon{transition-duration:.6s;transition-delay:.5s;margin:1.5em 2em;transform:scale(2)}:host .actions mat-icon:hover{transform:scale(3)}:host .actions .act{cursor:pointer;padding:0 1em;margin:1rem 0;width:11.5rem;border:2px solid white}:host .actions .playBox{transition-duration:.6s;transition-delay:.3s;position:relative}:host .actions .favBox{transition-duration:.6s;transition-delay:.6s;position:relative;right:-200px}:host .actions .shareBox{transition-duration:.6s;transition-delay:.9s;position:relative;right:-200px}:host .TileSelection{width:100vw;display:flex;font-size:0rem;height:0px}:host .contentHovered .title{position:relative;top:35%}:host .contentHovered .actions{right:-11.5rem;opacity:1}:host .contentHovered .actions .act{background-color:#00000035;border-radius:1rem}:host .contentHovered .actions .act:hover{background-color:#00000075;border-radius:1rem;right:150px;transition-delay:0ms}:host .contentHovered .actions .playBox{right:100px}:host .contentHovered .actions .shareBox{right:100px}:host .contentHovered .actions .favBox{right:100px}:host .contentHovered .desc{opacity:1;top:40%;overflow:auto;-webkit-overflow-scrolling:touch}:host mat-icon{cursor:pointer;transition-duration:.6s;transition-delay:.5s}:host .scroller{z-index:600}:host .choices{display:flex;flex-direction:column;justify-content:flex-end;overflow:hidden;width:100%;transition-duration:.6s}:host .visibleMask{-webkit-overflow-scrolling:touch}@media only screen and (max-height: 800px),(max-width: 800px){:host .title{font-size:0rem}:host .contentHovered .title{font-size:2rem}:host #choices.hoveringScenario{top:90vh}}:host app-scroll ::ng-deep .container{z-index:600;width:3vw}:host app-scroll ::ng-deep .left{background-image:linear-gradient(90deg,black,transparent)}:host app-scroll ::ng-deep .right{background-image:linear-gradient(90deg,transparent,black)}:host app-scroll ::ng-deep .up{background-image:linear-gradient(180deg,black,transparent)}:host app-scroll ::ng-deep .bottom{background-image:linear-gradient(0deg,transparent,black)}:host .scrollerBox{transition-duration:.5s;position:absolute;left:0;width:100%;z-index:600;opacity:1}:host .hideScroll{z-index:-1;opacity:0}:host .hide{position:relative;left:-400px;opacity:0}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { tunnel: [{\n                type: ViewChild,\n                args: ['scenariMask', { read: ElementRef, static: true }]\n            }], hoster: [{\n                type: ViewChild,\n                args: ['hoster', { read: ElementRef, static: true }]\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller', { read: ElementRef, static: true }]\n            }], container: [{\n                type: ViewChild,\n                args: ['container', { read: ElementRef, static: true }]\n            }], scenariContainer: [{\n                type: ViewChild,\n                args: ['scenariContainer', { read: ElementRef, static: true }]\n            }], tile: [{\n                type: ViewChildren,\n                args: ['tile', { read: ElementRef }]\n            }], tiles: [{\n                type: Input\n            }], selector: [{\n                type: Input\n            }], autofill: [{\n                type: Input\n            }], emptyTpl: [{\n                type: Input\n            }], tileTemplate: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], maxTiles: [{\n                type: Input\n            }], wheelSpace: [{\n                type: Input\n            }], hasLeft: [{\n                type: Output\n            }], selection: [{\n                type: Output\n            }], hasClicked: [{\n                type: Output\n            }], maxBound: [{\n                type: Output\n            }], minBound: [{\n                type: Output\n            }], autoCompute: [{\n                type: Input\n            }], forceActive: [{\n                type: Input\n            }], circularEffect: [{\n                type: Input\n            }], scroll: [{\n                type: Input\n            }], pourcent: [{\n                type: Input\n            }], minDiametre: [{\n                type: Input\n            }], maxDiametre: [{\n                type: Input\n            }], forcedDiametre: [{\n                type: Input\n            }], debug: [{\n                type: Input\n            }], resetTunnel: [{\n                type: HostListener,\n                args: ['document:resize', ['$event']]\n            }] } });","originalLength":36714,"removedExports":[],"renderedExports":["Tiles"],"renderedLength":36383},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IFormatInput.js":{"code":"","originalLength":40,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/ITableState.js":{"code":"","originalLength":39,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IAdvancedCustom.js":{"code":"","originalLength":43,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IDossierItem.js":{"code":"","originalLength":40,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/lib/common/IFormGroupConfig.js":{"code":"","originalLength":44,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/public-api.js":{"code":"/*\n * Public API Surface of dia-utils-libs\n */","originalLength":887,"removedExports":[],"renderedExports":[],"renderedLength":46},"/Users/diazyrconseils/Documents/pro/Projets/repositories/sequoia/dia_utils_lib_v21/dia-utils-lib/dia-util-lib-demo/projects/dia-utils-libs/dist/tmp-esm2022/dia-utils-libs.js":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":120,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { NgModule, EventEmitter, forwardRef, Input, Output, ViewChild, Optional, Host, SkipSelf, Component, ViewEncapsulation, HostListener, Directive, ChangeDetectionStrategy, ElementRef, ViewChildren } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule, Validators, FormControl, NG_VALUE_ACCESSOR, FormGroup } from '@angular/forms';\nimport * as i2 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i3 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport * as i5$2 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2$1 from '@angular/material/datepicker';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport * as i5$1 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i1$1 from '@angular/material/core';\nimport { MAT_DATE_FORMATS, MatOptionModule } from '@angular/material/core';\nimport * as i4 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i4$1 from '@angular/cdk/text-field';\n\nclass DiaUtilsLibsModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, imports: [CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatIconModule,\n            MatDatepickerModule,\n            MatTooltipModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, imports: [CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            MatInputModule,\n            MatIconModule,\n            MatDatepickerModule,\n            MatTooltipModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DiaUtilsLibsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatInputModule,\n                        MatIconModule,\n                        MatDatepickerModule,\n                        MatTooltipModule\n                    ],\n                    exports: []\n                }]\n        }] });\n\nclass Dossier {\n    static service;\n    static amountFormatter;\n    static prefix = '';\n    linkParam;\n    type;\n    className;\n    onclick;\n    onchange;\n    title;\n    icon;\n    iconAction;\n    list;\n    custom;\n    model;\n    field;\n    data;\n    value;\n    isNumber;\n    isDecimal;\n    isDate;\n    minDate;\n    maxDate;\n    noLine;\n    minrows;\n    isRadio;\n    possibleValues;\n    hide;\n    suffix;\n    tooltip;\n    nbColumns;\n    maxLength;\n    minLength;\n    disableVisualHelp;\n    disabled;\n    required;\n    formGroupConfig;\n    customFormat;\n    advancedCustoms;\n    selectValues;\n    placeholder;\n    getErrorMsg;\n    // fix JIRA 1060\n    sizeColumn;\n    indexColumn;\n    countDown;\n    modifiable;\n    isTextarea;\n    customClass;\n    fill;\n    constructor(title, list, value) {\n        this.title = title;\n        this.list = list;\n        this.value = value;\n    }\n    static isDefined(val) {\n        return val !== null && val !== undefined;\n    }\n    static getEmptyDossier() {\n        return new Dossier('####', [], null);\n    }\n    static setByModel(title, model, field, custom) {\n        return Dossier.set(title, model[field], custom, model, field);\n    }\n    static set(title, value, custom, model, field) {\n        if (custom && custom.formGroupConfig) {\n            if (custom.formGroupConfig.validators && custom.formGroupConfig.validators.filter((_) => _ === Validators.required)) {\n                custom.required = true;\n            }\n            this.formBuild(value, custom.formGroupConfig);\n        }\n        if (value && typeof value !== 'string') {\n            value = value['libelle'] ? value['libelle'] : value;\n            if ((value).montant) {\n                value = (value).montant;\n                if ((value).devise) {\n                    custom =\n                        custom && typeof custom !== 'string'\n                            ? () => (custom.suffix = (value).devise)\n                            : custom;\n                }\n            }\n            value =\n                value && custom && custom.isDate && typeof value !== 'number'\n                    ? value.getTime()\n                    : value;\n            value =\n                value && typeof value === 'number' && (!custom || !custom.isDate)\n                    ? this.amountFormatter?.transform(value)\n                    : value;\n            // si aucun match trouvé on afiche une valeur vide\n            value =\n                value && typeof value !== 'string' && typeof value !== 'number'\n                    ? ''\n                    : value;\n        }\n        if (custom && typeof custom !== 'string') {\n            const toReturn = {\n                title: title, value: value, model: model,\n                field: field\n            };\n            Object.keys(custom).map((field, index) => {\n                toReturn[field] = custom[field];\n            });\n            return toReturn;\n        }\n        else if (custom) {\n            return {\n                title: title,\n                value: value,\n                model: model,\n                field: field,\n                suffix: this.service.instant(custom)\n                    ? this.service.instant(this.prefix + custom)\n                    : custom\n            };\n        }\n        else {\n            return {\n                title: title,\n                value: value,\n                model: model,\n                field: field\n            };\n        }\n    }\n    static build(title, list, multi, custom) {\n        const toReturn = {\n            value: null,\n            title: title,\n            list: multi\n                ? multi\n                : [\n                    {\n                        value: null,\n                        title: null,\n                        list: list\n                    }\n                ]\n        };\n        if (custom) {\n            Object.keys(custom).map((field, index) => {\n                toReturn[field] = custom[field];\n            });\n        }\n        return toReturn;\n    }\n    static formBuild(value, config) {\n        config.form.addControl(config.formName, new FormControl(value, config.validators, config.asyncValidators));\n    }\n    static bloc(title, list) {\n        return new Dossier(title, list, null);\n    }\n}\n\nclass ModelOption {\n    libelle;\n    value;\n    data;\n    constructor(lib, val, dat) {\n        this.libelle = lib;\n        this.value = val;\n        this.data = dat;\n    }\n    static setUniqueValue(lib) {\n        return new ModelOption(lib, lib, null);\n    }\n}\n\nclass Inputs {\n    el;\n    renderer;\n    controlContainer;\n    formatInput;\n    input;\n    computeWidth;\n    displayAsLabel = false;\n    label = '';\n    required = false;\n    format = '';\n    placeholder = '';\n    hidden = '';\n    description = '';\n    disabled = false;\n    isDatePicker = false;\n    readonlyInput = false;\n    readonly = false;\n    type = '';\n    min = 0;\n    max = 0;\n    minDate = 0;\n    maxDate = 0;\n    maxLength;\n    maxLengthFormat;\n    minLength;\n    unit = '';\n    name = '';\n    cancellable = false;\n    searching = false;\n    value = '';\n    customFormat;\n    icon;\n    errorMsg;\n    isError = false;\n    valueChange = new EventEmitter();\n    cancelValue = new EventEmitter();\n    formattedValue = '';\n    defaultControl = false;\n    matDatepicker;\n    dateChange = new EventEmitter();\n    visualHelpDisabled = false;\n    isDateControl = false;\n    currentControl;\n    formControl = new FormControl();\n    iconWasClicked = new EventEmitter();\n    wasDblClicked = new EventEmitter();\n    iconAction;\n    tooltipText = '';\n    onChange = (_) => { };\n    onTouched = (_) => { };\n    constructor(el, renderer, controlContainer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.controlContainer = controlContainer;\n    }\n    ngOnInit() {\n        if (this.formatInput && this.formatInput.nativeElement.readonly !== this.readonlyInput) {\n            this.formatInput.nativeElement.readonly = this.readonlyInput;\n        }\n        if (this.input && this.input.nativeElement.readonly !== this.readonlyInput) {\n            this.input.nativeElement.readonly = this.readonlyInput;\n        }\n        if (this.defaultControl) {\n            this.formControl = new FormControl(this.value);\n            if (this.input) {\n                this.input.nativeElement.formControl = this.formControl;\n            }\n            if (this.formatInput) {\n                this.formatInput.nativeElement.formControl = this.formControl;\n            }\n        }\n        if (this.controlContainer && (this.format || this.customFormat)) {\n            const form = this.controlContainer.control;\n            const lbl = this.el.nativeElement.getAttribute('formControlName');\n            if (form) {\n                const control = form.controls[lbl];\n            }\n        }\n    }\n    f_dateChange() {\n        this.dateChange.emit();\n    }\n    gets(obs) {\n        if (obs) {\n            return obs;\n        }\n        else {\n            return {};\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.value && (this.format || this.customFormat)) {\n            if (!((this.formattedValue + '').endsWith('.'))) {\n                this.formattedValue = this.transform(this.value);\n            }\n        }\n        if (this.controlContainer && this.el) {\n            let fname = this.el.nativeElement.getAttribute('formControlName');\n            fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\n            fname = fname ? fname : (this.input ? this.input.nativeElement.name : undefined);\n            const fgroupDirective = this.gets(this.controlContainer);\n            if (fgroupDirective && fgroupDirective.form) {\n                this.currentControl = fgroupDirective.form.controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.visualHelpDisabled && this.textOverflow()) {\n            this.tooltipText = this.value + '';\n        }\n        else {\n            this.tooltipText = '';\n        }\n    }\n    textOverflow() {\n        const currentWitdh = this.formatInput\n            ? this.formatInput.nativeElement.clientWidth\n            : this.input?.nativeElement.clientWidth;\n        return this.computeWidth && this.computeWidth.nativeElement.clientWidth > (currentWitdh || 0) + 5;\n    }\n    ngOnChanges(changes) {\n        if (this.label === 'Montant') {\n            //console.log(changes);\n        }\n        if ((this.format || this.customFormat) &&\n            changes['value'] &&\n            changes['value'].currentValue !== this.parse(this.formattedValue)) {\n            this.formattedValue = this.transform(changes['value'].currentValue);\n            if (this.formatInput) {\n                this.formatInput.nativeElement.value = this.formattedValue;\n            }\n        }\n    }\n    change(newValue) {\n        this.writeValue(newValue);\n        this.valueChange.emit(newValue);\n        this.onChange(this.value);\n        if ((this.format || this.customFormat) && this.formatInput) {\n            this.formatInput.nativeElement.value = this.formattedValue;\n        }\n    }\n    changeFormat(newValue) {\n        this.formattedValue = this.transform(newValue);\n        const offset = this.formattedValue.split(' ').length - 1;\n        if (offset && offset > 0 && this.maxLength) {\n            this.maxLengthFormat = this.maxLength + offset;\n        }\n        const unformattedValue = this.parse(this.formattedValue);\n        this.change(unformattedValue);\n    }\n    cancel(data) {\n        this.formattedValue = '';\n        this.value = '';\n        this.cancelValue.emit(data);\n    }\n    writeValue(value) {\n        this.value = value;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    transform(val) {\n        let valStr = '';\n        let arr;\n        if (this.format) {\n            switch (this.format) {\n                case 'siren':\n                    valStr = val + '';\n                    valStr = this.parse(valStr) + '';\n                    arr = valStr.split('');\n                    valStr = '';\n                    arr.map((c) => {\n                        valStr += c;\n                        if (valStr.replace(/ /g, '').length % 3 === 0 &&\n                            arr.length > valStr.replace(/ /g, '').length) {\n                            valStr += ' ';\n                        }\n                    });\n                    break;\n                case 'amount':\n                    let decPart = '';\n                    if (this.min && val < this.min) {\n                        val = this.min + '';\n                    }\n                    if (this.max && val > this.max) {\n                        val = this.max + '';\n                    }\n                    valStr = val + '';\n                    valStr = this.parse(valStr);\n                    if (valStr === '') {\n                        return '';\n                    }\n                    if (valStr.indexOf('.')) {\n                        decPart = valStr.split('.')[1];\n                        valStr = valStr.split('.')[0];\n                    }\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    arr = valStr.split('');\n                    valStr = '';\n                    arr.reverse().map((c) => {\n                        valStr += c;\n                        if (valStr.replace(/ /g, '').length % 3 === 0 &&\n                            arr.length > valStr.replace(/ /g, '').length) {\n                            valStr += ' ';\n                        }\n                    });\n                    valStr = valStr.split('').reverse().join('');\n                    if (decPart && decPart !== '') {\n                        valStr += '.' + decPart;\n                    }\n                    break;\n            }\n        }\n        else {\n            valStr = this.customFormat ? this.customFormat.transform(val) : val;\n        }\n        return valStr;\n    }\n    parse(val) {\n        let valStr = '';\n        if (this.format) {\n            switch (this.format) {\n                case 'siren':\n                    valStr = val + '';\n                    valStr = valStr.replace(/ /g, '');\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    break;\n                case 'amount':\n                    valStr = val + '';\n                    if (valStr.substring(valStr.length - 1, 1) === '.') {\n                        valStr = valStr.replace('.', '');\n                    }\n                    valStr = valStr.replace(/ /g, '');\n                    if (valStr === '') {\n                        return '';\n                    }\n                    let valNum = Number(valStr);\n                    if (this.min && valNum < this.min) {\n                        valNum = this.min;\n                    }\n                    if (this.max && valNum > this.max) {\n                        valNum = this.max;\n                    }\n                    valStr = valNum + '';\n                    if (this.maxLength && valStr.length > this.maxLength) {\n                        valStr = valStr.substring(0, this.maxLength);\n                    }\n                    break;\n            }\n        }\n        else {\n            valStr = this.customFormat ? this.customFormat.parse(val) : val;\n        }\n        return valStr;\n    }\n    iconClicked(e) {\n        this.iconWasClicked.emit(true);\n        if (this.iconAction) {\n            this.iconAction();\n        }\n    }\n    dblClicked(e) {\n        this.wasDblClicked.emit(true);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Inputs, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.ControlContainer, host: true, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Inputs, isStandalone: true, selector: \"dia-input\", inputs: { displayAsLabel: \"displayAsLabel\", label: \"label\", required: \"required\", format: \"format\", placeholder: \"placeholder\", hidden: \"hidden\", description: \"description\", disabled: \"disabled\", isDatePicker: \"isDatePicker\", readonlyInput: \"readonlyInput\", readonly: \"readonly\", type: \"type\", min: \"min\", max: \"max\", minDate: \"minDate\", maxDate: \"maxDate\", maxLength: \"maxLength\", minLength: \"minLength\", unit: \"unit\", name: \"name\", cancellable: \"cancellable\", searching: \"searching\", value: \"value\", customFormat: \"customFormat\", icon: \"icon\", errorMsg: \"errorMsg\", isError: \"isError\", defaultControl: \"defaultControl\", matDatepicker: \"matDatepicker\", visualHelpDisabled: \"visualHelpDisabled\", isDateControl: \"isDateControl\", formControl: \"formControl\", iconAction: \"iconAction\" }, outputs: { valueChange: \"valueChange\", cancelValue: \"cancelValue\", dateChange: \"dateChange\", iconWasClicked: \"iconWasClicked\", wasDblClicked: \"wasDblClicked\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Inputs)\n            }\n        ], viewQueries: [{ propertyName: \"formatInput\", first: true, predicate: [\"formatInput\"], descendants: true }, { propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"computeWidth\", first: true, predicate: [\"computeWidth\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<!--div *ngIf=\\\"label\\\" [innerHTML]=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\"></div-->\\n<div class=\\\"zone-description\\\" [ngClass]=\\\"{inputAsLabel:displayAsLabel}\\\" [matTooltip]=\\\"tooltipText\\\">\\n  <mat-form-field appearance=\\\"outline\\\" [ngClass]=\\\"{hidden: hidden,  datePickerInput:isDateControl}\\\" >\\n    <mat-label>{{ placeholder ? placeholder : label ? label : '                  ' }}</mat-label>\\n\\n    <input\\n      matInput\\n      #formatInput\\n      name=\\\"formatInput\\\"\\n      *ngIf=\\\"format || customFormat\\\"\\n      [attr.hidden]=\\\"hidden\\\"\\n      [ngModel]=\\\"formattedValue\\\"\\n      (keyup)=\\\"changeFormat($event.target)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n    <input\\n      matInput\\n      *ngIf=\\\"!defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n    <input\\n      matInput\\n      *ngIf=\\\"defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [required]=\\\"required||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n  <input\\n    matInput\\n    *ngIf=\\\"isDateControl\\\"\\n    #input\\n    [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n    [attr.name]=\\\"name ? name : 'input'\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"change($event)\\\"\\n    (blur)=\\\"onTouched($event)\\\"\\n    [attr.disabled]=\\\"disabled ? '' : null\\\"\\n    [attr.type]=\\\"type\\\"\\n    [min]=\\\"minDate\\\"\\n    [max]=\\\"maxDate\\\"\\n    [required]=\\\"required||false\\\"\\n    [readonly]=\\\"readonly||false\\\"\\n    autocomplete=\\\"off\\\"\\n    (dateChange)=\\\"f_dateChange()\\\"\\n  />\\n    <mat-icon class=\\\"clickable\\\" *ngIf=\\\"cancellable && value\\\" (click)=\\\"cancel($event)\\\" matSuffix\\n      >highlight_off</mat-icon>\\n    <mat-icon *ngIf=\\\"searching && !value\\\" matSuffix>search</mat-icon>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n      unit\\n    }}</span>\\n    <div\\n      *ngIf=\\\"description\\\"\\n      class=\\\"description\\\"\\n      [innerHTML]=\\\"description\\\"\\n    ></div>\\n    <ng-content></ng-content>\\n  </mat-form-field>\\n</div>\\n<div id=\\\"hidden\\\" #computeWidth>\\n    {{value}}\\n  </div>\\n\", styles: [\"\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: [\"matTextSuffix\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Inputs, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-input', standalone: true, imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Inputs)\n                        }\n                    ], template: \"<!--div *ngIf=\\\"label\\\" [innerHTML]=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\"></div-->\\n<div class=\\\"zone-description\\\" [ngClass]=\\\"{inputAsLabel:displayAsLabel}\\\" [matTooltip]=\\\"tooltipText\\\">\\n  <mat-form-field appearance=\\\"outline\\\" [ngClass]=\\\"{hidden: hidden,  datePickerInput:isDateControl}\\\" >\\n    <mat-label>{{ placeholder ? placeholder : label ? label : '                  ' }}</mat-label>\\n\\n    <input\\n      matInput\\n      #formatInput\\n      name=\\\"formatInput\\\"\\n      *ngIf=\\\"format || customFormat\\\"\\n      [attr.hidden]=\\\"hidden\\\"\\n      [ngModel]=\\\"formattedValue\\\"\\n      (keyup)=\\\"changeFormat($event.target)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n    <input\\n      matInput\\n      *ngIf=\\\"!defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n    <input\\n      matInput\\n      *ngIf=\\\"defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [required]=\\\"required||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n  <input\\n    matInput\\n    *ngIf=\\\"isDateControl\\\"\\n    #input\\n    [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n    [attr.name]=\\\"name ? name : 'input'\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"change($event)\\\"\\n    (blur)=\\\"onTouched($event)\\\"\\n    [attr.disabled]=\\\"disabled ? '' : null\\\"\\n    [attr.type]=\\\"type\\\"\\n    [min]=\\\"minDate\\\"\\n    [max]=\\\"maxDate\\\"\\n    [required]=\\\"required||false\\\"\\n    [readonly]=\\\"readonly||false\\\"\\n    autocomplete=\\\"off\\\"\\n    (dateChange)=\\\"f_dateChange()\\\"\\n  />\\n    <mat-icon class=\\\"clickable\\\" *ngIf=\\\"cancellable && value\\\" (click)=\\\"cancel($event)\\\" matSuffix\\n      >highlight_off</mat-icon>\\n    <mat-icon *ngIf=\\\"searching && !value\\\" matSuffix>search</mat-icon>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n      unit\\n    }}</span>\\n    <div\\n      *ngIf=\\\"description\\\"\\n      class=\\\"description\\\"\\n      [innerHTML]=\\\"description\\\"\\n    ></div>\\n    <ng-content></ng-content>\\n  </mat-form-field>\\n</div>\\n<div id=\\\"hidden\\\" #computeWidth>\\n    {{value}}\\n  </div>\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { formatInput: [{\n                type: ViewChild,\n                args: ['formatInput', { static: false }]\n            }], input: [{\n                type: ViewChild,\n                args: ['input', { static: false }]\n            }], computeWidth: [{\n                type: ViewChild,\n                args: ['computeWidth', { static: false }]\n            }], displayAsLabel: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], hidden: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], isDatePicker: [{\n                type: Input\n            }], readonlyInput: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], minLength: [{\n                type: Input\n            }], unit: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], cancellable: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], customFormat: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], errorMsg: [{\n                type: Input\n            }], isError: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], cancelValue: [{\n                type: Output\n            }], defaultControl: [{\n                type: Input\n            }], matDatepicker: [{\n                type: Input\n            }], dateChange: [{\n                type: Output\n            }], visualHelpDisabled: [{\n                type: Input\n            }], isDateControl: [{\n                type: Input\n            }], formControl: [{\n                type: Input\n            }], iconWasClicked: [{\n                type: Output\n            }], wasDblClicked: [{\n                type: Output\n            }], iconAction: [{\n                type: Input\n            }] } });\n\nclass InputDatePicker {\n    dateAdapter;\n    label = '';\n    customDatePicker = false;\n    placeholder = 'Date';\n    minDate;\n    maxDate;\n    dateChange = new EventEmitter();\n    popupVisible = false;\n    formControlDate = new FormControl();\n    // Warning localDate via l'input date est la vraie valeur prise en compte pour la date\n    localDate;\n    disabledf = false;\n    onChanged = (_) => { };\n    onTouched = (_) => { };\n    //value n'est pas la valeur utilisé par le composant\n    value;\n    valueChange = new EventEmitter();\n    required = false;\n    constructor(dateAdapter) {\n        this.dateAdapter = dateAdapter;\n        dateAdapter.setLocale('fr');\n    }\n    ngOnInit() {\n        if (this.required) {\n            this.formControlDate.setValidators(Validators.required);\n        }\n    }\n    ngOnChanges(changes) {\n        // Fix JIRA 848\n        if (changes['value'] && changes['value'].currentValue === undefined) {\n            this.formControlDate.reset();\n        }\n        if (changes['value'] && changes['value'].currentValue) {\n            this.formControlDate.reset();\n        }\n    }\n    writeValue(obj) {\n        this.value = obj;\n        this.date = this.value; // ? this.value.getTime() : this.value;\n    }\n    registerOnChange(fn) {\n        this.onChanged = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    set date(date) {\n        if (date !== null && date !== undefined) {\n            this.localDate = new Date(date);\n        }\n        else {\n            delete this.localDate;\n        }\n        this.formControlDate = new FormControl(this.localDate);\n    }\n    get date() {\n        return this.localDate;\n    }\n    set disabled(disabled) {\n        this.disabledf = disabled;\n        if (this.disabledf) {\n            this.formControlDate.disable();\n        }\n        else {\n            this.formControlDate.enable();\n        }\n    }\n    get disabled() {\n        return this.disabledf;\n    }\n    // détection de changement et renvoi automatique de la nouvelle valeur.\n    onChange() {\n        if (this.formControlDate.value === null) {\n            delete this.localDate;\n        }\n        else {\n            this.localDate = new Date(this.formControlDate.value);\n        }\n        this.writeValue(this.localDate);\n        this.dateChange.emit(this.localDate);\n        this.onChanged(this.value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputDatePicker, deps: [{ token: i1$1.DateAdapter }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: InputDatePicker, isStandalone: true, selector: \"dia-input-date-picker\", inputs: { label: \"label\", customDatePicker: \"customDatePicker\", placeholder: \"placeholder\", minDate: \"minDate\", maxDate: \"maxDate\", value: \"value\", required: \"required\", date: \"date\", disabled: \"disabled\" }, outputs: { dateChange: \"dateChange\", valueChange: \"valueChange\" }, providers: [\n            /*{\n              provide: DateAdapter,\n              useClass: MomentDateAdapter,\n              deps: [MAT_DATE_LOCALE]\n            },*/\n            { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FORMATS },\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => InputDatePicker),\n            }\n        ], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\" (click)=\\\"onTouched()\\\">\\n    <!-- mat-form-field appearance=\\\"outline\\\" (click)=\\\"picker.open()\\\"-->\\n    <div (click)=\\\"picker.open()\\\">\\n      <!-- <mat-label\\n        *ngIf=\\\"label\\\"\\n        [innerHTML]=\\\"label\\\"\\n        [ngClass]=\\\"['formlabel']\\\"\\n      ></mat-label> -->\\n      <dia-input\\n        [isDateControl]=\\\"true\\\"\\n        [required]=\\\"required\\\"\\n        [matDatepicker]=\\\"picker\\\"\\n        [minDate]=\\\"minDate?.getTime()||0\\\"\\n        [maxDate]=\\\"maxDate?.getTime()||0\\\"\\n        [placeholder]=\\\"placeholder\\\"\\n        [formControl]=\\\"formControlDate\\\"\\n        (dateChange)=\\\"onChange()\\\"\\n        [icon]=\\\"'calendar_today'\\\"\\n        [visualHelpDisabled]=\\\"true\\\"\\n      >\\n      </dia-input>\\n     <!--  <mat-icon matSuffix>calendar_today</mat-icon> -->\\n      <mat-datepicker\\n        #picker\\n        (closed)=\\\"popupVisible = false\\\"\\n        (opened)=\\\"popupVisible = true\\\"\\n      ></mat-datepicker>\\n    <!--/mat-form-field-->\\n    </div>\\n  </div>\\n  \", styles: [\"mat-datepicker-content{margin-top:16px}:host{display:flex;align-items:center}input:focus{-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}:not([error=false])[error] .button{border-color:red}.button{background-color:#eee;border:solid 1px #e6e6e6;height:56px;line-height:56px;padding:0 1px 0 8px;color:rgba(#939598,.8);font-size:16px;box-sizing:border-box;cursor:pointer}.button.active{color:#162d46}.button.on-focus{box-shadow:0 5px 10px #0d476533;border:solid 1px gold}.button .flex-1{flex:1}.button>input{border:none;width:11.22rem;padding:0;color:#000}.button>input:focus{box-shadow:none}.button>i{margin-left:8px}.mat-calendar-body-selected{background-color:gold}\\n\"], dependencies: [{ kind: \"component\", type: Inputs, selector: \"dia-input\", inputs: [\"displayAsLabel\", \"label\", \"required\", \"format\", \"placeholder\", \"hidden\", \"description\", \"disabled\", \"isDatePicker\", \"readonlyInput\", \"readonly\", \"type\", \"min\", \"max\", \"minDate\", \"maxDate\", \"maxLength\", \"minLength\", \"unit\", \"name\", \"cancellable\", \"searching\", \"value\", \"customFormat\", \"icon\", \"errorMsg\", \"isError\", \"defaultControl\", \"matDatepicker\", \"visualHelpDisabled\", \"isDateControl\", \"formControl\", \"iconAction\"], outputs: [\"valueChange\", \"cancelValue\", \"dateChange\", \"iconWasClicked\", \"wasDblClicked\"] }, { kind: \"ngmodule\", type: MatDatepickerModule }, { kind: \"component\", type: i2$1.MatDatepicker, selector: \"mat-datepicker\", exportAs: [\"matDatepicker\"] }, { kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"ngmodule\", type: MatIconModule }, { kind: \"ngmodule\", type: CommonModule }], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputDatePicker, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-input-date-picker', imports: [Inputs, MatDatepickerModule, MatFormFieldModule, MatInputModule, MatIconModule, CommonModule], providers: [\n                        /*{\n                          provide: DateAdapter,\n                          useClass: MomentDateAdapter,\n                          deps: [MAT_DATE_LOCALE]\n                        },*/\n                        { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FORMATS },\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => InputDatePicker),\n                        }\n                    ], encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"container\\\" (click)=\\\"onTouched()\\\">\\n    <!-- mat-form-field appearance=\\\"outline\\\" (click)=\\\"picker.open()\\\"-->\\n    <div (click)=\\\"picker.open()\\\">\\n      <!-- <mat-label\\n        *ngIf=\\\"label\\\"\\n        [innerHTML]=\\\"label\\\"\\n        [ngClass]=\\\"['formlabel']\\\"\\n      ></mat-label> -->\\n      <dia-input\\n        [isDateControl]=\\\"true\\\"\\n        [required]=\\\"required\\\"\\n        [matDatepicker]=\\\"picker\\\"\\n        [minDate]=\\\"minDate?.getTime()||0\\\"\\n        [maxDate]=\\\"maxDate?.getTime()||0\\\"\\n        [placeholder]=\\\"placeholder\\\"\\n        [formControl]=\\\"formControlDate\\\"\\n        (dateChange)=\\\"onChange()\\\"\\n        [icon]=\\\"'calendar_today'\\\"\\n        [visualHelpDisabled]=\\\"true\\\"\\n      >\\n      </dia-input>\\n     <!--  <mat-icon matSuffix>calendar_today</mat-icon> -->\\n      <mat-datepicker\\n        #picker\\n        (closed)=\\\"popupVisible = false\\\"\\n        (opened)=\\\"popupVisible = true\\\"\\n      ></mat-datepicker>\\n    <!--/mat-form-field-->\\n    </div>\\n  </div>\\n  \", styles: [\"mat-datepicker-content{margin-top:16px}:host{display:flex;align-items:center}input:focus{-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}:not([error=false])[error] .button{border-color:red}.button{background-color:#eee;border:solid 1px #e6e6e6;height:56px;line-height:56px;padding:0 1px 0 8px;color:rgba(#939598,.8);font-size:16px;box-sizing:border-box;cursor:pointer}.button.active{color:#162d46}.button.on-focus{box-shadow:0 5px 10px #0d476533;border:solid 1px gold}.button .flex-1{flex:1}.button>input{border:none;width:11.22rem;padding:0;color:#000}.button>input:focus{box-shadow:none}.button>i{margin-left:8px}.mat-calendar-body-selected{background-color:gold}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1$1.DateAdapter }], propDecorators: { label: [{\n                type: Input\n            }], customDatePicker: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], minDate: [{\n                type: Input\n            }], maxDate: [{\n                type: Input\n            }], dateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], required: [{\n                type: Input\n            }], date: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\nclass IsNumericDirective {\n    el;\n    renderer;\n    regExIsNum = new RegExp('^[0-9]d{0,2}$');\n    regExIsNumber = new RegExp('^[0-9]*$');\n    regExIsAlphabet = new RegExp('[A-Za-z]');\n    component;\n    nextValue = '';\n    isDecimal = false;\n    disable = false;\n    isControl = false;\n    appIsNumeric = '';\n    constructor(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n    }\n    onkeyup($e) {\n        if (!this.disable) {\n            if (!this.regExIsNum.test($e.key) && !this.isControl) {\n                //console.log($e.key);\n                if (($e.key.length === 1 ||\n                    $e.key === 'Multiply' ||\n                    $e.key === 'Subtract' ||\n                    $e.key === 'Add' ||\n                    $e.key === 'Divide') &&\n                    !($e.key === '.' && this.isDecimal)) {\n                    $e.preventDefault();\n                }\n            }\n            if ($e.key !== 'Control' && this.isControl) {\n                this.isControl = false;\n            }\n            if ($e.key === 'Control') {\n                this.isControl = true;\n                // this.nextValue = document.execCommand('Paste');\n            }\n        }\n    }\n    blockPaste(e) {\n        const val = e.clipboardData.getData('Text').split(' ').join('');\n        if (!this.disable && e.clipboardData && !this.regExIsNumber.test(val)) {\n            e.preventDefault();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: IsNumericDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.1.7\", type: IsNumericDirective, isStandalone: true, selector: \"[appIsNumeric]\", inputs: { isDecimal: \"isDecimal\", disable: \"disable\", appIsNumeric: \"appIsNumeric\" }, host: { listeners: { \"keydown\": \"onkeyup($event)\", \"paste\": \"blockPaste($event)\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: IsNumericDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[appIsNumeric]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }], propDecorators: { isDecimal: [{\n                type: Input\n            }], disable: [{\n                type: Input\n            }], appIsNumeric: [{\n                type: Input\n            }], onkeyup: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], blockPaste: [{\n                type: HostListener,\n                args: ['paste', ['$event']]\n            }] } });\n\nclass ClickedOutsideDirective {\n    el;\n    looseCheck = false;\n    trackEphemeraElement = false;\n    hasleftFor = 0;\n    hasLeft = new EventEmitter();\n    clickedOutside = new EventEmitter();\n    blur = new EventEmitter();\n    lastElement;\n    componentList = [];\n    compList = [];\n    compListChange = new EventEmitter();\n    mouseIsOver = false;\n    mouseleavedAlready = false;\n    overSuspended = false;\n    debug = false;\n    index = 0;\n    constructor(el) {\n        this.el = el;\n    }\n    ngAfterViewInit() {\n        this.componentList.push(this.el);\n    }\n    onclick(targetElement) {\n        if (!this.contains(targetElement) && (this.isInDocument(targetElement) || this.looseCheck)) {\n            this.clickedOutside.emit({ target: targetElement, src: this.el.nativeElement });\n            if ((this.lastElement && this.contains(this.lastElement)) || (this.trackEphemeraElement && this.lastElement && this.lastElement.usedTobePartOf)) {\n                this.blur.emit({ target: targetElement, src: this.el.nativeElement, last: this.lastElement });\n            }\n        }\n        this.lastElement = targetElement;\n    }\n    isInDocument(targetElement) {\n        return targetElement === document.body ? false : document.body.contains(targetElement);\n    }\n    contains(el) {\n        let contains = false;\n        this.componentList.forEach(it => {\n            if (it.nativeElement.contains(el))\n                contains = true;\n        });\n        this.compList.forEach(it => {\n            if (it.nativeElement.contains(el))\n                contains = true;\n        });\n        if (this.trackEphemeraElement && contains) {\n            el.usedTobePartOf = true;\n        }\n        if (this.debug) {\n            console.log(el.className + ': fait' + (contains ? '' : 'pas') + 'parti');\n        }\n        return contains;\n    }\n    onmouseover(el) {\n        this.mouseIsOver = true;\n    }\n    onmouseleave(el) {\n        if (this.hasleftFor) {\n            if (this.mouseleavedAlready && !this.mouseIsOver && !this.overSuspended) {\n                this.hasLeft.emit(el);\n            }\n            else if (!this.mouseleavedAlready) {\n                setTimeout(() => {\n                    this.onmouseleave();\n                }, this.hasleftFor);\n                this.mouseleavedAlready = true;\n                this.mouseIsOver = false;\n                return;\n            }\n        }\n        this.mouseleavedAlready = false;\n        this.mouseIsOver = false;\n    }\n    suspendOverDetection() {\n        this.mouseIsOver = true;\n        this.overSuspended = true;\n    }\n    resumeOverDetection() {\n        this.overSuspended = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: ClickedOutsideDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.1.7\", type: ClickedOutsideDirective, isStandalone: true, selector: \"[appClickedOutside]\", inputs: { looseCheck: \"looseCheck\", trackEphemeraElement: \"trackEphemeraElement\", hasleftFor: \"hasleftFor\", compList: \"compList\", debug: \"debug\" }, outputs: { hasLeft: \"hasLeft\", clickedOutside: \"clickedOutside\", blur: \"blur\", compListChange: \"compListChange\" }, host: { listeners: { \"document:click\": \"onclick($event.target)\", \"mousemove\": \"onmouseover($event.target)\", \"mouseleave\": \"onmouseleave($event.target)\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: ClickedOutsideDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[appClickedOutside]'\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { looseCheck: [{\n                type: Input\n            }], trackEphemeraElement: [{\n                type: Input\n            }], hasleftFor: [{\n                type: Input\n            }], hasLeft: [{\n                type: Output\n            }], clickedOutside: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }], compList: [{\n                type: Input\n            }], compListChange: [{\n                type: Output\n            }], debug: [{\n                type: Input\n            }], onclick: [{\n                type: HostListener,\n                args: ['document:click', ['$event.target']]\n            }], onmouseover: [{\n                type: HostListener,\n                args: ['mousemove', ['$event.target']]\n            }], onmouseleave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }] } });\n\nclass Select {\n    controlContainer;\n    el;\n    value = null;\n    required = false;\n    defaultValue = true;\n    fixPlaceholder = false;\n    values = [];\n    forced = [];\n    list = [];\n    placeholder = '';\n    disablePlaceHolder = true;\n    label = '';\n    description = '';\n    multiple = false;\n    defaultSort = true;\n    selectedValue = '';\n    disabled = false;\n    direction = '';\n    preset = null;\n    tooltip = false;\n    tooltipValue = '';\n    autoClosedAfter = 0;\n    valueChange = new EventEmitter();\n    valuesChange = new EventEmitter();\n    beenForced = new EventEmitter();\n    formField;\n    select;\n    floatLabel = 'auto';\n    currentControl = undefined;\n    isBeingForced = false;\n    onChange = (_) => { };\n    onTouched = (_) => { };\n    translate = null;\n    isAppleBrowser = false;\n    constructor(controlContainer, el) {\n        this.controlContainer = controlContainer;\n        this.el = el;\n    }\n    ngAfterViewInit() {\n        this.isAppleBrowser = this.isAppleBrowsers();\n    }\n    ngOnInit() { }\n    isAppleBrowsers() {\n        if (typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    gets(obs) {\n        if (obs) {\n            return obs;\n        }\n        else {\n            return {};\n        }\n    }\n    ngAfterViewChecked() {\n        if (this.controlContainer && this.el) {\n            const fname = this.el.nativeElement.getAttribute('formControlName');\n            const fgroupDirective = this.gets(this.controlContainer);\n            if (fgroupDirective && fgroupDirective.form) {\n                this.currentControl = fgroupDirective.form.controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['fixPlaceholder'] && changes['fixPlaceholder'].currentValue) {\n            this.floatLabel = this.fixPlaceholder ? 'always' : 'auto';\n        }\n        if (changes['list'] && changes['list'].currentValue) {\n            if (this.list) {\n                if (this.list.length > 0) {\n                    this.list.map(value => {\n                        if (value.libelle) {\n                            value.libelle = this.translate ? this.translate.instant(value.libelle) : value.libelle;\n                        }\n                    });\n                    if (this.defaultSort) {\n                        this.list = this.list.sort((a, b) => a.libelle < b.libelle ? -1 : a.libelle > b.libelle ? 1 : 0);\n                    }\n                }\n            }\n            if (this.list) {\n                if (this.list.length > 0 &&\n                    this.preset &&\n                    (!this.value || !this.getListValue(this.value))) {\n                    this.onUpdateValue(this.getPresetValue());\n                    this.onTouched(true);\n                }\n            }\n        }\n        if (changes['value'] && this.getListValue(changes['value'].currentValue)) {\n            this.value = this.getListValue(changes['value'].currentValue);\n        }\n        if (changes['forced']) {\n            this.isBeingForced = true;\n            this.resetMultiple();\n            if (this.forced) {\n                this.values = this.forced.map(it => this.getListValue(it)).filter((it) => !!it);\n            }\n            else {\n                this.values = [];\n            }\n            this.valuesChange.emit(this.values);\n            this.beenForced.emit(this.values);\n            this.onUpdateValue(this.values);\n            this.isBeingForced = false;\n        }\n        if (changes['forced'] && !changes['forced'].currentValue) {\n            // Optionally reset selection\n        }\n    }\n    resetMultiple() {\n        if (this.select && this.select.options) {\n            this.select.options.forEach(it => {\n                it.deselect();\n            });\n        }\n    }\n    getListValue(val) {\n        return this.isValInList(val, this.list);\n    }\n    isAlreadySelected(val) {\n        return this.isValInList(val, this.values);\n    }\n    isValInList(val, list) {\n        if (!val || !list) {\n            return null;\n        }\n        const res = list.find(it => (!val.value && !it.value && val === it) || (val.value && it.value && val.value === it.value) || (val.value && it.value && val.libelle === it.libelle));\n        return res ? res : null;\n    }\n    getPresetValue() {\n        if (!this.list)\n            return null;\n        const res = this.list.find(it => this.preset === it.value || this.preset === it.libelle);\n        return res ? res : this.list[0];\n    }\n    onUpdateValue(item) {\n        this.value = item;\n        if (this.tooltip && this.value && this.value.libelle) {\n            this.tooltipValue = this.value.libelle;\n        }\n        this.onChange(item);\n        this.valueChange.emit(item);\n    }\n    getPlaceHolder() {\n        if (this.disablePlaceHolder &&\n            this.value !== null &&\n            this.value !== undefined &&\n            !this.multiple) {\n            return '';\n        }\n        else {\n            return this.placeholder;\n        }\n    }\n    writeValue(value) {\n        if (!value) {\n            this.resetMultiple();\n        }\n        if (this.multiple && value) {\n            this.values = this.values ? this.values : [];\n            if (!this.isAlreadySelected(value)) {\n                this.values.push(value);\n            }\n            this.valuesChange.emit(this.values);\n            this.onUpdateValue(this.values);\n        }\n        if (this.value && !this.multiple) {\n            this.value = value;\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    itemSelected(e, item) {\n        if (e.source.selected) {\n            this.writeValue(item);\n        }\n        else {\n            if (this.values) {\n                this.values = this.values.filter(it => it.libelle !== item.libelle);\n            }\n            this.valuesChange.emit(this.values);\n            this.onUpdateValue(item);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Select, deps: [{ token: i1.ControlContainer, host: true, optional: true, skipSelf: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Select, isStandalone: true, selector: \"dia-select\", inputs: { value: \"value\", required: \"required\", defaultValue: \"defaultValue\", fixPlaceholder: \"fixPlaceholder\", values: \"values\", forced: \"forced\", list: \"list\", placeholder: \"placeholder\", disablePlaceHolder: \"disablePlaceHolder\", label: \"label\", description: \"description\", multiple: \"multiple\", defaultSort: \"defaultSort\", selectedValue: \"selectedValue\", disabled: \"disabled\", direction: \"direction\", preset: \"preset\", tooltip: \"tooltip\", autoClosedAfter: \"autoClosedAfter\", translate: \"translate\" }, outputs: { valueChange: \"valueChange\", valuesChange: \"valuesChange\", beenForced: \"beenForced\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Select)\n            }\n        ], viewQueries: [{ propertyName: \"formField\", first: true, predicate: [\"formField\"], descendants: true, static: true }, { propertyName: \"select\", first: true, predicate: [\"select\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"zone-select\\\" appClickedOutside [hasleftFor]=\\\"autoClosedAfter\\\" (hasLeft)=\\\"select?.close()\\\" [matTooltip]=\\\"tooltipValue\\\">\\n  <div class=\\\"zone-description\\\">\\n    <mat-form-field #formField appearance=\\\"outline\\\" [floatLabel]=\\\"floatLabel\\\">\\n      <mat-label *ngIf=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\">{{label}}</mat-label>\\n      <mat-label class=\\\"my-class-name\\\" *ngIf=\\\"fixPlaceholder\\\">{{getPlaceHolder()}}</mat-label>\\n      <mat-select *ngIf=\\\"multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [multiple]=\\\"multiple\\\" [value]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" (onSelectionChange)=\\\"itemSelected($event, topping)\\\">{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n      <mat-select *ngIf=\\\"!multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [(value)]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngIf=\\\"defaultValue\\\" class=\\\"defaultValue\\\"></mat-option>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" >{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"mat-form-field{width:100%}.mat-mdc-option.mdc-list-item{background-color:#fff}.mat-mdc-option.mdc-list-item:hover{background-color:gray}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:gray}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"ngmodule\", type: MatSelectModule }, { kind: \"component\", type: i4.MatSelect, selector: \"mat-select\", inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\", \"canSelectNullableOptions\"], outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i4.MatOption, selector: \"mat-option\", inputs: [\"value\", \"id\", \"disabled\"], outputs: [\"onSelectionChange\"], exportAs: [\"matOption\"] }, { kind: \"ngmodule\", type: MatOptionModule }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }, { kind: \"directive\", type: ClickedOutsideDirective, selector: \"[appClickedOutside]\", inputs: [\"looseCheck\", \"trackEphemeraElement\", \"hasleftFor\", \"compList\", \"debug\"], outputs: [\"hasLeft\", \"clickedOutside\", \"blur\", \"compListChange\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Select, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-select', standalone: true, imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        MatFormFieldModule,\n                        MatSelectModule,\n                        MatOptionModule,\n                        MatTooltipModule,\n                        ClickedOutsideDirective\n                    ], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Select)\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.Emulated, template: \"<div class=\\\"zone-select\\\" appClickedOutside [hasleftFor]=\\\"autoClosedAfter\\\" (hasLeft)=\\\"select?.close()\\\" [matTooltip]=\\\"tooltipValue\\\">\\n  <div class=\\\"zone-description\\\">\\n    <mat-form-field #formField appearance=\\\"outline\\\" [floatLabel]=\\\"floatLabel\\\">\\n      <mat-label *ngIf=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\">{{label}}</mat-label>\\n      <mat-label class=\\\"my-class-name\\\" *ngIf=\\\"fixPlaceholder\\\">{{getPlaceHolder()}}</mat-label>\\n      <mat-select *ngIf=\\\"multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [multiple]=\\\"multiple\\\" [value]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" (onSelectionChange)=\\\"itemSelected($event, topping)\\\">{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n      <mat-select *ngIf=\\\"!multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [(value)]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngIf=\\\"defaultValue\\\" class=\\\"defaultValue\\\"></mat-option>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" >{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\"mat-form-field{width:100%}.mat-mdc-option.mdc-list-item{background-color:#fff}.mat-mdc-option.mdc-list-item:hover{background-color:gray}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:gray}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ElementRef }], propDecorators: { value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], defaultValue: [{\n                type: Input\n            }], fixPlaceholder: [{\n                type: Input\n            }], values: [{\n                type: Input\n            }], forced: [{\n                type: Input\n            }], list: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disablePlaceHolder: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], defaultSort: [{\n                type: Input\n            }], selectedValue: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], preset: [{\n                type: Input\n            }], tooltip: [{\n                type: Input\n            }], autoClosedAfter: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], valuesChange: [{\n                type: Output\n            }], beenForced: [{\n                type: Output\n            }], formField: [{\n                type: ViewChild,\n                args: ['formField', { static: true }]\n            }], select: [{\n                type: ViewChild,\n                args: ['select', { static: false }]\n            }], translate: [{\n                type: Input\n            }] } });\n\nclass Textarea {\n    el;\n    controlContainer;\n    input;\n    label = '';\n    unit;\n    placeholder;\n    description;\n    value;\n    readonly;\n    innerHTML;\n    isTextArea = true;\n    valueChange = new EventEmitter();\n    maxLength;\n    minrows;\n    required;\n    name;\n    disabled;\n    defaultControl;\n    customFormat;\n    formControlName = '';\n    formGroup;\n    iconAction;\n    icon = '';\n    dblClick;\n    countDown;\n    currentControl;\n    count = 0;\n    formControl = new FormControl();\n    onChange = (...args) => { };\n    onTouched = (...args) => { };\n    constructor(el, controlContainer) {\n        this.el = el;\n        this.controlContainer = controlContainer;\n    }\n    ngAfterViewChecked() {\n        if (this.controlContainer && this.el) {\n            let fname = this.el.nativeElement.getAttribute('formControlName');\n            fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\n            fname = fname ? fname : this.input.nativeElement.name;\n            const fgroupDirective = this.controlContainer;\n            if (fgroupDirective && fgroupDirective['form']) {\n                this.currentControl = fgroupDirective['form'].controls[fname];\n                if (this.currentControl) {\n                    if (this.currentControl.validator) {\n                        const validator = this.currentControl.validator({});\n                        if (validator && validator['required']) {\n                            this.required = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ngOnInit() {\n        if (this.defaultControl) {\n            this.formControl = new FormControl(this.value);\n            if (this.input) {\n                this.input.nativeElement.formControl = this.formControl;\n            }\n        }\n        if (this.controlContainer) {\n            const form = this.controlContainer.control;\n            const lbl = this.el.nativeElement.getAttribute('formControlName');\n            if (form) {\n                const control = form.controls[lbl ? lbl : this.formControlName];\n            }\n            /*control.valueChanges.subscribe(_=>{\n              //this.value = _;\n            });*/\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.count = this.value?.length || 0;\n        }\n    }\n    change(newValue) {\n        this.writeValue(newValue);\n        // this.value = newValue;\n        this.valueChange.emit(newValue);\n    }\n    changeTextAreaValue() {\n        this.valueChange.emit(this.value);\n    }\n    writeValue(val) {\n        this.value = val;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /* setDisabledState?(isDisabled: boolean): void {\n       throw new Error(\"Method not implemented.\");\n     }*/\n    iconClicked(item) {\n        return this.iconAction ? this.iconAction(item) : null;\n    }\n    dblClicked(item) {\n        return this.dblClick ? this.dblClick(item) : null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Textarea, deps: [{ token: i0.ElementRef }, { token: i1.ControlContainer, host: true, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Textarea, isStandalone: true, selector: \"dia-textarea\", inputs: { label: \"label\", unit: \"unit\", placeholder: \"placeholder\", description: \"description\", value: \"value\", readonly: \"readonly\", innerHTML: \"innerHTML\", isTextArea: \"isTextArea\", maxLength: \"maxLength\", minrows: \"minrows\", required: \"required\", name: \"name\", disabled: \"disabled\", defaultControl: \"defaultControl\", customFormat: \"customFormat\", formControlName: \"formControlName\", formGroup: \"formGroup\", iconAction: \"iconAction\", icon: \"icon\", dblClick: \"dblClick\", countDown: \"countDown\" }, outputs: { valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"textarea\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"zone-description\\\">\\n    <!--div contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n\\t\\t<ng-content></ng-content>\\n  </div-->\\n    <div *ngIf=\\\"!isTextArea && readonly\\\" contenteditable=\\\"false\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"!isTextArea && !readonly\\\" contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"isTextArea && formGroup\\\" [formGroup]=\\\"formGroup\\\">\\n        <mat-form-field *ngIf=\\\"isTextArea\\\" appearance=\\\"outline\\\">\\n            <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n            <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n                [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\"\\n                [attr.maxLength]=\\\"maxLength\\\" [formControlName]=\\\"formControlName\\\" contenteditable=\\\"contenteditable\\\"\\n                matInput [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\"\\n                (blur)=\\\"onTouched($event)\\\" cdkTextareaAutosize></textarea>\\n        </mat-form-field>\\n    </div>\\n    <mat-form-field *ngIf=\\\"isTextArea && !formGroup\\\" appearance=\\\"outline\\\">\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n            [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\" [attr.maxLength]=\\\"maxLength\\\"\\n            (blur)=\\\"onTouched($event)\\\" contenteditable=\\\"contenteditable\\\" matInput [ngModel]=\\\"value\\\"\\n            (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\" cdkTextareaAutosize></textarea>\\n        <div class=\\\"countdown\\\" *ngIf=\\\"countDown\\\">{{count + '/' + maxLength}}</div>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n        unit\\n        }}</span>\\n</div>\", styles: [\":host{display:flex;align-items:center}:host textarea[contenteditable]{height:100px;width:224px;overflow:hidden;caret-color:gray}:host div[contenteditable]{padding:13px;width:224px;min-height:56px}:host [contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#939598}:host[label][label-on-left] label{margin-top:8px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: [\"matTextSuffix\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"directive\", type: i4$1.CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: [\"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\", \"cdkTextareaAutosize\", \"placeholder\"], exportAs: [\"cdkTextareaAutosize\"] }, { kind: \"ngmodule\", type: MatIconModule }, { kind: \"component\", type: i5$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Textarea, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-textarea', imports: [MatFormFieldModule, MatInputModule, MatIconModule, CommonModule, FormsModule, ReactiveFormsModule], template: \"<div class=\\\"zone-description\\\">\\n    <!--div contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n\\t\\t<ng-content></ng-content>\\n  </div-->\\n    <div *ngIf=\\\"!isTextArea && readonly\\\" contenteditable=\\\"false\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"!isTextArea && !readonly\\\" contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"isTextArea && formGroup\\\" [formGroup]=\\\"formGroup\\\">\\n        <mat-form-field *ngIf=\\\"isTextArea\\\" appearance=\\\"outline\\\">\\n            <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n            <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n                [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\"\\n                [attr.maxLength]=\\\"maxLength\\\" [formControlName]=\\\"formControlName\\\" contenteditable=\\\"contenteditable\\\"\\n                matInput [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\"\\n                (blur)=\\\"onTouched($event)\\\" cdkTextareaAutosize></textarea>\\n        </mat-form-field>\\n    </div>\\n    <mat-form-field *ngIf=\\\"isTextArea && !formGroup\\\" appearance=\\\"outline\\\">\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n            [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\" [attr.maxLength]=\\\"maxLength\\\"\\n            (blur)=\\\"onTouched($event)\\\" contenteditable=\\\"contenteditable\\\" matInput [ngModel]=\\\"value\\\"\\n            (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\" cdkTextareaAutosize></textarea>\\n        <div class=\\\"countdown\\\" *ngIf=\\\"countDown\\\">{{count + '/' + maxLength}}</div>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n        unit\\n        }}</span>\\n</div>\", styles: [\":host{display:flex;align-items:center}:host textarea[contenteditable]{height:100px;width:224px;overflow:hidden;caret-color:gray}:host div[contenteditable]{padding:13px;width:224px;min-height:56px}:host [contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#939598}:host[label][label-on-left] label{margin-top:8px}\\n\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { input: [{\n                type: ViewChild,\n                args: ['textarea', { static: false }]\n            }], label: [{\n                type: Input\n            }], unit: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], innerHTML: [{\n                type: Input\n            }], isTextArea: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], maxLength: [{\n                type: Input\n            }], minrows: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], defaultControl: [{\n                type: Input\n            }], customFormat: [{\n                type: Input\n            }], formControlName: [{\n                type: Input\n            }], formGroup: [{\n                type: Input\n            }], iconAction: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], dblClick: [{\n                type: Input\n            }], countDown: [{\n                type: Input\n            }] } });\n\nclass DossierBloc {\n    amountFormat;\n    disabled = false;\n    modifiable = false;\n    translateSuffix = '';\n    nbColumns = 2;\n    items = [];\n    ratifiable;\n    minrows = 2;\n    transServ;\n    debug = false;\n    emptyfn = () => { };\n    constructor() {\n        //this.transServ = new Translate();\n    }\n    ngOnChanges(changes) {\n        if (changes['items'] && changes['items'].currentValue) {\n            if (this.items) {\n                //this.transServ.get(this.translateSuffix + 'SIREN').subscribe((t:any) => {\n                this.items.forEach(it => {\n                    //it = this.translator(it);\n                    let sum_sizeColumn = 0;\n                    if (this.nbColumns && this.nbColumns > 0 && it.list) {\n                        it.list = it.list.filter(entity => entity.hide !== true);\n                        // fix JIRA 1060\n                        it.list.map(res => {\n                            if (res.sizeColumn && res.sizeColumn > 1) {\n                                sum_sizeColumn = sum_sizeColumn + res.sizeColumn - 1;\n                            }\n                        });\n                        while ((it.list.length + sum_sizeColumn) % this.nbColumns !== 0) {\n                            it.list.push(Dossier.getEmptyDossier());\n                        }\n                        // fix JIRA 1060\n                        let index_column = 0;\n                        it.list.map(res => {\n                            if (res.sizeColumn && res.sizeColumn > 1) {\n                                index_column = index_column + 1 + res.sizeColumn - 1;\n                            }\n                            else {\n                                index_column = index_column + 1;\n                            }\n                            res.indexColumn = index_column;\n                        });\n                    }\n                    if (it.list) {\n                        it.list.forEach(item => (item = this.translator(item)));\n                    }\n                });\n                //});\n            }\n        }\n    }\n    translateTitle(it) {\n        if (it &&\n            Dossier.isDefined(this.getIntName(it)) &&\n            this.translateSuffix && this.transServ &&\n            this.transServ.instant(this.getIntName(it)) &&\n            this.getIntName(it) !==\n                this.transServ.instant(this.getIntName(it))) {\n            return this.transServ.instant(this.getIntName(it));\n        }\n        return it;\n    }\n    translator(it) {\n        if (it.title &&\n            Dossier.isDefined(this.getIntName(it.title)) &&\n            this.translateSuffix && this.transServ &&\n            this.transServ.instant(this.getIntName(it.title)) &&\n            this.getIntName(it.title) !==\n                this.transServ.instant(this.getIntName(it.title))) {\n            it.title = this.transServ.instant(this.getIntName(it.title));\n        }\n        return it;\n    }\n    mapTimestampToDate(timestamp) {\n        if (timestamp) {\n            const dateObject = new Date(+timestamp);\n            return ((dateObject.getDate() < 10\n                ? '0' + dateObject.getDate()\n                : dateObject.getDate()) +\n                '/' +\n                (dateObject.getMonth() + 1 < 10\n                    ? '0' + (dateObject.getMonth() + 1)\n                    : dateObject.getMonth() + 1) +\n                '/' +\n                (dateObject.getFullYear() + '').slice(-2));\n        }\n        return null;\n    }\n    ngOnInit() { }\n    getIntName(str) {\n        return (this.translateSuffix +\n            str\n                .split(' ')\n                .filter(s => s.length > 2)\n                .join()\n                //    .normalize('NFD')\n                .replace(/[\\u0300-\\u036f]/g, '')\n                .replace(/[^a-zA-Z0-9]+/g, '')\n                .toUpperCase());\n    }\n    onclick(item) {\n        if (item.onclick) {\n            item.onclick(item);\n        }\n    }\n    handleChange(e, item) {\n        if (item.model && item.field) {\n            item.model[item.field] = e;\n        }\n        if (item.onchange) {\n            item.onchange(e);\n        }\n    }\n    handleValue(item) {\n        if (item) {\n            if (item.model && item.field && item.model[item.field]) {\n                return item.model[item.field];\n            }\n            else {\n                return item.value;\n            }\n        }\n    }\n    handleSelectValue(item) {\n        if (!item || !item.value)\n            return null;\n        // If item.value is already a ModelOption, return it\n        if (typeof item.value === 'object' && item.value !== null && 'libelle' in item.value && 'value' in item.value) {\n            return item.value;\n        }\n        // Convert string/number to ModelOption\n        const valueStr = String(item.value);\n        return new ModelOption(valueStr, valueStr);\n    }\n    handleFormattedValue(item) {\n        if (!item || !item.value)\n            return '';\n        if (item.suffix) {\n            return this.amountFormat?.transform(item.value).concat(' ' + item.suffix);\n        }\n        else if (item.isNumber) {\n            return this.amountFormat?.transform(item.value);\n        }\n        else if (item.isDate) {\n            return this.mapTimestampToDate(+item.value) || '';\n        }\n        else {\n            return String(item.value);\n        }\n    }\n    handleDateValue(item) {\n        if (!item || !item.value)\n            return undefined;\n        if (typeof item.value === 'number') {\n            return new Date(item.value);\n        }\n        else if (typeof item.value === 'string') {\n            const parsed = new Date(item.value);\n            return isNaN(parsed.getTime()) ? undefined : parsed;\n        }\n        return undefined;\n    }\n    fgroup() {\n        return new FormGroup({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DossierBloc, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.1.7\", type: DossierBloc, isStandalone: true, selector: \"dia-dossier\", inputs: { disabled: \"disabled\", modifiable: \"modifiable\", translateSuffix: \"translateSuffix\", nbColumns: \"nbColumns\", items: \"items\", ratifiable: \"ratifiable\", minrows: \"minrows\", transServ: \"transServ\", debug: \"debug\" }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => DossierBloc)\n            }\n        ], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"dossierBloc container\\\">\\n    <!--div-- class=\\\"forMobileScroll\\\"></!--div-->\\n    <div class=\\\"content-detail\\\" *ngFor=\\\"let bloc of items; let last = last; \\\">\\n        <div class=\\\"innerContent\\\">\\n            <div class=\\\"templateTable\\\" *ngIf=\\\"bloc.custom && !bloc.hide\\\">\\n                <p class=\\\"title\\\">{{bloc.title}}</p>\\n                <div *ngIf=\\\"!bloc.custom else custom\\\"></div>\\n            </div>\\n            <div class=\\\"templateField \\\" *ngIf=\\\"!bloc.custom\\\">\\n                <p class=\\\"title\\\">{{bloc.title}} </p>\\n                <div class=\\\"fieldContainer {{bloc?.className}}\\\">\\n                    <ng-container *ngFor=\\\"let item of bloc.list; let i = index\\\">\\n                            @if (debug) {\\n                                {{item|json }}\\n\\n                            }\\n                        <!-- JIRA 924 - JIRA 1060 -->\\n                        <div class=\\\"content col{{ item.sizeColumn }} {{item.className}}\\\"\\n                            [ngClass]=\\\"{isRatifView: ratifiable}\\\" [matTooltip]=\\\"item.tooltip\\\"\\n                            [matTooltipPosition]=\\\"'left'\\\">\\n                            <mat-form-field (click)=\\\"onclick(item)\\\" *ngIf=\\\"!item.hide && !modifiable\\\"\\n                                class=\\\"example-full-width\\\"\\n                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick}\\\">\\n                                <!--mat-label *ngIf=\\\"item.tooltip\\\" >{{item.title}}</mat-label-->\\n                                <textarea *ngIf=\\\"item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"handleFormattedValue(item)\\\"\\n                                    cdkTextareaAutosize></textarea>\\n                                <textarea *ngIf=\\\"!item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"'--'\\\" cdkTextareaAutosize></textarea>\\n                            </mat-form-field>\\n                            <div *ngIf=\\\"!item.hide\\\">\\n                                <div class=\\\"modifiable\\\"\\n                                    *ngIf=\\\"modifiable && !item.isDate && !item.custom && !item.isRadio && !item.selectValues && !item.advancedCustoms\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-input *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item.icon\\\"  appIsNumeric\\n                                    [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                        [iconAction]=\\\"item.iconAction\\\" \\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [visualHelpDisabled]=\\\"item.disableVisualHelp\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                        [minLength]=\\\"item.minLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                        [type]=\\\"item.type\\\"></dia-input>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-input [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                                [icon]=\\\"item.icon\\\" [iconAction]=\\\"item.iconAction\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [visualHelpDisabled]=\\\"item.disableVisualHelp\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [minLength]=\\\"item.minLength\\\" [placeholder]=\\\"item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                                [type]=\\\"item.type\\\"></dia-input>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"(modifiable || item.modifiable) && item.isTextarea\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-textarea *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item?.icon||''\\\"\\n                                        [countDown]=\\\"item.countDown\\\" appIsNumeric [disabled]=\\\"!item.isNumber\\\"\\n                                        [iconAction]=\\\"item.iconAction|| emptyfn\\\" (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [maxLength]=\\\"item.maxLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                        class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-textarea [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disabled]=\\\"!item.isNumber\\\" [countDown]=\\\"item.countDown\\\"\\n                                                [icon]=\\\"item.icon||''\\\" [iconAction]=\\\"item.iconAction|| emptyfn\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                                class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.isDate\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-input-date-picker *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title||''\\\" [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\" [minDate]=\\\"item.minDate\\\"\\n                                        [maxDate]=\\\"item.maxDate\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-input-date-picker [label]=\\\"item.title||''\\\" [required]=\\\"item.required||false\\\"\\n                                                [minDate]=\\\"item.minDate\\\" [maxDate]=\\\"item.maxDate\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.selectValues\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-select *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [list]=\\\"item.selectValues\\\" [value]=\\\"handleSelectValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-select [label]=\\\"item.title\\\" [required]=\\\"item.required||false\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\" [list]=\\\"item.selectValues\\\"\\n                                                [value]=\\\"handleSelectValue(item)\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable radio Margin1em\\\" *ngIf=\\\"modifiable && item.isRadio && item.formGroupConfig?.form\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <form [formGroup]=\\\"item.formGroupConfig?.form||fgroup()\\\" class=\\\"radioBlock\\\">\\n                                        <div class=\\\"radioLbl\\\">\\n                                            <mat-label>{{item.title}}</mat-label><mat-label *ngIf=\\\"item.required\\\">*\\n                                            </mat-label>:\\n                                        </div>\\n                                        <div\\n                                            class=\\\"radioChoices {{item.disabled?'radioBoxDisabled':'radioBoxEnabled'}}\\\">\\n                                            <div class=\\\"choice\\\" *ngFor=\\\"let v of item.possibleValues; let i = index\\\">\\n                                                <input type=\\\"radio\\\"\\n                                                    class=\\\" inputRadio {{item.disabled?'radioDisabled':'radioLbl'}}\\\"\\n                                                    [value]=\\\"v.value\\\" [name]=\\\"item?.formGroupConfig?.formName || ''\\\"\\n                                                    formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                    value=\\\"v.libelle\\\" [disabled]=\\\"item.disabled||false\\\" />\\n                                                <mat-label\\n                                                    class=\\\"ecD-form-label-radio {{item.disabled?'radioDisabled':'radioLbl'}}\\\">{{v.libelle}}</mat-label>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.custom\\\" (click)=\\\"onclick(item)\\\">\\n                                    <div *ngIf=\\\"!item.custom else custom\\\"></div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"item.advancedCustoms\\\" (click)=\\\"onclick(item)\\\">\\n                                    <ng-container #advancedCustom *ngFor=\\\"let custom of item.advancedCustoms\\\">\\n                                        <div class=\\\"containerAdvanced\\\"><!-- (click)=\\\"advancedClicked(custom)\\\" -->\\n                                            <ng-container\\n                                                *ngTemplateOutlet=\\\"custom.template; context: {$implicit: custom.context}\\\"></ng-container>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <!-- JIRA 1060 -->\\n                        <div class=\\\"returnLine\\\" *ngIf=\\\"nbColumns && item.indexColumn && item.indexColumn % nbColumns === 0\\\"></div>\\n                    </ng-container>\\n                </div>\\n                <p *ngIf=\\\"!last && !bloc?.noLine\\\" class=\\\"content-detail-line\\\"></p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #custom> <ng-content></ng-content> </ng-template>\", styles: [\".mat-form-field{width:auto}.radioBlock{display:flex;flex-direction:column}.radioLbl{font-size:12px;margin:10px 1em;color:gray}.radioLbl mat-label{font-size:12px}.radioChoices{display:flex}.radioChoices .choice{display:flex;align-items:center;margin-right:1em}.radioMateriel{position:relative;top:-13px}.radioMargin1em{margin:1em}.radioDisabled,.radioBoxDisabled{cursor:not-allowed}@media only screen and (max-width: 800px){.container{position:relative}.container .forMobileScroll{position:absolute;width:100%;height:100%;z-index:1}.container .linkField{z-index:2}}.container{position:relative;display:flex;justify-content:space-around;flex-direction:column;flex-wrap:wrap;border-radius:25px;padding:1rem}.container .content-detail .title{font-weight:700}.container .content-detail .content-detail-line{width:100%;margin:auto;height:1px}.returnLine{width:100%}.fieldContainer{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap;flex:auto}.fieldContainer .content{touch-action:auto!important;-webkit-user-select:auto!important;user-select:auto!important;-webkit-user-drag:auto!important;flex:1 0 auto}.fieldContainer .col4{flex-grow:4}.fieldContainer .col4 mat-form-field{width:720px}.fieldContainer .col3{flex-grow:3}.fieldContainer .col3 mat-form-field{width:540px}.fieldContainer .col2{flex-grow:2}.fieldContainer .col2 mat-form-field{width:360px}@media only screen and (max-width: 1200px){.fieldContainer .isRatifView.col4 mat-form-field{width:540px}}@media only screen and (max-width: 1000px){.fieldContainer .col4 mat-form-field{width:540px}.fieldContainer .isRatifView.col4 mat-form-field{width:360px}}@media only screen and (max-width: 800px){:is(.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:360px}:is(.fieldContainer .isRatifView.col3,.fieldContainer .ratifSize.col4) mat-form-field{width:auto}}@media only screen and (max-width: 600px){:is(.fieldContainer .col2,.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:auto}}textarea{overflow:hidden!important}.emptyField{visibility:hidden}.linkField,.linkField textarea{cursor:pointer;text-decoration:underline}:is() .table-container{background-color:transparent}:is() .table-container .table-content .mat-table tr.mat-header-row th.mat-header-cell .mat-sort-header-container .mat-sort-header-arrow{display:none;position:absolute}@media print{.container{border:solid 1px gray}}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatFormFieldModule }, { kind: \"component\", type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i2.MatLabel, selector: \"mat-label\" }, { kind: \"directive\", type: i2.MatError, selector: \"mat-error, [matError]\", inputs: [\"id\"] }, { kind: \"ngmodule\", type: MatInputModule }, { kind: \"directive\", type: i3.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\", \"disabledInteractive\"], exportAs: [\"matInput\"] }, { kind: \"directive\", type: i4$1.CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: [\"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\", \"cdkTextareaAutosize\", \"placeholder\"], exportAs: [\"cdkTextareaAutosize\"] }, { kind: \"ngmodule\", type: FormsModule }, { kind: \"directive\", type: i1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i1.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }, { kind: \"directive\", type: i1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i1.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"ngmodule\", type: MatTooltipModule }, { kind: \"directive\", type: i5$1.MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }, { kind: \"component\", type: Inputs, selector: \"dia-input\", inputs: [\"displayAsLabel\", \"label\", \"required\", \"format\", \"placeholder\", \"hidden\", \"description\", \"disabled\", \"isDatePicker\", \"readonlyInput\", \"readonly\", \"type\", \"min\", \"max\", \"minDate\", \"maxDate\", \"maxLength\", \"minLength\", \"unit\", \"name\", \"cancellable\", \"searching\", \"value\", \"customFormat\", \"icon\", \"errorMsg\", \"isError\", \"defaultControl\", \"matDatepicker\", \"visualHelpDisabled\", \"isDateControl\", \"formControl\", \"iconAction\"], outputs: [\"valueChange\", \"cancelValue\", \"dateChange\", \"iconWasClicked\", \"wasDblClicked\"] }, { kind: \"component\", type: Select, selector: \"dia-select\", inputs: [\"value\", \"required\", \"defaultValue\", \"fixPlaceholder\", \"values\", \"forced\", \"list\", \"placeholder\", \"disablePlaceHolder\", \"label\", \"description\", \"multiple\", \"defaultSort\", \"selectedValue\", \"disabled\", \"direction\", \"preset\", \"tooltip\", \"autoClosedAfter\", \"translate\"], outputs: [\"valueChange\", \"valuesChange\", \"beenForced\"] }, { kind: \"directive\", type: IsNumericDirective, selector: \"[appIsNumeric]\", inputs: [\"isDecimal\", \"disable\", \"appIsNumeric\"] }, { kind: \"component\", type: Textarea, selector: \"dia-textarea\", inputs: [\"label\", \"unit\", \"placeholder\", \"description\", \"value\", \"readonly\", \"innerHTML\", \"isTextArea\", \"maxLength\", \"minrows\", \"required\", \"name\", \"disabled\", \"defaultControl\", \"customFormat\", \"formControlName\", \"formGroup\", \"iconAction\", \"icon\", \"dblClick\", \"countDown\"], outputs: [\"valueChange\"] }, { kind: \"component\", type: InputDatePicker, selector: \"dia-input-date-picker\", inputs: [\"label\", \"customDatePicker\", \"placeholder\", \"minDate\", \"maxDate\", \"value\", \"required\", \"date\", \"disabled\"], outputs: [\"dateChange\", \"valueChange\"] }, { kind: \"pipe\", type: i5.JsonPipe, name: \"json\" }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: DossierBloc, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-dossier', standalone: true, imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule, Inputs, Select, IsNumericDirective, Textarea, InputDatePicker], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => DossierBloc)\n                        }\n                    ], template: \"<div class=\\\"dossierBloc container\\\">\\n    <!--div-- class=\\\"forMobileScroll\\\"></!--div-->\\n    <div class=\\\"content-detail\\\" *ngFor=\\\"let bloc of items; let last = last; \\\">\\n        <div class=\\\"innerContent\\\">\\n            <div class=\\\"templateTable\\\" *ngIf=\\\"bloc.custom && !bloc.hide\\\">\\n                <p class=\\\"title\\\">{{bloc.title}}</p>\\n                <div *ngIf=\\\"!bloc.custom else custom\\\"></div>\\n            </div>\\n            <div class=\\\"templateField \\\" *ngIf=\\\"!bloc.custom\\\">\\n                <p class=\\\"title\\\">{{bloc.title}} </p>\\n                <div class=\\\"fieldContainer {{bloc?.className}}\\\">\\n                    <ng-container *ngFor=\\\"let item of bloc.list; let i = index\\\">\\n                            @if (debug) {\\n                                {{item|json }}\\n\\n                            }\\n                        <!-- JIRA 924 - JIRA 1060 -->\\n                        <div class=\\\"content col{{ item.sizeColumn }} {{item.className}}\\\"\\n                            [ngClass]=\\\"{isRatifView: ratifiable}\\\" [matTooltip]=\\\"item.tooltip\\\"\\n                            [matTooltipPosition]=\\\"'left'\\\">\\n                            <mat-form-field (click)=\\\"onclick(item)\\\" *ngIf=\\\"!item.hide && !modifiable\\\"\\n                                class=\\\"example-full-width\\\"\\n                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick}\\\">\\n                                <!--mat-label *ngIf=\\\"item.tooltip\\\" >{{item.title}}</mat-label-->\\n                                <textarea *ngIf=\\\"item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"handleFormattedValue(item)\\\"\\n                                    cdkTextareaAutosize></textarea>\\n                                <textarea *ngIf=\\\"!item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"'--'\\\" cdkTextareaAutosize></textarea>\\n                            </mat-form-field>\\n                            <div *ngIf=\\\"!item.hide\\\">\\n                                <div class=\\\"modifiable\\\"\\n                                    *ngIf=\\\"modifiable && !item.isDate && !item.custom && !item.isRadio && !item.selectValues && !item.advancedCustoms\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-input *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item.icon\\\"  appIsNumeric\\n                                    [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                        [iconAction]=\\\"item.iconAction\\\" \\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [visualHelpDisabled]=\\\"item.disableVisualHelp\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                        [minLength]=\\\"item.minLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                        [type]=\\\"item.type\\\"></dia-input>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-input [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                                [icon]=\\\"item.icon\\\" [iconAction]=\\\"item.iconAction\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [visualHelpDisabled]=\\\"item.disableVisualHelp\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [minLength]=\\\"item.minLength\\\" [placeholder]=\\\"item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                                [type]=\\\"item.type\\\"></dia-input>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"(modifiable || item.modifiable) && item.isTextarea\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-textarea *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item?.icon||''\\\"\\n                                        [countDown]=\\\"item.countDown\\\" appIsNumeric [disabled]=\\\"!item.isNumber\\\"\\n                                        [iconAction]=\\\"item.iconAction|| emptyfn\\\" (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [maxLength]=\\\"item.maxLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                        class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-textarea [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disabled]=\\\"!item.isNumber\\\" [countDown]=\\\"item.countDown\\\"\\n                                                [icon]=\\\"item.icon||''\\\" [iconAction]=\\\"item.iconAction|| emptyfn\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                                class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.isDate\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-input-date-picker *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title||''\\\" [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\" [minDate]=\\\"item.minDate\\\"\\n                                        [maxDate]=\\\"item.maxDate\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-input-date-picker [label]=\\\"item.title||''\\\" [required]=\\\"item.required||false\\\"\\n                                                [minDate]=\\\"item.minDate\\\" [maxDate]=\\\"item.maxDate\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.selectValues\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-select *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [list]=\\\"item.selectValues\\\" [value]=\\\"handleSelectValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-select [label]=\\\"item.title\\\" [required]=\\\"item.required||false\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\" [list]=\\\"item.selectValues\\\"\\n                                                [value]=\\\"handleSelectValue(item)\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable radio Margin1em\\\" *ngIf=\\\"modifiable && item.isRadio && item.formGroupConfig?.form\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <form [formGroup]=\\\"item.formGroupConfig?.form||fgroup()\\\" class=\\\"radioBlock\\\">\\n                                        <div class=\\\"radioLbl\\\">\\n                                            <mat-label>{{item.title}}</mat-label><mat-label *ngIf=\\\"item.required\\\">*\\n                                            </mat-label>:\\n                                        </div>\\n                                        <div\\n                                            class=\\\"radioChoices {{item.disabled?'radioBoxDisabled':'radioBoxEnabled'}}\\\">\\n                                            <div class=\\\"choice\\\" *ngFor=\\\"let v of item.possibleValues; let i = index\\\">\\n                                                <input type=\\\"radio\\\"\\n                                                    class=\\\" inputRadio {{item.disabled?'radioDisabled':'radioLbl'}}\\\"\\n                                                    [value]=\\\"v.value\\\" [name]=\\\"item?.formGroupConfig?.formName || ''\\\"\\n                                                    formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                    value=\\\"v.libelle\\\" [disabled]=\\\"item.disabled||false\\\" />\\n                                                <mat-label\\n                                                    class=\\\"ecD-form-label-radio {{item.disabled?'radioDisabled':'radioLbl'}}\\\">{{v.libelle}}</mat-label>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.custom\\\" (click)=\\\"onclick(item)\\\">\\n                                    <div *ngIf=\\\"!item.custom else custom\\\"></div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"item.advancedCustoms\\\" (click)=\\\"onclick(item)\\\">\\n                                    <ng-container #advancedCustom *ngFor=\\\"let custom of item.advancedCustoms\\\">\\n                                        <div class=\\\"containerAdvanced\\\"><!-- (click)=\\\"advancedClicked(custom)\\\" -->\\n                                            <ng-container\\n                                                *ngTemplateOutlet=\\\"custom.template; context: {$implicit: custom.context}\\\"></ng-container>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <!-- JIRA 1060 -->\\n                        <div class=\\\"returnLine\\\" *ngIf=\\\"nbColumns && item.indexColumn && item.indexColumn % nbColumns === 0\\\"></div>\\n                    </ng-container>\\n                </div>\\n                <p *ngIf=\\\"!last && !bloc?.noLine\\\" class=\\\"content-detail-line\\\"></p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #custom> <ng-content></ng-content> </ng-template>\", styles: [\".mat-form-field{width:auto}.radioBlock{display:flex;flex-direction:column}.radioLbl{font-size:12px;margin:10px 1em;color:gray}.radioLbl mat-label{font-size:12px}.radioChoices{display:flex}.radioChoices .choice{display:flex;align-items:center;margin-right:1em}.radioMateriel{position:relative;top:-13px}.radioMargin1em{margin:1em}.radioDisabled,.radioBoxDisabled{cursor:not-allowed}@media only screen and (max-width: 800px){.container{position:relative}.container .forMobileScroll{position:absolute;width:100%;height:100%;z-index:1}.container .linkField{z-index:2}}.container{position:relative;display:flex;justify-content:space-around;flex-direction:column;flex-wrap:wrap;border-radius:25px;padding:1rem}.container .content-detail .title{font-weight:700}.container .content-detail .content-detail-line{width:100%;margin:auto;height:1px}.returnLine{width:100%}.fieldContainer{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap;flex:auto}.fieldContainer .content{touch-action:auto!important;-webkit-user-select:auto!important;user-select:auto!important;-webkit-user-drag:auto!important;flex:1 0 auto}.fieldContainer .col4{flex-grow:4}.fieldContainer .col4 mat-form-field{width:720px}.fieldContainer .col3{flex-grow:3}.fieldContainer .col3 mat-form-field{width:540px}.fieldContainer .col2{flex-grow:2}.fieldContainer .col2 mat-form-field{width:360px}@media only screen and (max-width: 1200px){.fieldContainer .isRatifView.col4 mat-form-field{width:540px}}@media only screen and (max-width: 1000px){.fieldContainer .col4 mat-form-field{width:540px}.fieldContainer .isRatifView.col4 mat-form-field{width:360px}}@media only screen and (max-width: 800px){:is(.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:360px}:is(.fieldContainer .isRatifView.col3,.fieldContainer .ratifSize.col4) mat-form-field{width:auto}}@media only screen and (max-width: 600px){:is(.fieldContainer .col2,.fieldContainer .col3,.fieldContainer .col4) mat-form-field{width:auto}}textarea{overflow:hidden!important}.emptyField{visibility:hidden}.linkField,.linkField textarea{cursor:pointer;text-decoration:underline}:is() .table-container{background-color:transparent}:is() .table-container .table-content .mat-table tr.mat-header-row th.mat-header-cell .mat-sort-header-container .mat-sort-header-arrow{display:none;position:absolute}@media print{.container{border:solid 1px gray}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input\n            }], modifiable: [{\n                type: Input\n            }], translateSuffix: [{\n                type: Input\n            }], nbColumns: [{\n                type: Input\n            }], items: [{\n                type: Input\n            }], ratifiable: [{\n                type: Input\n            }], minrows: [{\n                type: Input\n            }], transServ: [{\n                type: Input\n            }], debug: [{\n                type: Input\n            }] } });\n\nclass InputRangeDate {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputRangeDate, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: InputRangeDate, isStandalone: true, selector: \"lib-input-range-date\", ngImport: i0, template: \"<p>input-range-date works!</p>\\n\", styles: [\"\"] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: InputRangeDate, decorators: [{\n            type: Component,\n            args: [{ selector: 'lib-input-range-date', imports: [], template: \"<p>input-range-date works!</p>\\n\" }]\n        }] });\n\nclass Scroll {\n    scrolledUpDisabled = false;\n    scrolledDownDisabled = false;\n    scrolledLeftDisabled = false;\n    scrolledRightDisabled = false;\n    scrolledUp = new EventEmitter();\n    scrolledDown = new EventEmitter();\n    scrolledLeft = new EventEmitter();\n    scrolledRight = new EventEmitter();\n    scrollBuffer = 500;\n    scrollBuffered = false;\n    vertical = true;\n    horizontal = true;\n    forced = false;\n    constructor() { }\n    onmouseWheel(event) {\n        if ((event.wheelDelta > 0 && !this.scrolledDownDisabled) || (event.wheelDelta < 0 && !this.scrolledUpDisabled)) {\n            if (!this.scrollBuffered) {\n                this.scrollBuffered = true;\n                if (this.vertical) {\n                    this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n                }\n                if (this.horizontal) {\n                    this.scrolledH(event.wheelDelta > 0, event.wheelDelta);\n                }\n                setTimeout(() => this.scrollBuffered = false, this.scrollBuffer);\n            }\n        }\n    }\n    onmouseoverup(event) {\n        if (this.scrolledUpDisabled) {\n            this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n        }\n    }\n    onmouseoverdown(event) {\n        if (this.scrolledDownDisabled) {\n            this.scrolled(event.wheelDelta > 0, event.wheelDelta);\n        }\n    }\n    ngOnInit() {\n    }\n    scrolled(up, wheel) {\n        if (up) {\n            this.scrolledUp.emit(Math.abs(wheel));\n        }\n        else {\n            this.scrolledDown.emit(Math.abs(wheel));\n        }\n    }\n    scrolledH(up, wheel) {\n        if (up) {\n            this.scrolledLeft.emit(Math.abs(wheel));\n        }\n        else {\n            this.scrolledRight.emit(Math.abs(wheel));\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Scroll, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Scroll, isStandalone: true, selector: \"dia-scroll\", inputs: { scrolledUpDisabled: \"scrolledUpDisabled\", scrolledDownDisabled: \"scrolledDownDisabled\", scrolledLeftDisabled: \"scrolledLeftDisabled\", scrolledRightDisabled: \"scrolledRightDisabled\", scrollBuffer: \"scrollBuffer\", vertical: \"vertical\", horizontal: \"horizontal\", forced: \"forced\" }, outputs: { scrolledUp: \"scrolledUp\", scrolledDown: \"scrolledDown\", scrolledLeft: \"scrolledLeft\", scrolledRight: \"scrolledRight\" }, host: { listeners: { \"mousewheel\": \"onmouseWheel($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                multi: true,\n                useExisting: forwardRef(() => Scroll)\n            }\n        ], ngImport: i0, template: \"<div class=\\\"container up\\\" *ngIf=\\\"vertical && !scrolledUpDisabled\\\" [ngClass]=\\\"{containerForced: forced, upForced: forced}\\\" (click)=\\\"scrolled(true)\\\" >\\n  <mat-icon >keyboard_arrow_up</mat-icon>\\n</div>\\n\\n<div class=\\\"container down\\\" *ngIf=\\\"vertical && !scrolledDownDisabled\\\" [ngClass]=\\\"{containerForced: forced, downForced: forced}\\\" (click)=\\\"scrolled(false)\\\">\\n  <mat-icon >keyboard_arrow_down</mat-icon>\\n</div>\\n\\n<div class=\\\"container left\\\" *ngIf=\\\"horizontal && !scrolledLeftDisabled\\\" [ngClass]=\\\"{containerForced: forced, leftForced: forced}\\\" (click)=\\\"scrolledH(true)\\\" >\\n    <mat-icon >keyboard_arrow_left</mat-icon>\\n  </div>\\n\\n  <div class=\\\"container right\\\" *ngIf=\\\"horizontal  && !scrolledRightDisabled\\\" [ngClass]=\\\"{containerForced: forced, rightForced: forced}\\\" (click)=\\\"scrolledH(false)\\\">\\n    <mat-icon >keyboard_arrow_right</mat-icon>\\n  </div>\\n\", styles: [\".container{cursor:pointer;position:absolute;left:0;width:100%;height:10%;display:flex;justify-content:center;opacity:0;transition-duration:.5s}.container mat-icon{transform:scale(2);position:relative;transition-duration:.5s}.up{align-items:flex-start;top:0}.up mat-icon{top:100px}.down{align-items:flex-end;bottom:0}.down mat-icon{bottom:100px}.container:hover{opacity:.8}.down:hover mat-icon{transform:scale(2);position:relative;bottom:20px}.up:hover mat-icon{transform:scale(2);position:relative;top:20px}.left{width:10%;height:100%;align-items:center;justify-content:flex-start;left:0;top:0}.left mat-icon{left:100px}.right{width:10%;height:100%;align-items:center;justify-content:flex-end;right:0;top:0;left:unset}.right mat-icon{right:100px}.right:hover mat-icon{transform:scale(2);position:relative;right:20px}.left:hover mat-icon{transform:scale(2);position:relative;left:20px}.containerForced{opacity:.8}.rightForced mat-icon{transform:scale(2);position:relative;right:20px}.leftForced mat-icon{transform:scale(2);position:relative;left:20px}.downForced mat-icon{transform:scale(2);position:relative;bottom:20px}.upForced mat-icon{transform:scale(2);position:relative;top:20px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: MatIconModule }, { kind: \"component\", type: i5$2.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Scroll, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-scroll', standalone: true, imports: [MatIconModule, CommonModule], providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            multi: true,\n                            useExisting: forwardRef(() => Scroll)\n                        }\n                    ], template: \"<div class=\\\"container up\\\" *ngIf=\\\"vertical && !scrolledUpDisabled\\\" [ngClass]=\\\"{containerForced: forced, upForced: forced}\\\" (click)=\\\"scrolled(true)\\\" >\\n  <mat-icon >keyboard_arrow_up</mat-icon>\\n</div>\\n\\n<div class=\\\"container down\\\" *ngIf=\\\"vertical && !scrolledDownDisabled\\\" [ngClass]=\\\"{containerForced: forced, downForced: forced}\\\" (click)=\\\"scrolled(false)\\\">\\n  <mat-icon >keyboard_arrow_down</mat-icon>\\n</div>\\n\\n<div class=\\\"container left\\\" *ngIf=\\\"horizontal && !scrolledLeftDisabled\\\" [ngClass]=\\\"{containerForced: forced, leftForced: forced}\\\" (click)=\\\"scrolledH(true)\\\" >\\n    <mat-icon >keyboard_arrow_left</mat-icon>\\n  </div>\\n\\n  <div class=\\\"container right\\\" *ngIf=\\\"horizontal  && !scrolledRightDisabled\\\" [ngClass]=\\\"{containerForced: forced, rightForced: forced}\\\" (click)=\\\"scrolledH(false)\\\">\\n    <mat-icon >keyboard_arrow_right</mat-icon>\\n  </div>\\n\", styles: [\".container{cursor:pointer;position:absolute;left:0;width:100%;height:10%;display:flex;justify-content:center;opacity:0;transition-duration:.5s}.container mat-icon{transform:scale(2);position:relative;transition-duration:.5s}.up{align-items:flex-start;top:0}.up mat-icon{top:100px}.down{align-items:flex-end;bottom:0}.down mat-icon{bottom:100px}.container:hover{opacity:.8}.down:hover mat-icon{transform:scale(2);position:relative;bottom:20px}.up:hover mat-icon{transform:scale(2);position:relative;top:20px}.left{width:10%;height:100%;align-items:center;justify-content:flex-start;left:0;top:0}.left mat-icon{left:100px}.right{width:10%;height:100%;align-items:center;justify-content:flex-end;right:0;top:0;left:unset}.right mat-icon{right:100px}.right:hover mat-icon{transform:scale(2);position:relative;right:20px}.left:hover mat-icon{transform:scale(2);position:relative;left:20px}.containerForced{opacity:.8}.rightForced mat-icon{transform:scale(2);position:relative;right:20px}.leftForced mat-icon{transform:scale(2);position:relative;left:20px}.downForced mat-icon{transform:scale(2);position:relative;bottom:20px}.upForced mat-icon{transform:scale(2);position:relative;top:20px}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { scrolledUpDisabled: [{\n                type: Input\n            }], scrolledDownDisabled: [{\n                type: Input\n            }], scrolledLeftDisabled: [{\n                type: Input\n            }], scrolledRightDisabled: [{\n                type: Input\n            }], scrolledUp: [{\n                type: Output\n            }], scrolledDown: [{\n                type: Output\n            }], scrolledLeft: [{\n                type: Output\n            }], scrolledRight: [{\n                type: Output\n            }], scrollBuffer: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], forced: [{\n                type: Input\n            }], onmouseWheel: [{\n                type: HostListener,\n                args: ['mousewheel', ['$event']]\n            }] } });\n\nclass Tiles {\n    tunnelLeft = undefined;\n    tunnel = new ElementRef(null);\n    hoster = new ElementRef(null);\n    scroller = new ElementRef(null);\n    container = new ElementRef(null);\n    scenariContainer = new ElementRef(null);\n    tile = undefined;\n    tiles = [];\n    selector = false;\n    autofill = false;\n    emptyTpl;\n    tileTemplate;\n    title = '';\n    maxTiles = undefined;\n    wheelSpace = 120;\n    hasLeft = new EventEmitter();\n    selection = new EventEmitter();\n    hasClicked = new EventEmitter();\n    maxBound = new EventEmitter();\n    minBound = new EventEmitter();\n    maxLength = 0;\n    autoCompute = true;\n    forceActive = true;\n    circularEffect = false;\n    active = false;\n    currentContentWidth = null;\n    currentContentHeight = null;\n    isMobile = false;\n    tileWidth = 0;\n    tileHeight = 0;\n    maxTile = undefined;\n    carouselIndex = undefined;\n    scrollAngle = 0;\n    translateX = undefined;\n    translateY = undefined;\n    scroll = 90;\n    grabbing = false;\n    pourcent = 0.8;\n    minDiametre = 0;\n    maxDiametre = 0;\n    forcedDiametre = undefined;\n    diametre = 0;\n    tetas = [];\n    init = false;\n    ready = false;\n    isCircularInitated = false;\n    selectedEvent = new EventEmitter();\n    selectedTile = undefined;\n    currentEvent = undefined;\n    isBoundMax = false;\n    isBoundMin = false;\n    debug = true;\n    constructor() { }\n    ngOnChanges(changes) {\n        if (changes['tiles'] && changes['tiles'].currentValue) {\n            if (this.circularEffect && this.tiles?.filter((tile) => tile.empty).length == 0) {\n                this.computeSlider();\n            }\n            if (this.hoster && this.tiles && this.tileWidth) {\n                this.hoster.nativeElement.style.width = Math.max(this.tiles.length * this.tileWidth / Math.PI * 1.3, 0) + 'px';\n            }\n        }\n        if ((changes['forcedDiametre'] && changes['forcedDiametre'].currentValue && !changes['forcedDiametre'].isFirstChange())\n            || (changes['minDiametre'] && changes['minDiametre'].currentValue && !changes['minDiametre'].isFirstChange())\n            || (changes['maxDiametre'] && changes['maxDiametre'].currentValue && !changes['maxDiametre'].isFirstChange())) {\n            this.computeSlider();\n        }\n    }\n    next() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        this.scroll += this.scrollAngle;\n        this.rotate();\n    }\n    prev() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        this.scroll -= this.scrollAngle;\n        this.rotate();\n    }\n    ngOnInit() {\n        this.isMobile = this.isMobileBrowser();\n        if (this.isMobile) {\n            this.active = true;\n        }\n        if (this.tile) {\n            this.tile.changes.subscribe(_ => {\n                this.tileWidth = _.nativeElement.clientWidth;\n            });\n        }\n    }\n    computeCircularTileAmount() {\n        let boxW = this.tileWidth * 1.3;\n        let boxH = this.tileHeight;\n        let r = this.getDiametre() / 2;\n        let perimetre = 2 * Math.PI * r;\n        let amountTile = this.tiles.length;\n        this.addEmptyTiles(Math.round(perimetre / boxW) - amountTile);\n    }\n    addEmptyTiles(q) {\n        for (let i = this.tiles.length - 1; i < 31; i++) {\n            this.tiles.push({ empty: true });\n        }\n        const diam = this.tiles.length * this.tileWidth / Math.PI * 1.3;\n        this.hoster.nativeElement.style.width = Math.round(diam) + 'px';\n    }\n    isIosBrowser() {\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    isMobileBrowser() {\n        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getDiametre() {\n        return this.forcedDiametre ? this.forcedDiametre : this.minDiametre > this.hoster.nativeElement.clientWidth ? this.minDiametre : this.maxDiametre < this.hoster.nativeElement.clientWidth ? this.maxDiametre : this.hoster.nativeElement.clientWidth;\n    }\n    getFirstTile() {\n        if (!this.tile || !this.tile.first) {\n            return;\n        }\n        this.tileWidth = this.tile.first.nativeElement.clientWidth;\n        this.tileHeight = this.tile.first.nativeElement.clientHeight;\n        return this.tile.first;\n    }\n    ngAfterViewInit() {\n        this.getDiametre();\n        if (this.tile) {\n            this.tile.changes.subscribe(_ => {\n                this.getFirstTile();\n            });\n            if (this.tile.first) {\n                this.getFirstTile();\n            }\n        }\n        this.computeSlider();\n        if (!this.init) {\n            this.rotateBox({ movementX: 0 });\n            setTimeout(() => { this.computeSlider(true); this.mouseUp(null); }, 300);\n            this.init = true;\n        }\n    }\n    resetTunnel(e) {\n        this.tunnelLeft = 0;\n        this.tunnel.nativeElement.style.left = this.tunnelLeft + 'px';\n        this.computeSlider();\n    }\n    getMaxTiles() {\n        this.getFirstTile();\n        let widthTile;\n        if (this.tile && this.tile.first) {\n            widthTile = this.tile.first.nativeElement.clientWidth;\n            this.log('largeur tiles: ' + widthTile);\n        }\n        if (this.maxTiles) {\n            return Math.floor(this.maxTiles);\n        }\n        if (widthTile) {\n            return Math.floor(this.container.nativeElement.clientWidth / widthTile);\n        }\n        if (this.tileWidth) {\n            return Math.floor(this.container.nativeElement.clientWidth / this.tileWidth);\n        }\n        return this.tiles.length;\n    }\n    computeAngle(c, i, tube, num) {\n        return (360 / num * i);\n    }\n    computeLeft(c, i, tube, num) {\n        let teta = this.computeAngle(c, i, tube, num);\n        return (this.getDiametre() - this.getDiametre() * Math.cos(teta * Math.PI / 180)) / 2;\n    }\n    computeBottom(c, i, tube, num) {\n        let teta = this.computeAngle(c, i, tube, num);\n        return (this.getDiametre() - this.getDiametre() * Math.sin(teta * Math.PI / 180)) / 2;\n    }\n    computeSlider(init) {\n        if (this.init) {\n            setTimeout(() => this.ready = true, 300);\n        }\n        if (this.tunnel && this.tiles) {\n            const overflow = this.tunnel.nativeElement.clientWidth - this.container.nativeElement.clientWidth;\n            if (this.circularEffect) {\n                this.tunnel.nativeElement.style.height = this.getDiametre() + 'px';\n                this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            }\n            this.maxLength = overflow > 0 ? overflow / 2 : 0;\n            let boxW = Math.round(this.tunnel.nativeElement.clientWidth / this.tiles.length);\n            this.log('boxing: ' + boxW);\n            this.currentContentWidth = boxW;\n            let boxH = this.tunnel.nativeElement.clientHeight;\n            if (this.scroller && this.scroller.nativeElement && this.scroller.nativeElement.children.length > 0) {\n                this.scroller.nativeElement.children[0].style.height = boxH + 'px';\n                this.scroller.nativeElement.children[0].style.width = boxW / 3 + 'px';\n                this.scroller.nativeElement.children[1].style.height = boxH + 'px';\n                this.scroller.nativeElement.children[1].style.width = boxW / 3 + 'px';\n                this.scroller.nativeElement.children[0].style.top = '-' + (boxH + 32) / 2 + 'px';\n                this.scroller.nativeElement.children[1].style.top = '-' + (boxH + 32) / 2 + 'px';\n            }\n            if (this.circularEffect) {\n                this.getDiametre();\n                this.translateY = 1.7 * this.getDiametre() + 'px';\n                this.translateX = (this.getDiametre() * 1.2 + boxW) + 'px';\n            }\n            if (this.forceActive && this.tunnel.nativeElement.clientWidth > this.getDiametre()) {\n                this.active = true;\n            }\n            else {\n                this.active = false;\n            }\n            if (this.autofill && !this.circularEffect) {\n                if (this.tiles.filter((_) => _.empty).length > 0 && this.tiles.length > this.getMaxTiles()) {\n                    this.tiles = this.tiles.filter((_) => !_.empty);\n                }\n                let empties = [];\n                if (this.tiles.length < this.getMaxTiles() - 1) {\n                    while (this.tiles.length + empties.length < this.getMaxTiles()) {\n                        empties.push({ empty: true });\n                    }\n                    let tmp = [];\n                    if (empties.length % 2 !== 0) {\n                        empties.pop();\n                    }\n                    tmp = this.tiles.map((_) => empties.splice(Math.floor(empties.length / 2), 0, _));\n                    this.tiles = empties;\n                }\n            }\n            if (this.circularEffect) {\n                this.refreshCircular();\n            }\n        }\n    }\n    scrolledRight(e, tar) {\n        if (this.active) {\n            tar = this.getTar(tar, e);\n            if (!this.tunnelLeft) {\n                this.tunnelLeft = 0;\n            }\n            if (this.tunnelLeft < this.maxLength - Math.abs(this.getSlideDelata(e))) {\n                this.tunnelLeft += Math.abs(this.getSlideDelata(e));\n                tar.style.left = this.tunnelLeft + 'px';\n            }\n        }\n        this.refreshCircular();\n    }\n    refreshCircular() {\n        if (this.circularEffect) {\n            this.getFirstTile();\n            this.container.nativeElement.style.height = Math.round(this.tileHeight * 1.5) + 'px';\n            let c = this.tunnel.nativeElement.children;\n            this.scrollAngle = (360 / (c.length));\n            let j = 0;\n            let r = this.getDiametre() / 2;\n            this.log('diametre:' + this.getDiametre());\n            this.scenariContainer.nativeElement.style.position = \"relative\";\n            this.scenariContainer.nativeElement.style.top = r + 'px';\n            this.tetas = [];\n            for (let i = 0; i < c.length; i++) {\n                if (c[i].className.indexOf('scroll') == -1) {\n                    const teta = this.computeAngle(c[i], i, this.tunnel, c.length);\n                    c[i].style.transform = '  rotate(-' + (teta + 90) + 'deg)';\n                    this.tetas.push(teta + 90);\n                    c[i].style.left = ((this.computeLeft(c[i], i, this.tunnel, c.length)) - r - this.tileWidth / 2) + 'px';\n                    c[i].style.bottom = ((this.computeBottom(c[i], i, this.tunnel, c.length)) - this.tileHeight / 2) + 'px';\n                }\n            }\n            this.computeCircularTileAmount();\n            if (!this.isCircularInitated) {\n                this.isCircularInitated = true;\n            }\n        }\n    }\n    scrolledLeft(e, tar) {\n        if (this.active) {\n            tar = this.getTar(tar, e);\n            if (!this.tunnelLeft) {\n                this.tunnelLeft = 0;\n            }\n            if (this.tunnelLeft > -this.maxLength + Math.abs(this.getSlideDelata(e))) {\n                this.tunnelLeft -= Math.abs(this.getSlideDelata(e));\n                tar.style.left = this.tunnelLeft + 'px';\n            }\n        }\n        this.refreshCircular();\n    }\n    getSlideDelata(e) {\n        return e && e.deltaX ? e.deltaX : e ? e : this.autoCompute ? this.currentContentWidth : this.wheelSpace;\n    }\n    getTar(tar, e) {\n        return this.tunnel.nativeElement;\n    }\n    left(e) {\n        this.hasLeft.emit(e);\n    }\n    clicked(e, sc) {\n        this.log('clicked');\n        if (sc.empty) {\n            this.log('clicked aborted: empty tile');\n            return;\n        }\n        if (this.circularEffect) {\n            this.scroll = this.tetas[e];\n            this.selectedTile = this.tiles[e];\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            this.selection.emit(this.selectedTile);\n            this.log(e);\n        }\n        this.hasClicked.emit(e);\n    }\n    mouseDown(e) {\n        this.grabbing = true;\n    }\n    panStart(e) {\n        this.grabbing = true;\n    }\n    mouseUp(e) {\n        this.grabbing = false;\n        if (this.circularEffect) {\n            const activeTiles = this.tiles.filter((_) => !_.empty).length;\n            const maxangle = (activeTiles - 1) * this.scrollAngle;\n            const minangle = 90;\n            if (activeTiles === 1) {\n                this.scroll = 90;\n                this.selectedTile = this.tiles[0];\n                this.selection.emit(this.selectedTile);\n            }\n            else if (this.tiles.length != activeTiles) {\n                const tmp = Math.round((this.scroll) / this.scrollAngle);\n                this.scroll = tmp * this.scrollAngle;\n                this.scroll = this.scroll > maxangle + minangle ? maxangle + minangle : this.scroll < minangle ? minangle : this.scroll;\n                if (this.scroll >= maxangle) {\n                    this.boundMaxReached();\n                }\n                if (this.scroll <= minangle) {\n                    this.boundMinReached();\n                }\n                let v = this.scroll;\n                let last = null;\n                for (let i = 0; i < this.tetas.length; i++) {\n                    const cur = Math.abs(this.tetas[i] - v);\n                    if (last === null || cur <= last) {\n                        last = cur;\n                        this.selectedTile = this.tiles[i];\n                        this.selection.emit(this.selectedTile);\n                    }\n                }\n            }\n            else {\n                this.log(maxangle + \" > \" + this.scroll + \" > \" + minangle);\n                const multipleTour = Math.round((this.scroll - 90) / 360);\n                let last = null;\n                let v = multipleTour === 0 ? this.scroll : Math.round(this.scroll / multipleTour);\n                for (let i = 0; i < this.tetas.length; i++) {\n                    const cur = Math.abs(this.tetas[i] - v);\n                    if (last === null || cur <= last) {\n                        last = cur;\n                        this.scroll = this.tetas[i];\n                        this.selectedTile = this.tiles[i];\n                        this.selection.emit(this.selectedTile);\n                    }\n                }\n            }\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            if (this.selector) {\n                this.selectedEvent.emit(this.selectedTile);\n            }\n        }\n    }\n    mouseLeave(e) {\n        if (this.grabbing) {\n            this.grabbing = false;\n            this.mouseUp(e);\n        }\n    }\n    mouseMove(e) {\n        if (this.grabbing && !this.isIosBrowser()) {\n            this.rotateBox(e);\n            e.stopPropagation();\n        }\n    }\n    panMoving(e) {\n        if (this.grabbing) {\n            const ev = e;\n            if (!e.srcEvent.movementX) {\n                this.scroll += this.scrollAngle * ev.overallVelocityX * 0.1;\n                this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n            }\n            else {\n                this.rotateBox(e.srcEvent, e);\n            }\n        }\n    }\n    panEnd(e) {\n        this.grabbing = false;\n        this.mouseUp(e.srcEvent);\n    }\n    onmouseWheel(event) {\n        if (this.circularEffect) {\n            this.rotateBox(event);\n        }\n        else {\n            event.preventDefault();\n            event.wheelDelta > 0 ? this.scrolledLeft(Math.abs(event.wheelDelta), event.currentTarget) : this.scrolledRight(Math.abs(event.wheelDelta), event.currentTarget);\n        }\n    }\n    rotateBox(event, eParent) {\n        this.log(event);\n        if (event.movementX && this.circularEffect) {\n            this.scroll += this.scrollAngle * event.movementX * 0.01;\n            this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n        }\n    }\n    isSameEventAndTarget(e) {\n        return e && this.currentEvent && this.currentEvent.type === e.type;\n    }\n    getDelta(e, field) {\n        return e && this.currentEvent ? e[field] - this.currentEvent[field] : 0;\n    }\n    rotate() {\n        const activeTiles = this.tiles.filter((_) => !_.empty).length;\n        const maxangle = (activeTiles - 1) * this.scrollAngle;\n        const minangle = 90;\n        if (this.scroll > maxangle) {\n            this.scroll = maxangle;\n            this.boundMaxReached();\n        }\n        else if (this.scroll < minangle) {\n            this.scroll = minangle;\n            this.boundMinReached();\n        }\n        else {\n            this.isBoundMax = false;\n            this.isBoundMin = false;\n        }\n        this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\n    }\n    log(any) {\n        if (this.debug) {\n            console.log(any);\n        }\n    }\n    boundMaxReached() {\n        this.isBoundMax = true;\n        this.maxBound.emit(true);\n    }\n    boundMinReached() {\n        this.isBoundMin = true;\n        this.minBound.emit(true);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Tiles, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.7\", type: Tiles, isStandalone: true, selector: \"dia-tiles\", inputs: { tiles: \"tiles\", selector: \"selector\", autofill: \"autofill\", emptyTpl: \"emptyTpl\", tileTemplate: \"tileTemplate\", title: \"title\", maxTiles: \"maxTiles\", wheelSpace: \"wheelSpace\", autoCompute: \"autoCompute\", forceActive: \"forceActive\", circularEffect: \"circularEffect\", scroll: \"scroll\", pourcent: \"pourcent\", minDiametre: \"minDiametre\", maxDiametre: \"maxDiametre\", forcedDiametre: \"forcedDiametre\", debug: \"debug\" }, outputs: { hasLeft: \"hasLeft\", selection: \"selection\", hasClicked: \"hasClicked\", maxBound: \"maxBound\", minBound: \"minBound\" }, host: { listeners: { \"document:resize\": \"resetTunnel($event)\" } }, viewQueries: [{ propertyName: \"tunnel\", first: true, predicate: [\"scenariMask\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"hoster\", first: true, predicate: [\"hoster\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"scroller\", first: true, predicate: [\"scroller\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"scenariContainer\", first: true, predicate: [\"scenariContainer\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"tile\", predicate: [\"tile\"], descendants: true, read: ElementRef }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"container\\\"\\n  [ngClass]=\\\"{circular:circularEffect, grabbing:grabbing, grab:!grabbing, hideComponent:circularEffect && !isCircularInitated}\\\"\\n  #container (window:resize)=\\\"resetTunnel()\\\">\\n  <div id=\\\"choices\\\" class=\\\"choices\\\" (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n    (panstart)=\\\"panStart($event)\\\" (pan)=\\\"panMoving($event)\\\" (panend)=\\\"panEnd($event)\\\" (mousemove)=\\\"mouseMove($event)\\\"\\n    (mousedown)=\\\"mouseDown($event)\\\" (mouseup)=\\\"mouseUp($event)\\\" (mouseleave)=\\\"mouseLeave($event)\\\">\\n    <div class=\\\"choicesMask\\\">\\n      <div class=\\\"TileSelection\\\">{{title}}</div>\\n      <div class=\\\"scenariContainer\\\" #scenariContainer>\\n        <div class=\\\"visibleMask\\\">\\n          <div class=\\\"scenariMask\\\" #scenariMask (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n            (swipeleft)=\\\"circularEffect? null:scrolledLeft($event)\\\"\\n            (swiperight)=\\\"circularEffect? null:scrolledRight($event)\\\">\\n            <ng-container *ngFor=\\\"let scenario of tiles; let i = index;\\\">\\n              <div *ngIf=\\\"!scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, animate:isCircularInitated, selected: scenario === selectedTile}\\\"\\n                #tile (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: scenario, itemIndex:i, carouselIndex:i, selected: scenario === selectedTile}\\\"></ng-container>\\n              </div>\\n              <div *ngIf=\\\"scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, emptyTile:scenario.empty}\\\" #tile\\n                (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"emptyTpl; context: {$implicit: scenario, selected: scenario === selectedTile, context: {$implicit: scenario, itemIndex:i, carouselIndex:i}}\\\"></ng-container>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"scrollerBox\\\" [ngClass]=\\\"{hideScroll:!active}\\\" #hoster (mousewheel)=\\\"onmouseWheel($event)\\\">\\n    <!--div class=\\\"box hide\\\" >\\n          <ng-container  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: tiles[0]}\\\"></ng-container>\\n      </div-->\\n    <dia-scroll class=\\\"scroller\\\" #scroller (scrolledLeft)=\\\"scrolledLeft($event)\\\" [scrollBuffer]=\\\"5\\\"\\n      (scrolledRight)=\\\"scrolledRight($event)\\\" [forced]=\\\"isMobile\\\" [vertical]=false></dia-scroll>\\n  </div>\\n</div>\", styles: [\":host{padding:0;margin:0}:host .container{display:flex;justify-content:center;align-items:center}:host .container.circular{width:100%}:host .container.circular.hideComponent{opacity:0}:host .container.circular.grab{cursor:grab}:host .container.circular.grabbing{cursor:grabbing}:host .container.circular.grabbing .scenariContainer{transition-duration:0ms;transition-delay:0ms}:host .cBox{position:absolute}:host animate{transition-duration:.5s;transition-delay:.5s}:host .box{position:relative;transition-duration:.5s;transition-delay:.5s}:host .box:hover{transform:scale(1.2);margin:2rem;position:relative;transition-duration:.5s;transition-delay:.5s}:host .scenariContainer{display:flex;position:relative;margin-bottom:2rem;transition-duration:.6s;transition-delay:.5s;justify-content:center;align-items:center}:host .scenariMask{transition-duration:.6s;display:flex;position:relative;justify-content:center;align-items:center}:host .scenarioBG{position:absolute;top:0%;left:0%;height:70%;width:100%}:host .scenarioBG img{width:100%;transition-duration:.6s;transition-delay:.5s;opacity:.4;-webkit-filter:grayscale(1);filter:grayscale(1)}:host .scenarioBG.color img{-webkit-filter:unset;filter:unset}:host .scenarioBG:hover img{transform:scale(1.2);opacity:.75}:host #choices.hoveringScenario{background-image:linear-gradient(45deg,#35353545,#15151545);top:70vh;height:70vh}:host .content{position:absolute;width:100%;height:100%;top:0}:host .title{position:relative;top:20%;width:80%;margin:auto;font-size:5rem;font-weight:700;transition-duration:.6s;transition-delay:.5s}:host .desc{position:relative;opacity:0;width:80%;top:70%;margin:auto;text-align:justify;transition-duration:.3s;transition-delay:.5s}:host .desc .text{width:60%}:host .actorImg{position:absolute;top:2rem;left:3rem;transition-duration:.6s;transition-delay:.5s}:host .actorImg img{transition-duration:.6s;transition-delay:.5s;border-radius:3rem;width:3rem;height:3rem;opacity:0}:host .actions{transition-duration:.6s;transition-delay:.5s;display:flex;position:absolute;right:-11.5rem;top:24%;flex-direction:column;opacity:0}:host .actions mat-icon{transition-duration:.6s;transition-delay:.5s;margin:1.5em 2em;transform:scale(2)}:host .actions mat-icon:hover{transform:scale(3)}:host .actions .act{cursor:pointer;padding:0 1em;margin:1rem 0;width:11.5rem;border:2px solid white}:host .actions .playBox{transition-duration:.6s;transition-delay:.3s;position:relative}:host .actions .favBox{transition-duration:.6s;transition-delay:.6s;position:relative;right:-200px}:host .actions .shareBox{transition-duration:.6s;transition-delay:.9s;position:relative;right:-200px}:host .TileSelection{width:100vw;display:flex;font-size:0rem;height:0px}:host .contentHovered .title{position:relative;top:35%}:host .contentHovered .actions{right:-11.5rem;opacity:1}:host .contentHovered .actions .act{background-color:#00000035;border-radius:1rem}:host .contentHovered .actions .act:hover{background-color:#00000075;border-radius:1rem;right:150px;transition-delay:0ms}:host .contentHovered .actions .playBox{right:100px}:host .contentHovered .actions .shareBox{right:100px}:host .contentHovered .actions .favBox{right:100px}:host .contentHovered .desc{opacity:1;top:40%;overflow:auto;-webkit-overflow-scrolling:touch}:host mat-icon{cursor:pointer;transition-duration:.6s;transition-delay:.5s}:host .scroller{z-index:600}:host .choices{display:flex;flex-direction:column;justify-content:flex-end;overflow:hidden;width:100%;transition-duration:.6s}:host .visibleMask{-webkit-overflow-scrolling:touch}@media only screen and (max-height: 800px),(max-width: 800px){:host .title{font-size:0rem}:host .contentHovered .title{font-size:2rem}:host #choices.hoveringScenario{top:90vh}}:host app-scroll ::ng-deep .container{z-index:600;width:3vw}:host app-scroll ::ng-deep .left{background-image:linear-gradient(90deg,black,transparent)}:host app-scroll ::ng-deep .right{background-image:linear-gradient(90deg,transparent,black)}:host app-scroll ::ng-deep .up{background-image:linear-gradient(180deg,black,transparent)}:host app-scroll ::ng-deep .bottom{background-image:linear-gradient(0deg,transparent,black)}:host .scrollerBox{transition-duration:.5s;position:absolute;left:0;width:100%;z-index:600;opacity:1}:host .hideScroll{z-index:-1;opacity:0}:host .hide{position:relative;left:-400px;opacity:0}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i5.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: Scroll, selector: \"dia-scroll\", inputs: [\"scrolledUpDisabled\", \"scrolledDownDisabled\", \"scrolledLeftDisabled\", \"scrolledRightDisabled\", \"scrollBuffer\", \"vertical\", \"horizontal\", \"forced\"], outputs: [\"scrolledUp\", \"scrolledDown\", \"scrolledLeft\", \"scrolledRight\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.7\", ngImport: i0, type: Tiles, decorators: [{\n            type: Component,\n            args: [{ selector: 'dia-tiles', standalone: true, imports: [CommonModule, Scroll], template: \"<div class=\\\"container\\\"\\n  [ngClass]=\\\"{circular:circularEffect, grabbing:grabbing, grab:!grabbing, hideComponent:circularEffect && !isCircularInitated}\\\"\\n  #container (window:resize)=\\\"resetTunnel()\\\">\\n  <div id=\\\"choices\\\" class=\\\"choices\\\" (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n    (panstart)=\\\"panStart($event)\\\" (pan)=\\\"panMoving($event)\\\" (panend)=\\\"panEnd($event)\\\" (mousemove)=\\\"mouseMove($event)\\\"\\n    (mousedown)=\\\"mouseDown($event)\\\" (mouseup)=\\\"mouseUp($event)\\\" (mouseleave)=\\\"mouseLeave($event)\\\">\\n    <div class=\\\"choicesMask\\\">\\n      <div class=\\\"TileSelection\\\">{{title}}</div>\\n      <div class=\\\"scenariContainer\\\" #scenariContainer>\\n        <div class=\\\"visibleMask\\\">\\n          <div class=\\\"scenariMask\\\" #scenariMask (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n            (swipeleft)=\\\"circularEffect? null:scrolledLeft($event)\\\"\\n            (swiperight)=\\\"circularEffect? null:scrolledRight($event)\\\">\\n            <ng-container *ngFor=\\\"let scenario of tiles; let i = index;\\\">\\n              <div *ngIf=\\\"!scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, animate:isCircularInitated, selected: scenario === selectedTile}\\\"\\n                #tile (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: scenario, itemIndex:i, carouselIndex:i, selected: scenario === selectedTile}\\\"></ng-container>\\n              </div>\\n              <div *ngIf=\\\"scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, emptyTile:scenario.empty}\\\" #tile\\n                (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"emptyTpl; context: {$implicit: scenario, selected: scenario === selectedTile, context: {$implicit: scenario, itemIndex:i, carouselIndex:i}}\\\"></ng-container>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"scrollerBox\\\" [ngClass]=\\\"{hideScroll:!active}\\\" #hoster (mousewheel)=\\\"onmouseWheel($event)\\\">\\n    <!--div class=\\\"box hide\\\" >\\n          <ng-container  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: tiles[0]}\\\"></ng-container>\\n      </div-->\\n    <dia-scroll class=\\\"scroller\\\" #scroller (scrolledLeft)=\\\"scrolledLeft($event)\\\" [scrollBuffer]=\\\"5\\\"\\n      (scrolledRight)=\\\"scrolledRight($event)\\\" [forced]=\\\"isMobile\\\" [vertical]=false></dia-scroll>\\n  </div>\\n</div>\", styles: [\":host{padding:0;margin:0}:host .container{display:flex;justify-content:center;align-items:center}:host .container.circular{width:100%}:host .container.circular.hideComponent{opacity:0}:host .container.circular.grab{cursor:grab}:host .container.circular.grabbing{cursor:grabbing}:host .container.circular.grabbing .scenariContainer{transition-duration:0ms;transition-delay:0ms}:host .cBox{position:absolute}:host animate{transition-duration:.5s;transition-delay:.5s}:host .box{position:relative;transition-duration:.5s;transition-delay:.5s}:host .box:hover{transform:scale(1.2);margin:2rem;position:relative;transition-duration:.5s;transition-delay:.5s}:host .scenariContainer{display:flex;position:relative;margin-bottom:2rem;transition-duration:.6s;transition-delay:.5s;justify-content:center;align-items:center}:host .scenariMask{transition-duration:.6s;display:flex;position:relative;justify-content:center;align-items:center}:host .scenarioBG{position:absolute;top:0%;left:0%;height:70%;width:100%}:host .scenarioBG img{width:100%;transition-duration:.6s;transition-delay:.5s;opacity:.4;-webkit-filter:grayscale(1);filter:grayscale(1)}:host .scenarioBG.color img{-webkit-filter:unset;filter:unset}:host .scenarioBG:hover img{transform:scale(1.2);opacity:.75}:host #choices.hoveringScenario{background-image:linear-gradient(45deg,#35353545,#15151545);top:70vh;height:70vh}:host .content{position:absolute;width:100%;height:100%;top:0}:host .title{position:relative;top:20%;width:80%;margin:auto;font-size:5rem;font-weight:700;transition-duration:.6s;transition-delay:.5s}:host .desc{position:relative;opacity:0;width:80%;top:70%;margin:auto;text-align:justify;transition-duration:.3s;transition-delay:.5s}:host .desc .text{width:60%}:host .actorImg{position:absolute;top:2rem;left:3rem;transition-duration:.6s;transition-delay:.5s}:host .actorImg img{transition-duration:.6s;transition-delay:.5s;border-radius:3rem;width:3rem;height:3rem;opacity:0}:host .actions{transition-duration:.6s;transition-delay:.5s;display:flex;position:absolute;right:-11.5rem;top:24%;flex-direction:column;opacity:0}:host .actions mat-icon{transition-duration:.6s;transition-delay:.5s;margin:1.5em 2em;transform:scale(2)}:host .actions mat-icon:hover{transform:scale(3)}:host .actions .act{cursor:pointer;padding:0 1em;margin:1rem 0;width:11.5rem;border:2px solid white}:host .actions .playBox{transition-duration:.6s;transition-delay:.3s;position:relative}:host .actions .favBox{transition-duration:.6s;transition-delay:.6s;position:relative;right:-200px}:host .actions .shareBox{transition-duration:.6s;transition-delay:.9s;position:relative;right:-200px}:host .TileSelection{width:100vw;display:flex;font-size:0rem;height:0px}:host .contentHovered .title{position:relative;top:35%}:host .contentHovered .actions{right:-11.5rem;opacity:1}:host .contentHovered .actions .act{background-color:#00000035;border-radius:1rem}:host .contentHovered .actions .act:hover{background-color:#00000075;border-radius:1rem;right:150px;transition-delay:0ms}:host .contentHovered .actions .playBox{right:100px}:host .contentHovered .actions .shareBox{right:100px}:host .contentHovered .actions .favBox{right:100px}:host .contentHovered .desc{opacity:1;top:40%;overflow:auto;-webkit-overflow-scrolling:touch}:host mat-icon{cursor:pointer;transition-duration:.6s;transition-delay:.5s}:host .scroller{z-index:600}:host .choices{display:flex;flex-direction:column;justify-content:flex-end;overflow:hidden;width:100%;transition-duration:.6s}:host .visibleMask{-webkit-overflow-scrolling:touch}@media only screen and (max-height: 800px),(max-width: 800px){:host .title{font-size:0rem}:host .contentHovered .title{font-size:2rem}:host #choices.hoveringScenario{top:90vh}}:host app-scroll ::ng-deep .container{z-index:600;width:3vw}:host app-scroll ::ng-deep .left{background-image:linear-gradient(90deg,black,transparent)}:host app-scroll ::ng-deep .right{background-image:linear-gradient(90deg,transparent,black)}:host app-scroll ::ng-deep .up{background-image:linear-gradient(180deg,black,transparent)}:host app-scroll ::ng-deep .bottom{background-image:linear-gradient(0deg,transparent,black)}:host .scrollerBox{transition-duration:.5s;position:absolute;left:0;width:100%;z-index:600;opacity:1}:host .hideScroll{z-index:-1;opacity:0}:host .hide{position:relative;left:-400px;opacity:0}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { tunnel: [{\n                type: ViewChild,\n                args: ['scenariMask', { read: ElementRef, static: true }]\n            }], hoster: [{\n                type: ViewChild,\n                args: ['hoster', { read: ElementRef, static: true }]\n            }], scroller: [{\n                type: ViewChild,\n                args: ['scroller', { read: ElementRef, static: true }]\n            }], container: [{\n                type: ViewChild,\n                args: ['container', { read: ElementRef, static: true }]\n            }], scenariContainer: [{\n                type: ViewChild,\n                args: ['scenariContainer', { read: ElementRef, static: true }]\n            }], tile: [{\n                type: ViewChildren,\n                args: ['tile', { read: ElementRef }]\n            }], tiles: [{\n                type: Input\n            }], selector: [{\n                type: Input\n            }], autofill: [{\n                type: Input\n            }], emptyTpl: [{\n                type: Input\n            }], tileTemplate: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], maxTiles: [{\n                type: Input\n            }], wheelSpace: [{\n                type: Input\n            }], hasLeft: [{\n                type: Output\n            }], selection: [{\n                type: Output\n            }], hasClicked: [{\n                type: Output\n            }], maxBound: [{\n                type: Output\n            }], minBound: [{\n                type: Output\n            }], autoCompute: [{\n                type: Input\n            }], forceActive: [{\n                type: Input\n            }], circularEffect: [{\n                type: Input\n            }], scroll: [{\n                type: Input\n            }], pourcent: [{\n                type: Input\n            }], minDiametre: [{\n                type: Input\n            }], maxDiametre: [{\n                type: Input\n            }], forcedDiametre: [{\n                type: Input\n            }], debug: [{\n                type: Input\n            }], resetTunnel: [{\n                type: HostListener,\n                args: ['document:resize', ['$event']]\n            }] } });\n\n/*\n * Public API Surface of dia-utils-libs\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClickedOutsideDirective, DiaUtilsLibsModule, Dossier, DossierBloc, InputDatePicker, InputRangeDate, Inputs, IsNumericDirective, ModelOption, Scroll, Select, Textarea, Tiles };\n//# sourceMappingURL=dia-utils-libs.mjs.map\n","map":null,"preliminaryFileName":"dia-utils-libs.mjs","sourcemapFileName":"dia-utils-libs.mjs.map"},{"fileName":"dia-utils-libs.mjs.map","names":[],"needsCodeReference":false,"originalFileName":null,"originalFileNames":[],"source":"{\"version\":3,\"file\":\"dia-utils-libs.mjs\",\"sources\":[\"../../src/lib/dia-utils-libs.module.ts\",\"../../src/lib/common/Dossier.ts\",\"../../src/lib/common/model-option.ts\",\"../../src/lib/input/input.ts\",\"../../src/lib/input/input.html\",\"../../src/lib/input-date-picker/input-date-picker.ts\",\"../../src/lib/input-date-picker/input-date-picker.html\",\"../../src/lib/directives/is-numeric.directive.ts\",\"../../src/lib/directives/clicked-outside.directive.ts\",\"../../src/lib/select/select.ts\",\"../../src/lib/select/select.html\",\"../../src/lib/textarea/textarea.ts\",\"../../src/lib/textarea/textarea.html\",\"../../src/lib/dossier/dossier.ts\",\"../../src/lib/dossier/dossier.html\",\"../../src/lib/input-range-date/input-range-date.ts\",\"../../src/lib/input-range-date/input-range-date.html\",\"../../src/lib/scroll/scroll.ts\",\"../../src/lib/scroll/scroll.html\",\"../../src/lib/tiles/tiles.ts\",\"../../src/lib/tiles/tiles.html\",\"../../src/public-api.ts\",\"../../src/dia-utils-libs.ts\"],\"sourcesContent\":[\"import { NgModule } from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\\nimport { MatFormFieldModule } from '@angular/material/form-field';\\nimport { MatInputModule } from '@angular/material/input';\\nimport { MatIconModule } from '@angular/material/icon';\\nimport { MatDatepickerModule } from '@angular/material/datepicker';\\nimport { MatTooltipModule } from '@angular/material/tooltip';\\n\\n\\n@NgModule({\\n  declarations: [\\n  ],\\n  imports: [\\n    CommonModule,\\n    FormsModule,\\n    ReactiveFormsModule,\\n    MatFormFieldModule,\\n    MatInputModule,\\n    MatIconModule,\\n    MatDatepickerModule,\\n    MatTooltipModule\\n  ],\\n  exports: [\\n\\n  ]\\n})\\nexport class DiaUtilsLibsModule { }\",\"import { IFormatInput } from \\\"./IFormatInput\\\";\\nimport { ModelOption } from \\\"./model-option\\\"; \\nimport { IFormGroupConfig } from \\\"./IFormGroupConfig\\\";\\nimport { IAdvancedCustom } from \\\"./IAdvancedCustom\\\";\\nimport { Validators } from \\\"@angular/forms\\\";\\nimport { FormControl } from \\\"@angular/forms\\\";\\n\\nexport class Dossier {\\n    static service?: any;\\n    static amountFormatter?: IFormatInput;\\n    static prefix?:string = '';\\n    linkParam?: number;\\n    type?: string;\\n    className?: string;\\n    onclick?: (_: any) => {};\\n    onchange?: (_: any) => {};\\n    title?: string;\\n    icon?: string;\\n    iconAction?: (...args: any[]) => {};\\n    list?: Dossier[];\\n    custom?: boolean;\\n    model?: any;\\n    field?: any;\\n    data?: any;\\n    value?: string | number;\\n    isNumber?: boolean;\\n    isDecimal?: boolean|undefined;\\n    isDate?: boolean;\\n    minDate?: Date;\\n    maxDate?: Date;\\n    noLine?: boolean;\\n    minrows?: number;\\n    isRadio?: boolean;\\n    possibleValues?: ModelOption[];\\n    hide?: boolean;\\n    suffix?: string;\\n    tooltip?: string;\\n    nbColumns?: number;\\n    maxLength?: number;\\n    minLength?: number;\\n    disableVisualHelp?: boolean;\\n    disabled?: boolean;\\n    required?: boolean|undefined;\\n    formGroupConfig?: IFormGroupConfig;\\n    customFormat?: IFormatInput;\\n    advancedCustoms?: IAdvancedCustom[];\\n    selectValues?: any[];\\n    placeholder?: string;\\n    getErrorMsg?: (_: Dossier) => {};\\n    // fix JIRA 1060\\n    sizeColumn?: number;\\n    indexColumn?: number;\\n    countDown?: boolean;\\n    modifiable?: boolean;\\n    isTextarea?: boolean;\\n    customClass?: string;\\n    fill?: boolean;\\n    constructor(title:string, list:Dossier[], value:string|number) {\\n        this.title = title;\\n        this.list = list;\\n        this.value = value;\\n    }\\n    static isDefined(val: any): boolean {\\n        return val !== null && val !== undefined;\\n    }\\n    static getEmptyDossier() {\\n        return new Dossier('####', [],  null as any);\\n    }\\n    static setByModel(title:string, model:any, field:string, custom?:any) {\\n        return Dossier.set(title, model[field], custom, model, field)\\n    }\\n    static set(title:string, value:any, custom?:any, model?:any, field?:string) {\\n        if (custom && custom.formGroupConfig) {\\n            if (custom.formGroupConfig.validators && custom.formGroupConfig.validators.filter((_:any) => _ === Validators.required)) {\\n                custom.required = true;\\n            }\\n            this.formBuild(value, custom.formGroupConfig)\\n        }\\n        if (value && typeof value !== 'string') {\\n            value = value['libelle'] ? value['libelle'] : value;\\n            if ((value).montant) {\\n                value = (value).montant;\\n                if ((value).devise) {\\n                    custom =\\n                        custom && typeof custom !== 'string'\\n                            ? () => (custom.suffix = (value).devise)\\n                            : custom;\\n                }\\n            }\\n            value =\\n                value && custom && custom.isDate && typeof value !== 'number'\\n                    ? (<Date>value).getTime()\\n                    : value;\\n            value =\\n                value && typeof value === 'number' && (!custom || !custom.isDate)\\n                    ? this.amountFormatter?.transform(value)\\n                    : value;\\n            // si aucun match trouvé on afiche une valeur vide\\n            value =\\n                value && typeof value !== 'string' && typeof value !== 'number'\\n                    ? ''\\n                    : value;\\n        }\\n        if (custom && typeof custom !== 'string') {\\n            const toReturn = {\\n                title: title, value: value, model: model,\\n                field: field\\n            };\\n            Object.keys(custom).map((field:string, index:number) => {\\n                (toReturn as any)[field] = custom[field];\\n            });\\n            return toReturn;\\n        } else if (custom) {\\n            return {\\n                title: title,\\n                value: value,\\n                model: model,\\n                field: field,\\n                suffix: this.service.instant(custom)\\n                    ? this.service.instant(this.prefix + custom)\\n                    : custom\\n            };\\n        } else {\\n            return {\\n                title: title,\\n                value: value,\\n                model: model,\\n                field: field\\n            };\\n        }\\n    }\\n    static build(title:string, list:Dossier[], multi?:Dossier[], custom?:any) {\\n        const toReturn = {\\n            value: null,\\n            title: title,\\n            list: multi\\n                ? multi\\n                : [\\n                    {\\n                        value: null,\\n                        title: null,\\n                        list: list\\n                    }\\n                ]\\n        };\\n        if (custom) {\\n            Object.keys(custom).map((field, index) => {\\n                (toReturn as any)[field] = custom[field];\\n            });\\n        }\\n        return toReturn;\\n    }\\n    static formBuild(value:any, config: IFormGroupConfig) {\\n        config.form.addControl(config.formName, new FormControl(value, config.validators, config.asyncValidators));\\n    }\\n    static bloc(title:string, list:Dossier[]) {\\n        return new Dossier(title, list, null as any);\\n    }\\n}\",\"export class ModelOption {\\n  libelle: string;\\n  value: string;\\n  data: any;\\n  constructor(lib: string, val: string, dat?:any) {\\n    this.libelle = lib;\\n    this.value = val;\\n    this.data = dat;\\n  }\\n\\n  static setUniqueValue(lib: string): ModelOption {\\n    return new ModelOption(lib, lib, null);\\n  }\\n\\n}\\n\",\"import { CommonModule } from '@angular/common';\\nimport {\\n  Component,\\n  Input,\\n  Output,\\n  EventEmitter,\\n  ElementRef,\\n  Renderer2,\\n  OnInit,\\n  forwardRef,\\n  HostListener,\\n  ViewChild,\\n  OnChanges,\\n  SimpleChanges,\\n  AfterViewInit,\\n  Optional,\\n  SkipSelf,\\n  Host,\\n  Self,\\n  AfterViewChecked\\n} from '@angular/core';\\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\\nimport {\\n  ControlValueAccessor,\\n  FormGroup,\\n  FormGroupDirective,\\n  AbstractControl,\\n  FormControl,\\n  NG_VALUE_ACCESSOR,\\n  ControlContainer\\n} from '@angular/forms';\\nimport { MatFormFieldModule } from '@angular/material/form-field';\\nimport { MatInputModule } from '@angular/material/input';\\nimport { MatTooltipModule } from '@angular/material/tooltip';\\nimport { IFormatInput } from '../common/IFormatInput';\\n\\n@Component({\\n  selector: 'dia-input',\\n  standalone: true,\\n  templateUrl: './input.html',\\n  styleUrls: ['./input.css'],\\n  imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule],\\n  providers: [\\n    {\\n      provide: NG_VALUE_ACCESSOR,\\n      multi: true,\\n      useExisting: forwardRef(() => Inputs)\\n    }\\n  ]\\n})\\nexport class Inputs implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\\n  @ViewChild('formatInput', { static: false }) formatInput: ElementRef | undefined;\\n  @ViewChild('input', { static: false }) input: ElementRef | undefined;\\n  @ViewChild('computeWidth', { static: false }) computeWidth: ElementRef | undefined;\\n\\n  @Input() displayAsLabel: boolean = false;\\n  @Input() label: string= '';\\n  @Input() required: boolean|undefined = false;\\n  @Input() format: string= '';\\n  @Input() placeholder: string|undefined= '';\\n  @Input() hidden: string|undefined= '';\\n  @Input() description: string|undefined= '';\\n  @Input() disabled: boolean|undefined = false;\\n  @Input() isDatePicker: boolean = false;\\n  @Input() readonlyInput: boolean|undefined = false;\\n  @Input() readonly: boolean|undefined = false;\\n  @Input() type: string|undefined= '';\\n  @Input() min: number= 0;\\n  @Input() max: number= 0;\\n  @Input() minDate: number= 0;\\n  @Input() maxDate: number= 0;\\n  @Input() maxLength: number | undefined;\\n  maxLengthFormat: number | undefined;\\n  @Input() minLength: number | undefined;\\n  @Input() unit: string= '';\\n  @Input() name: string|undefined= '';\\n  @Input() cancellable: boolean = false;\\n  @Input() searching: boolean = false;\\n  @Input() value: string | boolean|undefined= '';\\n  @Input() customFormat: IFormatInput | undefined;\\n  @Input() icon: string | undefined;\\n  @Input() errorMsg: string | undefined;\\n  @Input() isError: boolean = false;\\n  @Output() valueChange = new EventEmitter<any>();\\n  @Output() cancelValue = new EventEmitter<any>();\\n  formattedValue: string = '';\\n  @Input() defaultControl: boolean = false;\\n  @Input() matDatepicker: any;\\n  @Output() dateChange = new EventEmitter<any>();\\n  @Input() visualHelpDisabled: boolean|undefined = false;\\n  @Input() isDateControl: boolean = false;\\n  currentControl: AbstractControl | undefined;\\n  @Input() formControl: FormControl = new FormControl();\\n  @Output() iconWasClicked = new EventEmitter<any>();\\n  @Output() wasDblClicked = new EventEmitter<any>();\\n  @Input() iconAction: (() => any) | undefined;\\n  tooltipText: string = '';\\n  onChange = (_: any) => {};\\n  onTouched = (_: any) => {};\\n\\n  constructor(\\n    private el: ElementRef,\\n    private renderer: Renderer2,\\n    @Optional() @Host() @SkipSelf() private controlContainer: ControlContainer\\n  ) {}\\n\\n  ngOnInit() {\\n    if (this.formatInput && this.formatInput.nativeElement.readonly !== this.readonlyInput) {\\n      this.formatInput.nativeElement.readonly = this.readonlyInput;\\n    }\\n    if (this.input && this.input.nativeElement.readonly !== this.readonlyInput) {\\n      this.input.nativeElement.readonly = this.readonlyInput;\\n    }\\n    if (this.defaultControl) {\\n      this.formControl = new FormControl(this.value);\\n      if (this.input) {\\n        this.input.nativeElement.formControl = this.formControl;\\n      }\\n      if (this.formatInput) {\\n        this.formatInput.nativeElement.formControl = this.formControl;\\n      }\\n    }\\n    if (this.controlContainer && (this.format || this.customFormat)) {\\n      const form = this.controlContainer.control as FormGroup;\\n      const lbl = this.el.nativeElement.getAttribute('formControlName');\\n      if (form) {\\n        const control = form.controls[lbl] as FormControl;\\n      }\\n    }\\n  }\\n\\n  f_dateChange() {\\n    this.dateChange.emit();\\n  }\\n\\n  gets(obs: any) {\\n    if (obs) {\\n      return obs;\\n    } else {\\n      return {};\\n    }\\n  }\\n\\n  ngAfterViewChecked(): void {\\n    if (this.value && (this.format || this.customFormat)) {\\n      if (!((this.formattedValue + '').endsWith('.'))) {\\n        this.formattedValue = this.transform(this.value);\\n      }\\n    }\\n    if (this.controlContainer && this.el) {\\n      let fname = this.el.nativeElement.getAttribute('formControlName');\\n      fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\\n      fname = fname ? fname : (this.input ? this.input.nativeElement.name : undefined);\\n      const fgroupDirective = this.gets(this.controlContainer) as FormGroupDirective;\\n      if (fgroupDirective && fgroupDirective.form) {\\n        this.currentControl = fgroupDirective.form.controls[fname];\\n        if (this.currentControl) {\\n          if (this.currentControl.validator) {\\n            const validator = this.currentControl.validator({} as AbstractControl);\\n            if (validator && validator['required']) {\\n              this.required = true;\\n            }\\n          }\\n        }\\n      }\\n    }\\n    if (!this.visualHelpDisabled && this.textOverflow()) {\\n      this.tooltipText = this.value + '';\\n    } else {\\n      this.tooltipText = '';\\n    }\\n  }\\n\\n  textOverflow() {\\n    const currentWitdh = this.formatInput\\n      ? this.formatInput.nativeElement.clientWidth\\n      : this.input?.nativeElement.clientWidth;\\n    return this.computeWidth && this.computeWidth.nativeElement.clientWidth > (currentWitdh || 0) + 5;\\n  }\\n\\n  ngOnChanges(changes: SimpleChanges) {\\n    if (this.label === 'Montant') {\\n      //console.log(changes);\\n    }\\n    if (\\n      (this.format || this.customFormat) &&\\n      changes['value'] &&\\n      changes['value'].currentValue !== this.parse(this.formattedValue)\\n    ) {\\n      this.formattedValue = this.transform(changes['value'].currentValue);\\n      if (this.formatInput) {\\n        this.formatInput.nativeElement.value = this.formattedValue;\\n      }\\n    }\\n  }\\n\\n  change(newValue: any) {\\n    this.writeValue(newValue);\\n    this.valueChange.emit(newValue);\\n    this.onChange(this.value);\\n    if ((this.format || this.customFormat) && this.formatInput) {\\n      this.formatInput.nativeElement.value = this.formattedValue;\\n    }\\n  }\\n\\n  changeFormat(newValue: any) {\\n    this.formattedValue = this.transform(newValue);\\n    const offset = this.formattedValue.split(' ').length - 1;\\n    if (offset && offset > 0 && this.maxLength) {\\n      this.maxLengthFormat = this.maxLength + offset;\\n    }\\n    const unformattedValue = this.parse(this.formattedValue);\\n    this.change(unformattedValue);\\n  }\\n\\n  cancel(data: any) {\\n    this.formattedValue = '';\\n    this.value = '';\\n    this.cancelValue.emit(data);\\n  }\\n\\n  writeValue(value: any): void {\\n    this.value = value;\\n  }\\n\\n  registerOnChange(fn: any): void {\\n    this.onChange = fn;\\n  }\\n\\n  registerOnTouched(fn: any): void {\\n    this.onTouched = fn;\\n  }\\n\\n  setDisabledState?(isDisabled: boolean): void {\\n    this.disabled = isDisabled;\\n  }\\n\\n  transform(val: any) {\\n    let valStr = '';\\n    let arr;\\n    if (this.format) {\\n      switch (this.format) {\\n        case 'siren':\\n          valStr = val + '';\\n          valStr = this.parse(valStr) + '';\\n          arr = valStr.split('');\\n          valStr = '';\\n          arr.map((c: string) => {\\n            valStr += c;\\n            if (\\n              valStr.replace(/ /g, '').length % 3 === 0 &&\\n              arr.length > valStr.replace(/ /g, '').length\\n            ) {\\n              valStr += ' ';\\n            }\\n          });\\n          break;\\n        case 'amount':\\n          let decPart = '';\\n          if (this.min && val < this.min) {\\n            val = this.min + '';\\n          }\\n          if (this.max && val > this.max) {\\n            val = this.max + '';\\n          }\\n          valStr = val + '';\\n          valStr = this.parse(valStr);\\n          if (valStr === '') {\\n            return '';\\n          }\\n          if (valStr.indexOf('.')) {\\n            decPart = valStr.split('.')[1];\\n            valStr = valStr.split('.')[0];\\n          }\\n          if (this.maxLength && valStr.length > this.maxLength) {\\n            valStr = valStr.substring(0, this.maxLength);\\n          }\\n          arr = valStr.split('');\\n          valStr = '';\\n          arr.reverse().map((c: string) => {\\n            valStr += c;\\n            if (\\n              valStr.replace(/ /g, '').length % 3 === 0 &&\\n              arr.length > valStr.replace(/ /g, '').length\\n            ) {\\n              valStr += ' ';\\n            }\\n          });\\n          valStr = valStr.split('').reverse().join('');\\n          if (decPart && decPart !== '') {\\n            valStr += '.' + decPart;\\n          }\\n          break;\\n      }\\n    } else {\\n      valStr = this.customFormat ? this.customFormat.transform(val) : val;\\n    }\\n    return valStr;\\n  }\\n\\n  parse(val: any) {\\n    let valStr = '';\\n    if (this.format) {\\n      switch (this.format) {\\n        case 'siren':\\n          valStr = val + '';\\n          valStr = valStr.replace(/ /g, '');\\n          if (this.maxLength && valStr.length > this.maxLength) {\\n            valStr = valStr.substring(0, this.maxLength);\\n          }\\n          break;\\n        case 'amount':\\n          valStr = val + '';\\n          if (valStr.substring(valStr.length - 1, 1) === '.') {\\n            valStr = valStr.replace('.', '');\\n          }\\n          valStr = valStr.replace(/ /g, '');\\n          if (valStr === '') {\\n            return '';\\n          }\\n          let valNum = Number(valStr);\\n          if (this.min && valNum < this.min) {\\n            valNum = this.min;\\n          }\\n          if (this.max && valNum > this.max) {\\n            valNum = this.max;\\n          }\\n          valStr = valNum + '';\\n          if (this.maxLength && valStr.length > this.maxLength) {\\n            valStr = valStr.substring(0, this.maxLength);\\n          }\\n          break;\\n      }\\n    } else {\\n      valStr = this.customFormat ? this.customFormat.parse(val) : val;\\n    }\\n    return valStr;\\n  }\\n\\n  iconClicked(e: Event) {\\n    this.iconWasClicked.emit(true);\\n    if (this.iconAction) {\\n      this.iconAction();\\n    }\\n  }\\n\\n  dblClicked(e: Event) {\\n    this.wasDblClicked.emit(true);\\n  }\\n}\\n\",\"<!--div *ngIf=\\\"label\\\" [innerHTML]=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\"></div-->\\n<div class=\\\"zone-description\\\" [ngClass]=\\\"{inputAsLabel:displayAsLabel}\\\" [matTooltip]=\\\"tooltipText\\\">\\n  <mat-form-field appearance=\\\"outline\\\" [ngClass]=\\\"{hidden: hidden,  datePickerInput:isDateControl}\\\" >\\n    <mat-label>{{ placeholder ? placeholder : label ? label : '                  ' }}</mat-label>\\n\\n    <input\\n      matInput\\n      #formatInput\\n      name=\\\"formatInput\\\"\\n      *ngIf=\\\"format || customFormat\\\"\\n      [attr.hidden]=\\\"hidden\\\"\\n      [ngModel]=\\\"formattedValue\\\"\\n      (keyup)=\\\"changeFormat($event.target)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n    <input\\n      matInput\\n      *ngIf=\\\"!defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [required]=\\\"required||false\\\"\\n      [readonly]=\\\"readonly||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n    <input\\n      matInput\\n      *ngIf=\\\"defaultControl && !isDateControl\\\"\\n      #input\\n      [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n      [ngModel]=\\\"value\\\"\\n      (ngModelChange)=\\\"change($event)\\\"\\n      (blur)=\\\"onTouched($event)\\\"\\n      [attr.disabled]=\\\"disabled ? '' : null\\\"\\n      [attr.type]=\\\"type\\\"\\n      [attr.name]=\\\"name ? name : 'input'\\\"\\n      [attr.min]=\\\"min\\\"\\n      [attr.max]=\\\"max\\\"\\n      [formControl]=\\\"formControl\\\"\\n      [required]=\\\"required||false\\\"\\n      autocomplete=\\\"off\\\"\\n    />\\n\\n  <input\\n    matInput\\n    *ngIf=\\\"isDateControl\\\"\\n    #input\\n    [attr.hidden]=\\\"hidden || format || customFormat\\\"\\n    [attr.name]=\\\"name ? name : 'input'\\\"\\n    [ngModel]=\\\"value\\\"\\n    (ngModelChange)=\\\"change($event)\\\"\\n    (blur)=\\\"onTouched($event)\\\"\\n    [attr.disabled]=\\\"disabled ? '' : null\\\"\\n    [attr.type]=\\\"type\\\"\\n    [min]=\\\"minDate\\\"\\n    [max]=\\\"maxDate\\\"\\n    [required]=\\\"required||false\\\"\\n    [readonly]=\\\"readonly||false\\\"\\n    autocomplete=\\\"off\\\"\\n    (dateChange)=\\\"f_dateChange()\\\"\\n  />\\n    <mat-icon class=\\\"clickable\\\" *ngIf=\\\"cancellable && value\\\" (click)=\\\"cancel($event)\\\" matSuffix\\n      >highlight_off</mat-icon>\\n    <mat-icon *ngIf=\\\"searching && !value\\\" matSuffix>search</mat-icon>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n      unit\\n    }}</span>\\n    <div\\n      *ngIf=\\\"description\\\"\\n      class=\\\"description\\\"\\n      [innerHTML]=\\\"description\\\"\\n    ></div>\\n    <ng-content></ng-content>\\n  </mat-form-field>\\n</div>\\n<div id=\\\"hidden\\\" #computeWidth>\\n    {{value}}\\n  </div>\\n\",\"import { Component, EventEmitter, forwardRef, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\\nimport { MatDatepickerModule } from '@angular/material/datepicker';\\nimport { MatFormFieldModule } from '@angular/material/form-field';\\nimport { MatInputModule } from '@angular/material/input';\\nimport { MatIconModule } from '@angular/material/icon';\\nimport { Inputs } from '../input/input';\\nimport { CommonModule } from '@angular/common';\\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\\n\\n@Component({\\n  selector: 'dia-input-date-picker',\\n  imports: [Inputs, MatDatepickerModule, MatFormFieldModule, MatInputModule, MatIconModule, CommonModule],\\n  templateUrl: './input-date-picker.html',\\n  styleUrl: './input-date-picker.css',\\n  providers: [\\n    /*{\\n      provide: DateAdapter,\\n      useClass: MomentDateAdapter,\\n      deps: [MAT_DATE_LOCALE]\\n    },*/\\n    { provide: MAT_DATE_FORMATS, useValue: MAT_DATE_FORMATS },\\n    {\\n      provide: NG_VALUE_ACCESSOR,\\n      multi: true,\\n      useExisting: forwardRef(() => InputDatePicker),\\n    }\\n  ],\\n  encapsulation: ViewEncapsulation.None\\n})\\nexport class InputDatePicker implements ControlValueAccessor, OnChanges, OnInit  {\\n\\n  @Input() label: string='';\\n  @Input() customDatePicker: boolean=false;\\n  @Input() placeholder = 'Date';\\n  @Input() minDate: Date|undefined;\\n  @Input() maxDate: Date|undefined;\\n  @Output() dateChange = new EventEmitter();\\n  popupVisible = false;\\n  formControlDate = new FormControl();\\n  // Warning localDate via l'input date est la vraie valeur prise en compte pour la date\\n  localDate: Date|undefined;\\n  disabledf = false;\\n  onChanged = (_?: any) => {};\\n  onTouched = (_?: any) => {};\\n  //value n'est pas la valeur utilisé par le composant\\n  @Input()\\n  value: Date|undefined;\\n  @Output()\\n  valueChange: EventEmitter<Date> = new EventEmitter();\\n\\n  @Input()\\n  required: boolean=false;\\n\\n  constructor(private dateAdapter: DateAdapter<any>) {\\n    dateAdapter.setLocale('fr');\\n  }\\n\\n  ngOnInit(): void {\\n    if (this.required) {\\n      this.formControlDate.setValidators(Validators.required);\\n    }\\n  }\\n  ngOnChanges(changes: SimpleChanges): void {\\n    // Fix JIRA 848\\n    if (changes['value'] && changes['value'].currentValue === undefined) {\\n      this.formControlDate.reset();\\n    }\\n    if (changes['value'] && changes['value'].currentValue ) {\\n      this.formControlDate.reset();\\n    }\\n\\n  }\\n\\n  writeValue(obj: any): void {\\n    this.value = obj;\\n    this.date =  this.value;// ? this.value.getTime() : this.value;\\n  }\\n  registerOnChange(fn: any): void {\\n   this.onChanged = fn;\\n  }\\n  registerOnTouched(fn: any): void {\\n    this.onTouched = fn;\\n  }\\n  setDisabledState?(isDisabled: boolean): void {\\n    this.disabled = isDisabled;\\n  }\\n\\n\\n  @Input() // getter and setter de la date\\n  set date(date) {\\n    if (date !== null && date !== undefined) {\\n      this.localDate = new Date(date);\\n    } else {\\n      delete this.localDate ;\\n    }\\n    this.formControlDate = new FormControl(this.localDate);\\n  }\\n  get date() {\\n    return this.localDate;\\n  }\\n\\n  @Input()\\n  set disabled(disabled) {\\n    this.disabledf = disabled;\\n    if (this.disabledf) {\\n      this.formControlDate.disable();\\n    } else {\\n      this.formControlDate.enable();\\n    }\\n  }\\n\\n  get disabled() {\\n    return this.disabledf;\\n  }\\n\\n  // détection de changement et renvoi automatique de la nouvelle valeur.\\n  onChange() {\\n    if (this.formControlDate.value === null ) {\\n      delete this.localDate ;\\n    } else {\\n      this.localDate = new Date(this.formControlDate.value);\\n    }\\n    this.writeValue(this.localDate);\\n    this.dateChange.emit(this.localDate);\\n    this.onChanged(this.value);\\n  }\\n}\\n\\n\",\"<div class=\\\"container\\\" (click)=\\\"onTouched()\\\">\\n    <!-- mat-form-field appearance=\\\"outline\\\" (click)=\\\"picker.open()\\\"-->\\n    <div (click)=\\\"picker.open()\\\">\\n      <!-- <mat-label\\n        *ngIf=\\\"label\\\"\\n        [innerHTML]=\\\"label\\\"\\n        [ngClass]=\\\"['formlabel']\\\"\\n      ></mat-label> -->\\n      <dia-input\\n        [isDateControl]=\\\"true\\\"\\n        [required]=\\\"required\\\"\\n        [matDatepicker]=\\\"picker\\\"\\n        [minDate]=\\\"minDate?.getTime()||0\\\"\\n        [maxDate]=\\\"maxDate?.getTime()||0\\\"\\n        [placeholder]=\\\"placeholder\\\"\\n        [formControl]=\\\"formControlDate\\\"\\n        (dateChange)=\\\"onChange()\\\"\\n        [icon]=\\\"'calendar_today'\\\"\\n        [visualHelpDisabled]=\\\"true\\\"\\n      >\\n      </dia-input>\\n     <!--  <mat-icon matSuffix>calendar_today</mat-icon> -->\\n      <mat-datepicker\\n        #picker\\n        (closed)=\\\"popupVisible = false\\\"\\n        (opened)=\\\"popupVisible = true\\\"\\n      ></mat-datepicker>\\n    <!--/mat-form-field-->\\n    </div>\\n  </div>\\n  \",\"import {\\n    Directive,\\n    ElementRef,\\n    Renderer2,\\n    HostListener,\\n    Input,\\n    ViewContainerRef\\n} from '@angular/core';\\n\\n@Directive({\\n    selector: '[appIsNumeric]'\\n})\\nexport class IsNumericDirective {\\n    regExIsNum = new RegExp('^[0-9]d{0,2}$');\\n    regExIsNumber = new RegExp('^[0-9]*$');\\n    regExIsAlphabet = new RegExp('[A-Za-z]');\\n    component: any;\\n    nextValue: string='';\\n    @Input() isDecimal: boolean|undefined=false;\\n    @Input() disable: boolean|undefined=false;\\n\\n    isControl = false;\\n    @Input() appIsNumeric: string='';\\n    constructor(private el: ViewContainerRef, private renderer: Renderer2) {\\n\\n    }\\n\\n    @HostListener('keydown', ['$event'])\\n    onkeyup($e: KeyboardEvent) {\\n        if (!this.disable) {\\n            if (!this.regExIsNum.test($e.key) && !this.isControl) {\\n                //console.log($e.key);\\n                if (\\n                    ($e.key.length === 1 ||\\n                        $e.key === 'Multiply' ||\\n                        $e.key === 'Subtract' ||\\n                        $e.key === 'Add' ||\\n                        $e.key === 'Divide') &&\\n                    !($e.key === '.' && this.isDecimal)\\n                ) {\\n                    $e.preventDefault();\\n                }\\n            }\\n            if ($e.key !== 'Control' && this.isControl) {\\n                this.isControl = false;\\n            }\\n            if ($e.key === 'Control') {\\n                this.isControl = true;\\n                // this.nextValue = document.execCommand('Paste');\\n            }\\n        }\\n    }\\n    @HostListener('paste', ['$event']) blockPaste(e:any) {\\n        const val = e.clipboardData.getData('Text').split(' ').join('');\\n        if (!this.disable && e.clipboardData && !this.regExIsNumber.test(val)) {\\n            e.preventDefault();\\n        }\\n    }\\n}\\n\",\"import {\\n  Directive,\\n  ElementRef,\\n  Output,\\n  EventEmitter,\\n  HostListener,\\n  Input,\\n  AfterViewInit\\n} from '@angular/core';\\n\\n@Directive({\\n  selector: '[appClickedOutside]'\\n})\\nexport class ClickedOutsideDirective implements AfterViewInit {\\n  @Input() looseCheck = false;\\n  @Input() trackEphemeraElement = false;\\n  @Input() hasleftFor: number=0;\\n  @Output() hasLeft = new EventEmitter<any>();\\n  @Output() clickedOutside = new EventEmitter<any>();\\n  @Output() blur = new EventEmitter<any>();\\n  public lastElement: any;\\n  public componentList: ElementRef[] = [];\\n  @Input() compList: ElementRef[] = [];\\n  @Output() compListChange = new EventEmitter<ElementRef[]>();\\n  mouseIsOver = false;\\n  mouseleavedAlready = false;\\n  overSuspended = false;\\n  @Input() debug = false;\\n  index = 0;\\n  constructor(private el: ElementRef) {}\\n  ngAfterViewInit() {\\n    this.componentList.push(this.el);\\n  }\\n  @HostListener('document:click', ['$event.target'])\\n  public onclick(targetElement: any) {\\n    if (!this.contains(targetElement) && (this.isInDocument(targetElement) || this.looseCheck)) {\\n      this.clickedOutside.emit({ target: targetElement, src: this.el.nativeElement });\\n      if ((this.lastElement && this.contains(this.lastElement)) || (this.trackEphemeraElement && this.lastElement && this.lastElement.usedTobePartOf)) {\\n        this.blur.emit({ target: targetElement, src: this.el.nativeElement, last: this.lastElement });\\n      }\\n    }\\n    this.lastElement = targetElement;\\n  }\\n  isInDocument(targetElement: any) {\\n    return targetElement === document.body ? false : document.body.contains(targetElement);\\n  }\\n  contains(el: any) {\\n    let contains = false;\\n    this.componentList.forEach(it => {\\n      if (it.nativeElement.contains(el)) contains = true;\\n    });\\n    this.compList.forEach(it => {\\n      if (it.nativeElement.contains(el)) contains = true;\\n    });\\n    if (this.trackEphemeraElement && contains) {\\n      el.usedTobePartOf = true;\\n    }\\n    if (this.debug) {\\n      console.log(el.className + ': fait' + (contains ? '' : 'pas') + 'parti');\\n    }\\n    return contains;\\n  }\\n  @HostListener('mousemove', ['$event.target'])\\n  onmouseover(el: any) {\\n    this.mouseIsOver = true;\\n  }\\n  @HostListener('mouseleave', ['$event.target'])\\n  onmouseleave(el?: any) {\\n    if (this.hasleftFor) {\\n      if (this.mouseleavedAlready && !this.mouseIsOver && !this.overSuspended) {\\n        this.hasLeft.emit(el);\\n      } else if (!this.mouseleavedAlready) {\\n        setTimeout(() => {\\n          this.onmouseleave();\\n        }, this.hasleftFor);\\n        this.mouseleavedAlready = true;\\n        this.mouseIsOver = false;\\n        return;\\n      }\\n    }\\n    this.mouseleavedAlready = false;\\n    this.mouseIsOver = false;\\n  }\\n  public suspendOverDetection() {\\n    this.mouseIsOver = true;\\n    this.overSuspended = true;\\n  }\\n  public resumeOverDetection() {\\n    this.overSuspended = false;\\n  }\\n}\\n\",\"\\nimport {\\n    Component,\\n    Input,\\n    ViewChild,\\n    EventEmitter,\\n    Output,\\n    ChangeDetectionStrategy,\\n    forwardRef,\\n    ViewEncapsulation,\\n    OnChanges,\\n    SimpleChanges,\\n    OnInit,\\n    AfterViewInit,\\n    AfterViewChecked,\\n    Optional,\\n    ElementRef,\\n    Host,\\n    SkipSelf\\n} from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, ControlValueAccessor, AbstractControl, ControlContainer, FormGroupDirective } from '@angular/forms';\\nimport { MatSelect } from '@angular/material/select';\\nimport { FloatLabelType, MatFormFieldModule } from '@angular/material/form-field';\\nimport { MatSelectModule } from '@angular/material/select';\\nimport { MatOptionModule } from '@angular/material/core';\\nimport { MatTooltipModule } from '@angular/material/tooltip';\\nimport { ClickedOutsideDirective } from '../directives/clicked-outside.directive';\\nimport { ModelOption } from '../common/model-option';\\n\\n@Component({\\n    selector: 'dia-select',\\n    templateUrl: './select.html',\\n    styleUrls: ['./select.css'],\\n    standalone: true,\\n    imports: [\\n        CommonModule,\\n        FormsModule,\\n        ReactiveFormsModule,\\n        MatFormFieldModule,\\n        MatSelectModule,\\n        MatOptionModule,\\n        MatTooltipModule,\\n        ClickedOutsideDirective\\n    ],\\n    providers: [\\n        {\\n            provide: NG_VALUE_ACCESSOR,\\n            multi: true,\\n            useExisting: forwardRef(() => Select)\\n        }\\n    ],\\n    changeDetection: ChangeDetectionStrategy.OnPush,\\n    encapsulation: ViewEncapsulation.Emulated\\n})\\nexport class Select implements ControlValueAccessor, OnChanges, OnInit, AfterViewInit, AfterViewChecked {\\n    @Input() value: ModelOption | null = null;\\n    @Input() required: boolean= false;\\n    @Input() defaultValue: boolean = true;\\n    @Input() fixPlaceholder: boolean = false;\\n    @Input() values: ModelOption[] | null = [];\\n    @Input() forced: ModelOption[] | null = [];\\n    @Input() list: ModelOption[] = [];\\n    @Input() placeholder: string|undefined= '';\\n    @Input() disablePlaceHolder: boolean = true;\\n    @Input() label: string|undefined= '';\\n    @Input() description: string|undefined= '';\\n    @Input() multiple: boolean = false;\\n    @Input() defaultSort: boolean = true;\\n    @Input() selectedValue: string = '';\\n    @Input() disabled: boolean = false;\\n    @Input() direction: string = '';\\n    @Input() preset: any = null;\\n    @Input() tooltip: boolean = false;\\n    tooltipValue: string = '';\\n    @Input() autoClosedAfter: number = 0;\\n    @Output() valueChange = new EventEmitter<string>();\\n    @Output() valuesChange = new EventEmitter<ModelOption[] | null>();\\n    @Output() beenForced = new EventEmitter<ModelOption[] | null>();\\n    @ViewChild('formField', { static: true }) formField: any;\\n    @ViewChild('select', { static: false }) select: MatSelect | undefined;\\n    floatLabel: FloatLabelType = 'auto';\\n    currentControl: AbstractControl | undefined = undefined;\\n    private isBeingForced: boolean = false;\\n    onChange = (_: any) => { };\\n    onTouched = (_: any) => { };\\n    @Input() translate: any = null;\\n    isAppleBrowser: boolean = false;\\n\\n    constructor(\\n        @Optional() @Host() @SkipSelf() private controlContainer: ControlContainer,\\n        private el: ElementRef\\n    ) { }\\n\\n    ngAfterViewInit() {\\n        this.isAppleBrowser = this.isAppleBrowsers();\\n    }\\n    ngOnInit() { }\\n\\n    isAppleBrowsers() {\\n        if (typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    gets(obs: any) {\\n        if (obs) {\\n            return obs;\\n        } else {\\n            return {};\\n        }\\n    }\\n    ngAfterViewChecked() {\\n        if (this.controlContainer && this.el) {\\n            const fname = this.el.nativeElement.getAttribute('formControlName');\\n            const fgroupDirective = this.gets(this.controlContainer) as FormGroupDirective;\\n            if (fgroupDirective && fgroupDirective.form) {\\n                this.currentControl = fgroupDirective.form.controls[fname];\\n                if (this.currentControl) {\\n                    if (this.currentControl.validator) {\\n                        const validator = this.currentControl.validator({} as AbstractControl);\\n                        if (validator && validator['required']) {\\n                            this.required = true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    ngOnChanges(changes: SimpleChanges) {\\n        if (changes['fixPlaceholder'] && changes['fixPlaceholder'].currentValue) {\\n            this.floatLabel = this.fixPlaceholder ? 'always' : 'auto';\\n        }\\n        if (changes['list'] && changes['list'].currentValue) {\\n            if (this.list) {\\n                if (this.list.length > 0) {\\n                    this.list.map(value => {\\n                        if (value.libelle) {\\n                            value.libelle = this.translate ? this.translate.instant(value.libelle) : value.libelle;\\n                        }\\n                    });\\n                    if (this.defaultSort) {\\n                        this.list = this.list.sort((a, b) =>\\n                            a.libelle < b.libelle ? -1 : a.libelle > b.libelle ? 1 : 0\\n                        );\\n                    }\\n                }\\n            }\\n            if (this.list) {\\n                if (\\n                    this.list.length > 0 &&\\n                    this.preset &&\\n                    (!this.value || !this.getListValue(this.value))\\n                ) {\\n                    this.onUpdateValue(this.getPresetValue());\\n                    this.onTouched(true);\\n                }\\n            }\\n        }\\n        if (changes['value'] && this.getListValue(changes['value'].currentValue)) {\\n            this.value = this.getListValue(changes['value'].currentValue);\\n        }\\n        if (changes['forced']) {\\n            this.isBeingForced = true;\\n            this.resetMultiple();\\n            if (this.forced) {\\n                this.values = this.forced.map(it => this.getListValue(it)).filter((it): it is ModelOption => !!it);\\n            } else {\\n                this.values = [];\\n            }\\n            this.valuesChange.emit(this.values);\\n            this.beenForced.emit(this.values);\\n            this.onUpdateValue(this.values);\\n            this.isBeingForced = false;\\n        }\\n        if (changes['forced'] && !changes['forced'].currentValue) {\\n            // Optionally reset selection\\n        }\\n    }\\n    resetMultiple() {\\n        if (this.select && this.select.options) {\\n            this.select.options.forEach(it => {\\n                it.deselect();\\n            });\\n        }\\n    }\\n    getListValue(val: any) {\\n        return this.isValInList(val, this.list);\\n    }\\n    isAlreadySelected(val: any) {\\n        return this.isValInList(val, this.values);\\n    }\\n    isValInList(val: any, list: ModelOption[] | null) {\\n        if (!val || !list) {\\n            return null;\\n        }\\n        const res = list.find(\\n            it => (!val.value && !it.value && val === it) || (val.value && it.value && val.value === it.value) || (val.value && it.value && val.libelle === it.libelle)\\n        );\\n        return res ? res : null;\\n    }\\n    getPresetValue() {\\n        if (!this.list) return null;\\n        const res = this.list.find(\\n            it => this.preset === it.value || this.preset === it.libelle\\n        );\\n        return res ? res : this.list[0];\\n    }\\n    onUpdateValue(item: any) {\\n        this.value = item;\\n        if (this.tooltip && this.value && this.value.libelle) {\\n            this.tooltipValue = this.value.libelle;\\n        }\\n        this.onChange(item);\\n        this.valueChange.emit(item);\\n    }\\n    getPlaceHolder() {\\n        if (\\n            this.disablePlaceHolder &&\\n            this.value !== null &&\\n            this.value !== undefined &&\\n            !this.multiple\\n        ) {\\n            return '';\\n        } else {\\n            return this.placeholder;\\n        }\\n    }\\n    writeValue(value: any): void {\\n        if (!value) {\\n            this.resetMultiple();\\n        }\\n        if (this.multiple && value) {\\n            this.values = this.values ? this.values : [];\\n            if (!this.isAlreadySelected(value)) {\\n                this.values.push(value);\\n            }\\n            this.valuesChange.emit(this.values);\\n            this.onUpdateValue(this.values);\\n        }\\n        if (this.value && !this.multiple) {\\n            this.value = value;\\n        }\\n    }\\n    registerOnChange(fn: any): void {\\n        this.onChange = fn;\\n    }\\n    registerOnTouched(fn: any): void {\\n        this.onTouched = fn;\\n    }\\n    itemSelected(e: any, item: any) {\\n        if (e.source.selected) {\\n            this.writeValue(item);\\n        } else {\\n            if (this.values) {\\n                this.values = this.values.filter(it => it.libelle !== item.libelle);\\n            }\\n            this.valuesChange.emit(this.values);\\n            this.onUpdateValue(item);\\n        }\\n    }\\n}\\n\",\"<div class=\\\"zone-select\\\" appClickedOutside [hasleftFor]=\\\"autoClosedAfter\\\" (hasLeft)=\\\"select?.close()\\\" [matTooltip]=\\\"tooltipValue\\\">\\n  <div class=\\\"zone-description\\\">\\n    <mat-form-field #formField appearance=\\\"outline\\\" [floatLabel]=\\\"floatLabel\\\">\\n      <mat-label *ngIf=\\\"label\\\" [ngClass]=\\\"['formlabel']\\\">{{label}}</mat-label>\\n      <mat-label class=\\\"my-class-name\\\" *ngIf=\\\"fixPlaceholder\\\">{{getPlaceHolder()}}</mat-label>\\n      <mat-select *ngIf=\\\"multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [multiple]=\\\"multiple\\\" [value]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" (onSelectionChange)=\\\"itemSelected($event, topping)\\\">{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n      <mat-select *ngIf=\\\"!multiple\\\" #select (blur)=\\\"onTouched($event)\\\" [disabled]=\\\"disabled\\\" [placeholder]=\\\"getPlaceHolder()||''\\\" [(value)]=\\\"value\\\" (valueChange)=\\\"onUpdateValue($event)\\\" [required]=\\\"required\\\" cdkTextareaAutosize>\\n        <mat-option *ngIf=\\\"defaultValue\\\" class=\\\"defaultValue\\\"></mat-option>\\n        <mat-option *ngFor=\\\"let topping of list\\\" [value]=\\\"topping\\\" >{{topping?.libelle ? topping?.libelle: topping}}</mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n  </div>\\n</div>\\n\",\"import { AfterViewChecked, Component, OnInit, OnChanges, SimpleChanges, ViewChild, ElementRef, Input, Output, EventEmitter, Optional, Host, SkipSelf } from '@angular/core';\\nimport { AbstractControl, ControlContainer, ControlValueAccessor, FormControl, FormGroup, FormGroupDirective, FormsModule, ReactiveFormsModule } from '@angular/forms';\\nimport { MatFormFieldModule } from '@angular/material/form-field';\\nimport { MatIconModule } from '@angular/material/icon';\\nimport { MatInputModule } from '@angular/material/input';\\nimport { CommonModule } from '@angular/common';\\n\\n@Component({\\n  selector: 'dia-textarea',\\n  imports: [MatFormFieldModule, MatInputModule, MatIconModule, CommonModule, FormsModule, ReactiveFormsModule],\\n  templateUrl: './textarea.html',\\n  styleUrl: './textarea.scss'\\n})\\nexport class Textarea implements ControlValueAccessor, OnChanges, OnInit, AfterViewChecked {\\n  @ViewChild('textarea', { static: false })\\n  input!: ElementRef;\\n  @Input() label: string='';\\n  @Input() unit: string|undefined;\\n  @Input() placeholder: string|undefined;\\n  @Input() description: string|undefined;\\n  @Input() value: string|undefined;\\n  @Input() readonly: boolean|undefined;\\n  @Input() innerHTML: string|undefined;\\n  @Input() isTextArea = true;\\n  @Output() valueChange = new EventEmitter();\\n  @Input() maxLength: number|undefined;\\n  @Input() minrows: number|undefined;\\n  @Input()\\n  required: boolean|undefined;\\n  @Input()\\n  name: string|undefined;\\n  @Input()\\n  disabled: boolean|undefined;\\n  @Input()\\n  defaultControl: boolean|undefined;\\n  @Input()\\n  customFormat: any;\\n  @Input()\\n  formControlName: string='';\\n  @Input()\\n  formGroup: any;\\n  @Input()\\n  iconAction!: (...args: any[]) => any|undefined;\\n  @Input()\\n  icon:string='';\\n  @Input()\\n  dblClick!: (...args: any[]) => any;\\n  @Input()\\n  countDown: boolean|undefined;\\n  currentControl: AbstractControl|undefined;\\n  count = 0;\\n  formControl: FormControl | undefined = new FormControl();\\n  onChange = (...args: any[]) => { };\\n  onTouched = (...args: any[]) => { };\\n\\n  constructor(private el: ElementRef,\\n    @Optional() @Host() @SkipSelf()\\n    private controlContainer: ControlContainer) { }\\n  ngAfterViewChecked(): void {\\n    if (this.controlContainer && this.el) {\\n      let fname = this.el.nativeElement.getAttribute('formControlName');\\n      fname = fname ? fname : this.el.nativeElement.getAttribute('ng-reflect-name');\\n      fname = fname ? fname : this.input.nativeElement.name;\\n      const fgroupDirective = this.controlContainer  as FormGroupDirective;\\n      if (fgroupDirective && fgroupDirective['form']) {\\n        this.currentControl = fgroupDirective['form'].controls[fname];\\n        if (this.currentControl) {\\n          if (this.currentControl.validator) {\\n            const validator = this.currentControl.validator({} as AbstractControl);\\n            if (validator && validator['required']) {\\n              this.required = true;\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  ngOnInit(): void {\\n    if (this.defaultControl) {\\n      this.formControl = new FormControl(this.value);\\n      if (this.input) {\\n        this.input.nativeElement.formControl = this.formControl;\\n      }\\n    }\\n    if (this.controlContainer) {\\n      const form = this.controlContainer.control as FormGroup;\\n      const lbl = this.el.nativeElement.getAttribute('formControlName');\\n      if (form) {\\n        const control = form.controls[lbl ? lbl : this.formControlName] as FormControl;\\n      }\\n      /*control.valueChanges.subscribe(_=>{\\n        //this.value = _;\\n      });*/\\n\\n    }\\n  }\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes['value'] && changes['value'].currentValue) {\\n      this.count = this.value?.length||0;\\n    }\\n  }\\n  change(newValue: any) {\\n    this.writeValue(newValue);\\n    // this.value = newValue;\\n    this.valueChange.emit(newValue);\\n  }\\n  changeTextAreaValue() {\\n    this.valueChange.emit(this.value);\\n  }\\n  writeValue(val: any): void {\\n    this.value = val;\\n  }\\n  registerOnChange(fn: any): void {\\n    this.onChange = fn;\\n  }\\n  registerOnTouched(fn: any): void {\\n    this.onTouched = fn;\\n  }\\n  /* setDisabledState?(isDisabled: boolean): void {\\n     throw new Error(\\\"Method not implemented.\\\");\\n   }*/\\n  iconClicked(item?: any) {\\n    return this.iconAction ? this.iconAction(item) : null;\\n  }\\n  dblClicked(item?: any) {\\n    return this.dblClick ? this.dblClick(item) : null;\\n  }\\n}\",\"<div class=\\\"zone-description\\\">\\n    <!--div contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n\\t\\t<ng-content></ng-content>\\n  </div-->\\n    <div *ngIf=\\\"!isTextArea && readonly\\\" contenteditable=\\\"false\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"!isTextArea && !readonly\\\" contenteditable=\\\"true\\\" #div [attr.placeholder]=\\\"placeholder\\\" [name]=\\\"label\\\"\\n        [innerHTML]=\\\"innerHTML\\\" [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change(div.innerText)\\\" ngDefaultControl>\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <ng-content></ng-content>\\n    </div>\\n    <div *ngIf=\\\"isTextArea && formGroup\\\" [formGroup]=\\\"formGroup\\\">\\n        <mat-form-field *ngIf=\\\"isTextArea\\\" appearance=\\\"outline\\\">\\n            <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n            <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n                [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\"\\n                [attr.maxLength]=\\\"maxLength\\\" [formControlName]=\\\"formControlName\\\" contenteditable=\\\"contenteditable\\\"\\n                matInput [ngModel]=\\\"value\\\" (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\"\\n                (blur)=\\\"onTouched($event)\\\" cdkTextareaAutosize></textarea>\\n        </mat-form-field>\\n    </div>\\n    <mat-form-field *ngIf=\\\"isTextArea && !formGroup\\\" appearance=\\\"outline\\\">\\n        <mat-label *ngIf=\\\"label\\\">{{label}}</mat-label>\\n        <textarea matInput #textarea *ngIf=\\\"isTextArea\\\" [readonly]=\\\"readonly\\\" [attr.rows]=\\\"minrows\\\"\\n            [attr.name]=\\\"name ? name : 'textarea'\\\" [attr.disabled]=\\\"disabled ? '' : null\\\" [attr.maxLength]=\\\"maxLength\\\"\\n            (blur)=\\\"onTouched($event)\\\" contenteditable=\\\"contenteditable\\\" matInput [ngModel]=\\\"value\\\"\\n            (ngModelChange)=\\\"change($event)\\\" [name]=\\\"label\\\" [placeholder]=\\\"placeholder||''\\\" cdkTextareaAutosize></textarea>\\n        <div class=\\\"countdown\\\" *ngIf=\\\"countDown\\\">{{count + '/' + maxLength}}</div>\\n    </mat-form-field>\\n    <div *ngIf=\\\"description\\\" class=\\\"description\\\" [innerHTML]=\\\"description\\\"></div>\\n    <mat-icon *ngIf=\\\"icon\\\" matSuffix (click)=\\\"iconClicked($event)\\\" (dblclick)=\\\"dblClicked($event)\\\">{{ icon }}</mat-icon>\\n    <span matSuffix *ngIf=\\\"unit\\\" class=\\\"input-unit\\\" align=\\\"end\\\">{{\\n        unit\\n        }}</span>\\n</div>\",\"import { CommonModule } from \\\"@angular/common\\\";\\nimport { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from \\\"@angular/core\\\";\\nimport { FormGroup, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from \\\"@angular/forms\\\";\\nimport { MatFormFieldModule } from \\\"@angular/material/form-field\\\";\\nimport { MatInputModule } from \\\"@angular/material/input\\\";\\nimport { MatTooltipModule } from \\\"@angular/material/tooltip\\\";\\nimport { IFormatInput } from \\\"../common/IFormatInput\\\";\\nimport { Dossier } from \\\"../common/Dossier\\\";\\nimport { ModelOption } from \\\"../common/model-option\\\";\\nimport { Inputs} from \\\"../input/input\\\";\\nimport { InputDatePicker } from \\\"../input-date-picker/input-date-picker\\\";\\nimport { IsNumericDirective } from \\\"../directives/is-numeric.directive\\\";\\nimport { Select } from \\\"../select/select\\\";\\nimport { Textarea } from \\\"../textarea/textarea\\\";\\n\\n@Component({\\n    selector: 'dia-dossier',\\n    standalone: true,\\n    templateUrl: './dossier.html',\\n    styleUrls: ['./dossier.css'],\\n    imports: [MatFormFieldModule, MatInputModule, FormsModule, ReactiveFormsModule, CommonModule, MatTooltipModule, Inputs, Select, IsNumericDirective, Textarea, InputDatePicker   ],\\n    providers: [\\n        {\\n            provide: NG_VALUE_ACCESSOR,\\n            multi: true,\\n            useExisting: forwardRef(() => DossierBloc)\\n        }\\n    ]\\n})\\nexport class DossierBloc implements OnInit, OnChanges {\\n    amountFormat: IFormatInput|undefined;\\n    @Input()\\n    disabled= false;\\n    @Input()\\n    modifiable = false;\\n    @Input()\\n    translateSuffix: string = '';\\n    @Input()\\n    nbColumns: number=2;\\n    @Input()\\n    items: Dossier[]=[];\\n    @Input()\\n    ratifiable: any;\\n    @Input()\\n    minrows: number=2;\\n    @Input()\\n    public transServ: any;\\n    @Input()\\n    debug: boolean=false;\\n\\n    emptyfn = () => {};\\n    constructor() {\\n        //this.transServ = new Translate();\\n    }\\n    ngOnChanges(changes: SimpleChanges) {\\n        if (changes['items'] && changes['items'].currentValue) {\\n            if (this.items ) {\\n                //this.transServ.get(this.translateSuffix + 'SIREN').subscribe((t:any) => {\\n                    this.items.forEach(it => {\\n                        //it = this.translator(it);\\n                        let sum_sizeColumn = 0;\\n                        if (this.nbColumns && this.nbColumns > 0 && it.list) {\\n                            it.list = it.list.filter(entity => entity.hide !== true);\\n\\n                            // fix JIRA 1060\\n                            it.list.map(res => {\\n                                if (res.sizeColumn && res.sizeColumn > 1) {\\n                                    sum_sizeColumn = sum_sizeColumn + res.sizeColumn - 1;\\n                                }\\n                            });\\n\\n                            while ((it.list.length + sum_sizeColumn) % this.nbColumns !== 0) {\\n                                it.list.push(Dossier.getEmptyDossier() as Dossier);\\n                            }\\n\\n                            // fix JIRA 1060\\n                            let index_column = 0;\\n                            it.list.map(res => {\\n                                if (res.sizeColumn && res.sizeColumn > 1) {\\n                                    index_column = index_column + 1 + res.sizeColumn - 1;\\n                                } else {\\n                                    index_column = index_column + 1;\\n                                }\\n                                res.indexColumn = index_column;\\n                            });\\n                        }\\n                        if (it.list) {\\n                            it.list.forEach(item => (item = this.translator(item)));\\n                        }\\n                    });\\n                //});\\n            }\\n        }\\n    }\\n    translateTitle(it: string) {\\n        if (\\n            it &&\\n            Dossier.isDefined(this.getIntName(it)) &&\\n            this.translateSuffix && this.transServ &&\\n            this.transServ.instant(this.getIntName(it)) &&\\n            this.getIntName(it) !==\\n            this.transServ.instant(this.getIntName(it))\\n        ) {\\n            return this.transServ.instant(this.getIntName(it));\\n        }\\n        return it;\\n    }\\n    translator(it: Dossier) {\\n        if (\\n            it.title &&\\n            Dossier.isDefined(this.getIntName(it.title)) &&\\n            this.translateSuffix && this.transServ &&\\n            this.transServ.instant(this.getIntName(it.title)) &&\\n            this.getIntName(it.title) !==\\n            this.transServ.instant(this.getIntName(it.title))\\n        ) {\\n            it.title = this.transServ.instant(this.getIntName(it.title));\\n        }\\n        return it;\\n    }\\n    mapTimestampToDate(timestamp:number) {\\n        if (timestamp) {\\n            const dateObject = new Date(+timestamp);\\n            return (\\n                (dateObject.getDate() < 10\\n                    ? '0' + dateObject.getDate()\\n                    : dateObject.getDate()) +\\n                '/' +\\n                (dateObject.getMonth() + 1 < 10\\n                    ? '0' + (dateObject.getMonth() + 1)\\n                    : dateObject.getMonth() + 1) +\\n                '/' +\\n                (dateObject.getFullYear() + '').slice(-2)\\n            );\\n        }\\n        return null;\\n    }\\n    ngOnInit() { }\\n    getIntName(str:string) {\\n        return (\\n            this.translateSuffix +\\n            str\\n                .split(' ')\\n                .filter(s => s.length > 2)\\n                .join()\\n                //    .normalize('NFD')\\n                .replace(/[\\\\u0300-\\\\u036f]/g, '')\\n                .replace(/[^a-zA-Z0-9]+/g, '')\\n                .toUpperCase()\\n        );\\n    }\\n    onclick(item:Dossier) {\\n        if (item.onclick) {\\n            item.onclick(item);\\n        }\\n    }\\n    handleChange(e:any, item:Dossier) {\\n        if (item.model && item.field) {\\n            item.model[item.field] = e;\\n        }\\n        if (item.onchange) {\\n            item.onchange(e);\\n        }\\n    }\\n    handleValue(item:Dossier) {\\n        if (item) {\\n            if (item.model && item.field && item.model[item.field]) {\\n                return item.model[item.field];\\n            } else {\\n                return item.value;\\n            }\\n        }\\n    }\\n    \\n    handleSelectValue(item:Dossier): ModelOption | null {\\n        if (!item || !item.value) return null;\\n        \\n        // If item.value is already a ModelOption, return it\\n        if (typeof item.value === 'object' && item.value !== null && 'libelle' in item.value && 'value' in item.value) {\\n            return item.value as ModelOption;\\n        }\\n        \\n        // Convert string/number to ModelOption\\n        const valueStr = String(item.value);\\n        return new ModelOption(valueStr, valueStr);\\n    }\\n    \\n    handleFormattedValue(item: Dossier): string {\\n        if (!item || !item.value) return '';\\n        \\n        if (item.suffix) {\\n            return this.amountFormat?.transform(item.value).concat(' ' + item.suffix);\\n        } else if (item.isNumber) {\\n            return this.amountFormat?.transform(item.value);\\n        } else if (item.isDate) {\\n            return this.mapTimestampToDate(+item.value) || '';\\n        } else {\\n            return String(item.value);\\n        }\\n    }\\n    \\n    handleDateValue(item: Dossier): Date | undefined {\\n        if (!item || !item.value) return undefined;\\n        \\n        if (typeof item.value === 'number') {\\n            return new Date(item.value);\\n        } else if (typeof item.value === 'string') {\\n            const parsed = new Date(item.value);\\n            return isNaN(parsed.getTime()) ? undefined : parsed;\\n        }\\n        \\n        return undefined;\\n    }\\n    fgroup(){\\n        return new FormGroup({});\\n    }\\n}\",\"<div class=\\\"dossierBloc container\\\">\\n    <!--div-- class=\\\"forMobileScroll\\\"></!--div-->\\n    <div class=\\\"content-detail\\\" *ngFor=\\\"let bloc of items; let last = last; \\\">\\n        <div class=\\\"innerContent\\\">\\n            <div class=\\\"templateTable\\\" *ngIf=\\\"bloc.custom && !bloc.hide\\\">\\n                <p class=\\\"title\\\">{{bloc.title}}</p>\\n                <div *ngIf=\\\"!bloc.custom else custom\\\"></div>\\n            </div>\\n            <div class=\\\"templateField \\\" *ngIf=\\\"!bloc.custom\\\">\\n                <p class=\\\"title\\\">{{bloc.title}} </p>\\n                <div class=\\\"fieldContainer {{bloc?.className}}\\\">\\n                    <ng-container *ngFor=\\\"let item of bloc.list; let i = index\\\">\\n                            @if (debug) {\\n                                {{item|json }}\\n\\n                            }\\n                        <!-- JIRA 924 - JIRA 1060 -->\\n                        <div class=\\\"content col{{ item.sizeColumn }} {{item.className}}\\\"\\n                            [ngClass]=\\\"{isRatifView: ratifiable}\\\" [matTooltip]=\\\"item.tooltip\\\"\\n                            [matTooltipPosition]=\\\"'left'\\\">\\n                            <mat-form-field (click)=\\\"onclick(item)\\\" *ngIf=\\\"!item.hide && !modifiable\\\"\\n                                class=\\\"example-full-width\\\"\\n                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick}\\\">\\n                                <!--mat-label *ngIf=\\\"item.tooltip\\\" >{{item.title}}</mat-label-->\\n                                <textarea *ngIf=\\\"item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"handleFormattedValue(item)\\\"\\n                                    cdkTextareaAutosize></textarea>\\n                                <textarea *ngIf=\\\"!item.value\\\" disabled=\\\"disabled\\\" matInput [placeholder]=\\\"item.title||''\\\"\\n                                    [ngModel]=\\\"'--'\\\" cdkTextareaAutosize></textarea>\\n                            </mat-form-field>\\n                            <div *ngIf=\\\"!item.hide\\\">\\n                                <div class=\\\"modifiable\\\"\\n                                    *ngIf=\\\"modifiable && !item.isDate && !item.custom && !item.isRadio && !item.selectValues && !item.advancedCustoms\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-input *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item.icon\\\"  appIsNumeric\\n                                    [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                        [iconAction]=\\\"item.iconAction\\\" \\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [visualHelpDisabled]=\\\"item.disableVisualHelp\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                        [minLength]=\\\"item.minLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                        [type]=\\\"item.type\\\"></dia-input>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-input [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disable]=\\\"!item.isNumber\\\" [isDecimal]=\\\"item.isDecimal\\\"\\n                                                [icon]=\\\"item.icon\\\" [iconAction]=\\\"item.iconAction\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [visualHelpDisabled]=\\\"item.disableVisualHelp\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [minLength]=\\\"item.minLength\\\" [placeholder]=\\\"item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"\\n                                                [type]=\\\"item.type\\\"></dia-input>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"(modifiable || item.modifiable) && item.isTextarea\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <dia-textarea *ngIf=\\\"!item.formGroupConfig\\\" [icon]=\\\"item?.icon||''\\\"\\n                                        [countDown]=\\\"item.countDown\\\" appIsNumeric [disabled]=\\\"!item.isNumber\\\"\\n                                        [iconAction]=\\\"item.iconAction|| emptyfn\\\" (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [maxLength]=\\\"item.maxLength\\\" [required]=\\\"item.required\\\"\\n                                        [customFormat]=\\\"item.customFormat\\\" [readonly]=\\\"item.disabled\\\"\\n                                        [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                        [value]=\\\"handleValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                        class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <!--{{item.formGroupConfig.form.con trols[item.formGroupConfig.formName].errors|json}}-->\\n                                            <dia-textarea [readonly]=\\\"item.disabled\\\" appIsNumeric\\n                                                [disabled]=\\\"!item.isNumber\\\" [countDown]=\\\"item.countDown\\\"\\n                                                [icon]=\\\"item.icon||''\\\" [iconAction]=\\\"item.iconAction|| emptyfn\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [customFormat]=\\\"item.customFormat\\\" [maxLength]=\\\"item.maxLength\\\"\\n                                                [placeholder]=\\\"item.placeholder? item.placeholder: item.title\\\"\\n                                                [name]=\\\"item?.formGroupConfig?.formName\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [value]=\\\"handleValue(item)\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled, fill:item.fill}\\\"\\n                                                class=\\\"{{item.customClass}}\\\" [minrows]=\\\"minrows\\\"></dia-textarea>\\n                                            <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                                {{ item.getErrorMsg(item)}}\\n                                            </mat-error>\\n                                        </form>\\n                                    </div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.isDate\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-input-date-picker *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title||''\\\" [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\" [minDate]=\\\"item.minDate\\\"\\n                                        [maxDate]=\\\"item.maxDate\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-input-date-picker [label]=\\\"item.title||''\\\" [required]=\\\"item.required||false\\\"\\n                                                [minDate]=\\\"item.minDate\\\" [maxDate]=\\\"item.maxDate\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [date]=\\\"handleDateValue(item)\\\" (dateChange)=\\\"handleChange($event, item)\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-input-date-picker>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.selectValues\\\" (click)=\\\"onclick(item)\\\">\\n                                    <dia-select *ngIf=\\\"!item.formGroupConfig\\\" [required]=\\\"item.required||false\\\"\\n                                        [placeholder]=\\\"item.title\\\"\\n                                        [list]=\\\"item.selectValues\\\" [value]=\\\"handleSelectValue(item)\\\"\\n                                        (valueChange)=\\\"handleChange($event, item)\\\"\\n                                        [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                    <div class=\\\"modifiable\\\" *ngIf=\\\"item.formGroupConfig\\\">\\n                                        <form [formGroup]=\\\"item.formGroupConfig.form\\\">\\n                                            <dia-select [label]=\\\"item.title\\\" [required]=\\\"item.required||false\\\"\\n                                                (valueChange)=\\\"handleChange($event, item)\\\" [list]=\\\"item.selectValues\\\"\\n                                                [value]=\\\"handleSelectValue(item)\\\"\\n                                                formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                [ngClass]=\\\"{emptyField: (item.title && item.title.indexOf('####')>-1), linkField: item.linkParam||item.onclick, disabled:item.disabled}\\\"></dia-select>\\n                                        </form>\\n                                    </div>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable radio Margin1em\\\" *ngIf=\\\"modifiable && item.isRadio && item.formGroupConfig?.form\\\"\\n                                    (click)=\\\"onclick(item)\\\">\\n                                    <form [formGroup]=\\\"item.formGroupConfig?.form||fgroup()\\\" class=\\\"radioBlock\\\">\\n                                        <div class=\\\"radioLbl\\\">\\n                                            <mat-label>{{item.title}}</mat-label><mat-label *ngIf=\\\"item.required\\\">*\\n                                            </mat-label>:\\n                                        </div>\\n                                        <div\\n                                            class=\\\"radioChoices {{item.disabled?'radioBoxDisabled':'radioBoxEnabled'}}\\\">\\n                                            <div class=\\\"choice\\\" *ngFor=\\\"let v of item.possibleValues; let i = index\\\">\\n                                                <input type=\\\"radio\\\"\\n                                                    class=\\\" inputRadio {{item.disabled?'radioDisabled':'radioLbl'}}\\\"\\n                                                    [value]=\\\"v.value\\\" [name]=\\\"item?.formGroupConfig?.formName || ''\\\"\\n                                                    formControlName=\\\"{{item?.formGroupConfig?.formName}}\\\"\\n                                                    value=\\\"v.libelle\\\" [disabled]=\\\"item.disabled||false\\\" />\\n                                                <mat-label\\n                                                    class=\\\"ecD-form-label-radio {{item.disabled?'radioDisabled':'radioLbl'}}\\\">{{v.libelle}}</mat-label>\\n                                            </div>\\n                                        </div>\\n                                    </form>\\n                                    <mat-error *ngIf=\\\"item.getErrorMsg\\\">\\n                                        {{ item.getErrorMsg(item)}}\\n                                    </mat-error>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"modifiable && item.custom\\\" (click)=\\\"onclick(item)\\\">\\n                                    <div *ngIf=\\\"!item.custom else custom\\\"></div>\\n                                </div>\\n                                <div class=\\\"modifiable\\\" *ngIf=\\\"item.advancedCustoms\\\" (click)=\\\"onclick(item)\\\">\\n                                    <ng-container #advancedCustom *ngFor=\\\"let custom of item.advancedCustoms\\\">\\n                                        <div class=\\\"containerAdvanced\\\"><!-- (click)=\\\"advancedClicked(custom)\\\" -->\\n                                            <ng-container\\n                                                *ngTemplateOutlet=\\\"custom.template; context: {$implicit: custom.context}\\\"></ng-container>\\n                                        </div>\\n                                    </ng-container>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <!-- JIRA 1060 -->\\n                        <div class=\\\"returnLine\\\" *ngIf=\\\"nbColumns && item.indexColumn && item.indexColumn % nbColumns === 0\\\"></div>\\n                    </ng-container>\\n                </div>\\n                <p *ngIf=\\\"!last && !bloc?.noLine\\\" class=\\\"content-detail-line\\\"></p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<ng-template #custom> <ng-content></ng-content> </ng-template>\",\"import { Component } from '@angular/core';\\n\\n@Component({\\n  selector: 'lib-input-range-date',\\n  imports: [],\\n  templateUrl: './input-range-date.html',\\n  styleUrl: './input-range-date.css'\\n})\\nexport class InputRangeDate {\\n\\n}\\n\",\"<p>input-range-date works!</p>\\n\",\"import { CommonModule } from \\\"@angular/common\\\";\\nimport { Component, EventEmitter, forwardRef, HostListener, Input, OnInit, Output } from \\\"@angular/core\\\";\\nimport { NG_VALUE_ACCESSOR } from \\\"@angular/forms\\\";\\nimport { MatIconModule } from \\\"@angular/material/icon\\\";\\n\\n@Component({\\n  selector: 'dia-scroll',\\n  standalone: true,\\n  templateUrl: './scroll.html',\\n  styleUrls: ['./scroll.css'],\\n  imports: [MatIconModule, CommonModule],\\n  providers: [\\n    {\\n      provide: NG_VALUE_ACCESSOR,\\n      multi: true,\\n      useExisting: forwardRef(() => Scroll)\\n    }\\n  ]\\n})\\nexport class Scroll implements OnInit {\\n  @Input()\\n  scrolledUpDisabled = false;\\n  @Input()\\n  scrolledDownDisabled = false;\\n  @Input()\\n  scrolledLeftDisabled = false;\\n  @Input()\\n  scrolledRightDisabled = false;\\n  @Output()\\n  scrolledUp = new EventEmitter();\\n  @Output()\\n  scrolledDown = new EventEmitter();\\n  @Output()\\n  scrolledLeft = new EventEmitter();\\n  @Output()\\n  scrolledRight = new EventEmitter();\\n  @Input()\\n  scrollBuffer = 500;\\n  scrollBuffered = false;\\n  @Input()\\n  vertical = true;\\n  @Input()\\n  horizontal = true;\\n  @Input()\\n  forced = false;\\n  constructor() { }\\n\\n  @HostListener('mousewheel', ['$event'])\\n  onmouseWheel(event:any){\\n    if((event.wheelDelta>0 && !this.scrolledDownDisabled)||(event.wheelDelta<0 && !this.scrolledUpDisabled)){\\n      if(!this.scrollBuffered){\\n        this.scrollBuffered = true;\\n        if(this.vertical){\\n          this.scrolled(event.wheelDelta>0, event.wheelDelta);\\n        }\\n        if(this.horizontal){\\n          this.scrolledH(event.wheelDelta>0, event.wheelDelta);\\n        }\\n        setTimeout(()=>this.scrollBuffered = false, this.scrollBuffer);\\n      }\\n    }\\n  }\\n\\n  onmouseoverup(event:any){\\n    if(this.scrolledUpDisabled){\\n      this.scrolled(event.wheelDelta>0, event.wheelDelta);\\n    }\\n  }\\n  onmouseoverdown(event:any){\\n    if(this.scrolledDownDisabled){\\n       this.scrolled(event.wheelDelta>0, event.wheelDelta);\\n    }\\n  }\\n  ngOnInit() {\\n  }\\n  scrolled(up:any, wheel?:any){\\n    if(up){\\n      this.scrolledUp.emit(Math.abs(wheel));\\n    }else{\\n      this.scrolledDown.emit(Math.abs(wheel));\\n    }\\n  }\\n  scrolledH(up:any, wheel?:any){\\n    if(up){\\n      this.scrolledLeft.emit(Math.abs(wheel));\\n    }else{\\n      this.scrolledRight.emit(Math.abs(wheel));\\n    }\\n  }\\n}\",\"<div class=\\\"container up\\\" *ngIf=\\\"vertical && !scrolledUpDisabled\\\" [ngClass]=\\\"{containerForced: forced, upForced: forced}\\\" (click)=\\\"scrolled(true)\\\" >\\n  <mat-icon >keyboard_arrow_up</mat-icon>\\n</div>\\n\\n<div class=\\\"container down\\\" *ngIf=\\\"vertical && !scrolledDownDisabled\\\" [ngClass]=\\\"{containerForced: forced, downForced: forced}\\\" (click)=\\\"scrolled(false)\\\">\\n  <mat-icon >keyboard_arrow_down</mat-icon>\\n</div>\\n\\n<div class=\\\"container left\\\" *ngIf=\\\"horizontal && !scrolledLeftDisabled\\\" [ngClass]=\\\"{containerForced: forced, leftForced: forced}\\\" (click)=\\\"scrolledH(true)\\\" >\\n    <mat-icon >keyboard_arrow_left</mat-icon>\\n  </div>\\n\\n  <div class=\\\"container right\\\" *ngIf=\\\"horizontal  && !scrolledRightDisabled\\\" [ngClass]=\\\"{containerForced: forced, rightForced: forced}\\\" (click)=\\\"scrolledH(false)\\\">\\n    <mat-icon >keyboard_arrow_right</mat-icon>\\n  </div>\\n\",\"import { Component, OnInit, ElementRef, ViewChild, Output, EventEmitter, Input, HostListener, AfterViewInit, ViewChildren, QueryList, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { Scroll } from '../scroll/scroll';\\n\\nexport interface Tile {\\n  id?: string;\\n  empty?: boolean;\\n  desc?: string;\\n  acteur?: string;\\n  title?: string;\\n  data?: any[];\\n  css?: any;\\n  form?: any;\\n  searchHash?: string[];\\n}\\n\\n@Component({\\n  selector: 'dia-tiles',\\n  templateUrl: './tiles.html',\\n  styleUrls: ['./tiles.scss'],\\n  standalone: true,\\n  imports: [CommonModule, Scroll],\\n})\\nexport class Tiles implements OnInit, AfterViewInit, OnChanges {\\n  tunnelLeft: number | undefined = undefined;\\n  @ViewChild('scenariMask', { read: ElementRef, static: true }) tunnel: ElementRef = new ElementRef(null);\\n  @ViewChild('hoster', { read: ElementRef, static: true }) hoster: ElementRef = new ElementRef(null);\\n  @ViewChild('scroller', { read: ElementRef, static: true }) scroller: ElementRef = new ElementRef(null);\\n  @ViewChild('container', { read: ElementRef, static: true }) container: ElementRef = new ElementRef(null);\\n  @ViewChild('scenariContainer', { read: ElementRef, static: true }) scenariContainer: ElementRef = new ElementRef(null);\\n  @ViewChildren('tile', { read: ElementRef }) tile: QueryList<ElementRef> | undefined = undefined;\\n  @Input() tiles: any | Tile[] = [];\\n  @Input() selector: boolean = false;\\n  @Input() autofill: boolean = false;\\n  @Input() emptyTpl!: TemplateRef<any>;\\n  @Input() tileTemplate!: TemplateRef<any>;\\n  @Input() title: string = '';\\n  @Input() maxTiles: number | undefined = undefined;\\n  @Input() wheelSpace: number = 120;\\n  @Output() hasLeft = new EventEmitter();\\n  @Output() selection = new EventEmitter<any>();\\n  @Output() hasClicked = new EventEmitter();\\n  @Output() maxBound = new EventEmitter<boolean>();\\n  @Output() minBound = new EventEmitter<boolean>();\\n  maxLength: number = 0;\\n  @Input() autoCompute: boolean = true;\\n  @Input() forceActive: boolean = true;\\n  @Input() circularEffect: boolean = false;\\n  active: boolean = false;\\n  currentContentWidth: number | null = null;\\n  currentContentHeight: number | null = null;\\n  isMobile: boolean = false;\\n  tileWidth: number = 0;\\n  tileHeight: number = 0;\\n  maxTile: number | undefined = undefined;\\n  carouselIndex: number | undefined = undefined;\\n  scrollAngle: number = 0;\\n  translateX: string | undefined = undefined;\\n  translateY: string | undefined = undefined;\\n  @Input() scroll: number = 90;\\n  grabbing: boolean = false;\\n  @Input() pourcent: number = 0.8;\\n  @Input() minDiametre: number = 0;\\n  @Input() maxDiametre: number = 0;\\n  @Input() forcedDiametre: number | undefined = undefined;\\n  diametre: number = 0;\\n  tetas: any[] = [];\\n  init: boolean = false;\\n  ready: boolean = false;\\n  isCircularInitated: boolean = false;\\n  selectedEvent = new EventEmitter();\\n  selectedTile: any = undefined;\\n  currentEvent: any = undefined;\\n  isBoundMax: boolean = false;\\n  isBoundMin: boolean = false;\\n  @Input() debug: boolean = true;\\n  constructor() { }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes['tiles'] && changes['tiles'].currentValue) {\\n      if(this.circularEffect && this.tiles?.filter((tile: any) => tile.empty).length==0){\\n        this.computeSlider();\\n      }\\n      if(this.hoster && this.tiles && this.tileWidth) {\\n        this.hoster.nativeElement.style.width = Math.max(\\n          this.tiles.length * this.tileWidth / Math.PI * 1.3,\\n          0\\n        ) + 'px';\\n      }\\n    }\\n    if((changes['forcedDiametre'] && changes['forcedDiametre'].currentValue && !changes['forcedDiametre'].isFirstChange())\\n    ||(changes['minDiametre'] && changes['minDiametre'].currentValue && !changes['minDiametre'].isFirstChange())\\n    ||(changes['maxDiametre'] && changes['maxDiametre'].currentValue && !changes['maxDiametre'].isFirstChange())){\\n      this.computeSlider();\\n    }\\n  }\\n  next(){\\n    const activeTiles = this.tiles.filter((_: any) => !_.empty).length;\\n    const maxangle = (activeTiles - 1) * this.scrollAngle;\\n    const minangle = 90;\\n    this.scroll += this.scrollAngle;\\n    this.rotate();\\n  }\\n  prev(){\\n    const activeTiles = this.tiles.filter((_: any) => !_.empty).length;\\n    const maxangle = (activeTiles - 1) * this.scrollAngle;\\n    const minangle = 90;\\n    this.scroll -= this.scrollAngle;\\n    this.rotate();\\n  }\\n  ngOnInit() {\\n    this.isMobile = this.isMobileBrowser();\\n    if (this.isMobile) {\\n      this.active = true;\\n    }\\n    if (this.tile) {\\n      this.tile.changes.subscribe(_ => {\\n        this.tileWidth = _.nativeElement.clientWidth;\\n      });\\n    }\\n  }\\n  computeCircularTileAmount() {\\n    let boxW = this.tileWidth * 1.3;\\n    let boxH = this.tileHeight;\\n    let r = this.getDiametre() / 2;\\n    let perimetre = 2 * Math.PI * r;\\n    let amountTile = this.tiles.length;\\n    this.addEmptyTiles(Math.round(perimetre / boxW) - amountTile);\\n  }\\n  addEmptyTiles(q:number) {\\n    for (let i = this.tiles.length - 1; i < 31; i++) {\\n      this.tiles.push({ empty: true });\\n    }\\n    const diam = this.tiles.length * this.tileWidth / Math.PI * 1.3;\\n    this.hoster.nativeElement.style.width = Math.round(diam) + 'px';\\n  }\\n  isIosBrowser() {\\n    if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n  isMobileBrowser() {\\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent)) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n  getDiametre(){\\n    return  this.forcedDiametre? this.forcedDiametre : this.minDiametre>this.hoster.nativeElement.clientWidth ? this.minDiametre: this.maxDiametre<this.hoster.nativeElement.clientWidth? this.maxDiametre: this.hoster.nativeElement.clientWidth;\\n  }\\n  getFirstTile(){\\n    if (!this.tile || !this.tile.first) {\\n      return;\\n    }\\n    this.tileWidth = this.tile.first.nativeElement.clientWidth;\\n    this.tileHeight = this.tile.first.nativeElement.clientHeight;\\n    return this.tile.first;\\n  }\\n  ngAfterViewInit() {\\n    this.getDiametre();\\n    if (this.tile) {\\n      this.tile.changes.subscribe(_ => {\\n        this.getFirstTile();\\n      });\\n      if (this.tile.first) {\\n        this.getFirstTile();\\n      }\\n    }\\n    this.computeSlider();\\n    if (!this.init) {\\n      this.rotateBox({ movementX: 0 });\\n      setTimeout(() => { this.computeSlider(true); this.mouseUp(null); }, 300);\\n      this.init = true;\\n    }\\n  }\\n  @HostListener('document:resize', ['$event'])\\n  resetTunnel(e?:any) {\\n    this.tunnelLeft = 0;\\n    this.tunnel.nativeElement.style.left = this.tunnelLeft + 'px';\\n    this.computeSlider();\\n  }\\n  getMaxTiles(): number {\\n    this.getFirstTile();\\n    let widthTile;\\n    if (this.tile && this.tile.first) {\\n      widthTile = this.tile.first.nativeElement.clientWidth;\\n      this.log('largeur tiles: '+widthTile)\\n    }\\n    if (this.maxTiles) {\\n      return Math.floor(this.maxTiles);\\n    }\\n    if (widthTile) {\\n      return Math.floor(this.container.nativeElement.clientWidth / widthTile);\\n    }\\n    if (this.tileWidth) {\\n      return Math.floor(this.container.nativeElement.clientWidth / this.tileWidth);\\n    }\\n    return this.tiles.length;\\n  }\\n  computeAngle(c:any, i:number, tube:any, num:number) :number{\\n    return (360 / num * i);\\n  }\\n  computeLeft(c:any, i:number, tube:any, num:number) {\\n    let teta = this.computeAngle(c, i, tube, num);\\n    return (this.getDiametre() - this.getDiametre() * Math.cos(teta * Math.PI / 180)) / 2;\\n  }\\n  computeBottom(c:any, i:number, tube:any, num:number) {\\n    let teta = this.computeAngle(c, i, tube, num);\\n    return (this.getDiametre() - this.getDiametre() * Math.sin(teta * Math.PI / 180)) / 2;\\n  }\\n  computeSlider(init?:boolean) {\\n    if (this.init) {\\n      setTimeout(() => this.ready = true, 300);\\n    }\\n    if (this.tunnel && this.tiles) {\\n      const overflow = this.tunnel.nativeElement.clientWidth - this.container.nativeElement.clientWidth;\\n      if (this.circularEffect) {\\n        this.tunnel.nativeElement.style.height = this.getDiametre() + 'px';\\n        this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n      }\\n      this.maxLength = overflow > 0 ? overflow / 2 : 0;\\n      let boxW = Math.round(this.tunnel.nativeElement.clientWidth / this.tiles.length);\\n      this.log('boxing: '+ boxW)\\n      this.currentContentWidth = boxW;\\n      let boxH = this.tunnel.nativeElement.clientHeight;\\n      if (this.scroller && this.scroller.nativeElement && this.scroller.nativeElement.children.length > 0) {\\n        this.scroller.nativeElement.children[0].style.height = boxH + 'px'\\n        this.scroller.nativeElement.children[0].style.width = boxW / 3 + 'px'\\n        this.scroller.nativeElement.children[1].style.height = boxH + 'px'\\n        this.scroller.nativeElement.children[1].style.width = boxW / 3 + 'px'\\n        this.scroller.nativeElement.children[0].style.top = '-' + (boxH + 32) / 2 + 'px'\\n        this.scroller.nativeElement.children[1].style.top = '-' + (boxH + 32) / 2 + 'px'\\n      }\\n      if (this.circularEffect) {\\n        this.getDiametre();\\n        this.translateY = 1.7 * this.getDiametre() + 'px';\\n        this.translateX = (this.getDiametre() * 1.2 + boxW) + 'px';\\n      }\\n      if (this.forceActive && this.tunnel.nativeElement.clientWidth > this.getDiametre()) {\\n        this.active = true;\\n      } else {\\n        this.active = false;\\n      }\\n      if (this.autofill && !this.circularEffect) {\\n        if (this.tiles.filter((_: any) => _.empty).length > 0 && this.tiles.length > this.getMaxTiles()) {\\n          this.tiles = this.tiles.filter((_: any) => !_.empty);\\n        }\\n        let empties = [];\\n        if (this.tiles.length < this.getMaxTiles() - 1) {\\n          while (this.tiles.length + empties.length < this.getMaxTiles()) {\\n            empties.push({ empty: true });\\n          }\\n          let tmp = [];\\n          if (empties.length % 2 !== 0) {\\n            empties.pop();\\n          }\\n          tmp = this.tiles.map((_: any) => empties.splice(Math.floor(empties.length / 2), 0, _));\\n          this.tiles = empties;\\n        }\\n      }\\n      if (this.circularEffect) {\\n        this.refreshCircular();\\n      }\\n    }\\n  }\\n  scrolledRight(e:any, tar?: any) {\\n    if (this.active) {\\n      tar = this.getTar(tar, e);\\n      if (!this.tunnelLeft) {\\n        this.tunnelLeft = 0;\\n      }\\n      if (this.tunnelLeft < this.maxLength - Math.abs(this.getSlideDelata(e))) {\\n        this.tunnelLeft += Math.abs(this.getSlideDelata(e));\\n        tar.style.left = this.tunnelLeft + 'px';\\n      }\\n    }\\n    this.refreshCircular();\\n  }\\n  refreshCircular() {\\n    if (this.circularEffect) {\\n      this.getFirstTile();\\n      this.container.nativeElement.style.height = Math.round(this.tileHeight * 1.5) + 'px';\\n      let c = this.tunnel.nativeElement.children;\\n      this.scrollAngle = (360 / (c.length));\\n      let j = 0;\\n      let r = this.getDiametre() / 2;\\n      this.log('diametre:'+this.getDiametre());\\n      this.scenariContainer.nativeElement.style.position = \\\"relative\\\"\\n      this.scenariContainer.nativeElement.style.top = r + 'px';\\n      this.tetas = [];\\n      for (let i = 0; i < c.length; i++) {\\n        if (c[i].className.indexOf('scroll') == -1) {\\n          const teta = this.computeAngle(c[i], i, this.tunnel, c.length);\\n          c[i].style.transform = '  rotate(-' + (teta + 90) + 'deg)';\\n          this.tetas.push(teta + 90);\\n          c[i].style.left = ((this.computeLeft(c[i], i, this.tunnel, c.length)) - r - this.tileWidth / 2) + 'px';\\n          c[i].style.bottom = ((this.computeBottom(c[i], i, this.tunnel, c.length)) - this.tileHeight / 2) + 'px';\\n        }\\n      }\\n      this.computeCircularTileAmount();\\n      if (!this.isCircularInitated) {\\n        this.isCircularInitated = true;\\n      }\\n    }\\n  }\\n  scrolledLeft(e: any, tar?: any) {\\n    if (this.active) {\\n      tar = this.getTar(tar, e);\\n      if (!this.tunnelLeft) {\\n        this.tunnelLeft = 0;\\n      }\\n      if (this.tunnelLeft > -this.maxLength + Math.abs(this.getSlideDelata(e))) {\\n        this.tunnelLeft -= Math.abs(this.getSlideDelata(e));\\n        tar.style.left = this.tunnelLeft + 'px';\\n      }\\n    }\\n    this.refreshCircular();\\n  }\\n  getSlideDelata(e:any) {\\n    return e && e.deltaX ? e.deltaX : e ? e : this.autoCompute ? this.currentContentWidth : this.wheelSpace;\\n  }\\n  getTar(tar:any, e:any) {\\n    return this.tunnel.nativeElement;\\n  }\\n  left(e:any) {\\n    this.hasLeft.emit(e);\\n  }\\n  clicked(e:any, sc:any) {\\n    this.log('clicked')\\n    if( sc.empty){\\n      this.log('clicked aborted: empty tile')\\n      return;\\n    }\\n    if(this.circularEffect){\\n      this.scroll = this.tetas[e];\\n      this.selectedTile = this.tiles[e];\\n      this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n      this.selection.emit(this.selectedTile);\\n      this.log(e);\\n    }\\n    this.hasClicked.emit(e);\\n  }\\n  mouseDown(e:any) {\\n    this.grabbing = true;\\n  }\\n  panStart(e:any) {\\n    this.grabbing = true;\\n  }\\n  mouseUp(e: MouseEvent|null) {\\n    this.grabbing = false;\\n    if (this.circularEffect) {\\n      const activeTiles = this.tiles.filter((_: any) => !_.empty).length;\\n      const maxangle = (activeTiles - 1) * this.scrollAngle;\\n      const minangle = 90;\\n      if (activeTiles === 1) {\\n        this.scroll = 90;\\n        this.selectedTile = this.tiles[0];\\n        this.selection.emit(this.selectedTile);\\n      } else if (this.tiles.length != activeTiles) {\\n        const tmp = Math.round((this.scroll) / this.scrollAngle);\\n        this.scroll = tmp * this.scrollAngle;\\n        this.scroll = this.scroll > maxangle + minangle ? maxangle + minangle : this.scroll < minangle ? minangle : this.scroll;\\n        if(this.scroll >= maxangle){\\n          this.boundMaxReached() ;\\n        } \\n        if( this.scroll<= minangle){\\n          this.boundMinReached() ;\\n        }\\n        let v = this.scroll;\\n        let last = null;\\n        for (let i = 0; i < this.tetas.length; i++) {\\n          const cur = Math.abs(this.tetas[i] - v);\\n          if (last === null || cur <= last ) {\\n            last = cur;\\n            this.selectedTile = this.tiles[i];\\n            this.selection.emit(this.selectedTile);\\n          }\\n        }\\n      } else {\\n        this.log(maxangle + \\\" > \\\" + this.scroll + \\\" > \\\" + minangle);\\n        const multipleTour = Math.round((this.scroll - 90) / 360);\\n        let last = null;\\n        let v = multipleTour === 0 ? this.scroll : Math.round(this.scroll / multipleTour);\\n        for (let i = 0; i < this.tetas.length; i++) {\\n          const cur = Math.abs(this.tetas[i] - v);\\n          if (last === null || cur <= last ) {\\n            last = cur;\\n            this.scroll = this.tetas[i];\\n            this.selectedTile = this.tiles[i];\\n            this.selection.emit(this.selectedTile);\\n          }\\n        }\\n      }\\n      this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n      if (this.selector) {\\n        this.selectedEvent.emit(this.selectedTile);\\n      }\\n    }\\n  }\\n  mouseLeave(e: any) {\\n    if (this.grabbing) {\\n      this.grabbing = false;\\n      this.mouseUp(e);\\n    }\\n  }\\n  mouseMove(e: MouseEvent) {\\n    if (this.grabbing && !this.isIosBrowser()) {\\n      this.rotateBox(e);\\n      e.stopPropagation();\\n    }\\n  }\\n  panMoving(e: { srcEvent: PointerEvent }|any) {\\n    if (this.grabbing) {\\n      const ev = e as any;\\n      if (!e.srcEvent.movementX) {\\n        this.scroll += this.scrollAngle * ev.overallVelocityX *0.1;\\n        this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n      } else {\\n        this.rotateBox(e.srcEvent, e);\\n      }\\n    }\\n  }\\n  panEnd(e: { srcEvent: PointerEvent }|any) {\\n    this.grabbing = false;\\n    this.mouseUp(e.srcEvent)\\n  }\\n  onmouseWheel(event: any) {\\n    if (this.circularEffect) {\\n      this.rotateBox(event)\\n    } else {\\n      event.preventDefault();\\n      event.wheelDelta > 0 ? this.scrolledLeft(Math.abs(event.wheelDelta), event.currentTarget) : this.scrolledRight(Math.abs(event.wheelDelta), event.currentTarget);\\n    }\\n  }\\n  rotateBox(event : any, eParent?: any) {\\n    this.log(event);\\n    if(event.movementX && this.circularEffect){\\n      this.scroll += this.scrollAngle * event.movementX * 0.01;\\n      this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n    }\\n  }\\n  isSameEventAndTarget(e: any) {\\n    return e && this.currentEvent && this.currentEvent.type === e.type;\\n  }\\n  getDelta(e: any, field: string) {\\n    return e && this.currentEvent ? e[field] - this.currentEvent[field] : 0;\\n  }\\n  rotate(){\\n    const activeTiles = this.tiles.filter((_: any) => !_.empty).length;\\n    const maxangle = (activeTiles - 1) * this.scrollAngle;\\n    const minangle = 90;\\n    if(this.scroll > maxangle){\\n      this.scroll = maxangle;\\n     this.boundMaxReached()\\n    }else if(this.scroll < minangle){\\n      this.scroll = minangle;\\n    this.boundMinReached()\\n    }else{\\n      this.isBoundMax = false;\\n      this.isBoundMin = false;\\n    }\\n    this.scenariContainer.nativeElement.style.transform = ' rotate(' + this.scroll + 'deg)';\\n  }\\n  log(any: any){\\n    if(this.debug){\\n      console.log(any);\\n    }\\n  }\\n  boundMaxReached(){\\n    this.isBoundMax = true;\\n    this.maxBound.emit(true);\\n  }\\n  boundMinReached(){\\n    this.isBoundMin = true;\\n    this.minBound.emit(true);\\n  }\\n}\\n\",\"<div class=\\\"container\\\"\\n  [ngClass]=\\\"{circular:circularEffect, grabbing:grabbing, grab:!grabbing, hideComponent:circularEffect && !isCircularInitated}\\\"\\n  #container (window:resize)=\\\"resetTunnel()\\\">\\n  <div id=\\\"choices\\\" class=\\\"choices\\\" (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n    (panstart)=\\\"panStart($event)\\\" (pan)=\\\"panMoving($event)\\\" (panend)=\\\"panEnd($event)\\\" (mousemove)=\\\"mouseMove($event)\\\"\\n    (mousedown)=\\\"mouseDown($event)\\\" (mouseup)=\\\"mouseUp($event)\\\" (mouseleave)=\\\"mouseLeave($event)\\\">\\n    <div class=\\\"choicesMask\\\">\\n      <div class=\\\"TileSelection\\\">{{title}}</div>\\n      <div class=\\\"scenariContainer\\\" #scenariContainer>\\n        <div class=\\\"visibleMask\\\">\\n          <div class=\\\"scenariMask\\\" #scenariMask (mousewheel)=\\\"circularEffect? null:onmouseWheel($event)\\\"\\n            (swipeleft)=\\\"circularEffect? null:scrolledLeft($event)\\\"\\n            (swiperight)=\\\"circularEffect? null:scrolledRight($event)\\\">\\n            <ng-container *ngFor=\\\"let scenario of tiles; let i = index;\\\">\\n              <div *ngIf=\\\"!scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, animate:isCircularInitated, selected: scenario === selectedTile}\\\"\\n                #tile (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: scenario, itemIndex:i, carouselIndex:i, selected: scenario === selectedTile}\\\"></ng-container>\\n              </div>\\n              <div *ngIf=\\\"scenario.empty\\\"\\n                [ngClass]=\\\"{box:!circularEffect, cBox:circularEffect, emptyTile:scenario.empty}\\\" #tile\\n                (mouseleave)=\\\"left(scenario)\\\" (click)=\\\"clicked(i, scenario)\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"emptyTpl; context: {$implicit: scenario, selected: scenario === selectedTile, context: {$implicit: scenario, itemIndex:i, carouselIndex:i}}\\\"></ng-container>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"scrollerBox\\\" [ngClass]=\\\"{hideScroll:!active}\\\" #hoster (mousewheel)=\\\"onmouseWheel($event)\\\">\\n    <!--div class=\\\"box hide\\\" >\\n          <ng-container  *ngTemplateOutlet=\\\"tileTemplate; context: {$implicit: tiles[0]}\\\"></ng-container>\\n      </div-->\\n    <dia-scroll class=\\\"scroller\\\" #scroller (scrolledLeft)=\\\"scrolledLeft($event)\\\" [scrollBuffer]=\\\"5\\\"\\n      (scrolledRight)=\\\"scrolledRight($event)\\\" [forced]=\\\"isMobile\\\" [vertical]=false></dia-scroll>\\n  </div>\\n</div>\",\"/*\\n * Public API Surface of dia-utils-libs\\n */\\n\\nexport * from './lib/dia-utils-libs.module';\\nexport * from './lib/dossier/dossier';\\nexport * from './lib/input/input';\\nexport * from './lib/select/select';\\nexport * from './lib/textarea/textarea';\\nexport * from './lib/input-date-picker/input-date-picker';\\nexport * from './lib/input-range-date/input-range-date';\\nexport * from './lib/scroll/scroll';\\nexport * from './lib/tiles/tiles';\\nexport * from './lib/directives/clicked-outside.directive';\\nexport * from './lib/directives/is-numeric.directive';\\nexport * from './lib/common/Dossier';\\nexport * from './lib/common/model-option';\\nexport * from './lib/common/IFormatInput';\\nexport * from './lib/common/ITableState';\\nexport * from './lib/common/IAdvancedCustom';\\nexport * from './lib/common/IDossierItem'; \\nexport * from './lib/common/IFormGroupConfig'; \\n\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i4\",\"i5\",\"i1\",\"i2\",\"i3\",\"i6\"],\"mappings\":\"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\"}","type":"asset"}]}